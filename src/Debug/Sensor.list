
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003750  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080038d8  080038d8  000048d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003920  08003920  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003920  08003920  00004920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003928  08003928  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003928  08003928  00004928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800392c  0800392c  0000492c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003930  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  0800393c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  0800393c  00005110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffb8  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002368  00000000  00000000  00014ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00017360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b55  00000000  00000000  000181f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264c5  00000000  00000000  00018d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012165  00000000  00000000  0003f20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee8b4  00000000  00000000  0005136f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fc23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c30  00000000  00000000  0013fc68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00143898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038c0 	.word	0x080038c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080038c0 	.word	0x080038c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <delay_us>:
#include "tim.h"
#include "stm32l4xx_hal.h"
#include "gpio.h"

void delay_us(uint16_t time) //funkcja opóźnienia czasowego
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7,0); // załącznie timera
 80004c2:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <delay_us+0x30>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7)<time); // wyłaczenie timera po upływie zadanego czasu
 80004ca:	bf00      	nop
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <delay_us+0x30>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d3f9      	bcc.n	80004cc <delay_us+0x14>
}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000038 	.word	0x20000038

080004ec <Sensor_trigger>:
uint32_t distance = 0;
uint32_t start;
uint32_t stop;

void Sensor_trigger() //funkcja wysyłania pulsu trigger
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, 1); // załączenie pulsu trigger
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fa:	f000 fe2d 	bl	8001158 <HAL_GPIO_WritePin>
	delay_us(10); // oczekiwanie 10us
 80004fe:	200a      	movs	r0, #10
 8000500:	f7ff ffda 	bl	80004b8 <delay_us>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, 0); // wyłączenie pulsu trigger
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800050a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050e:	f000 fe23 	bl	8001158 <HAL_GPIO_WritePin>
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <Sensor_get_distance>:

int Sensor_get_distance() // funckja pomiaru odległości
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	Sensor_trigger();
 800051c:	f7ff ffe6 	bl	80004ec <Sensor_trigger>

	while( !(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin ))); // czekanie na stan wysoki
 8000520:	bf00      	nop
 8000522:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f000 fdfd 	bl	8001128 <HAL_GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d0f6      	beq.n	8000522 <Sensor_get_distance+0xa>
	time1 = __HAL_TIM_GET_COUNTER(&htim7); // czas dla początku impulsu echo
 8000534:	4b13      	ldr	r3, [pc, #76]	@ (8000584 <Sensor_get_distance+0x6c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800053a:	4a13      	ldr	r2, [pc, #76]	@ (8000588 <Sensor_get_distance+0x70>)
 800053c:	6013      	str	r3, [r2, #0]

	while( HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin )); // czekanie na stan niski
 800053e:	bf00      	nop
 8000540:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000548:	f000 fdee 	bl	8001128 <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1f6      	bne.n	8000540 <Sensor_get_distance+0x28>
	time2 = __HAL_TIM_GET_COUNTER(&htim7);  // czas dla końca pusu echo
 8000552:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <Sensor_get_distance+0x6c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000558:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <Sensor_get_distance+0x74>)
 800055a:	6013      	str	r3, [r2, #0]

	diff = time2 - time1; // pomiar długości pulsu echo
 800055c:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <Sensor_get_distance+0x74>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <Sensor_get_distance+0x70>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	4a0a      	ldr	r2, [pc, #40]	@ (8000590 <Sensor_get_distance+0x78>)
 8000568:	6013      	str	r3, [r2, #0]
	distance = diff/58; // pomiar odległości według wzoru producenta
 800056a:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <Sensor_get_distance+0x78>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a09      	ldr	r2, [pc, #36]	@ (8000594 <Sensor_get_distance+0x7c>)
 8000570:	fba2 2303 	umull	r2, r3, r2, r3
 8000574:	095b      	lsrs	r3, r3, #5
 8000576:	4a08      	ldr	r2, [pc, #32]	@ (8000598 <Sensor_get_distance+0x80>)
 8000578:	6013      	str	r3, [r2, #0]

	return distance;
 800057a:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <Sensor_get_distance+0x80>)
 800057c:	681b      	ldr	r3, [r3, #0]
}
 800057e:	4618      	mov	r0, r3
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000038 	.word	0x20000038
 8000588:	20000028 	.word	0x20000028
 800058c:	2000002c 	.word	0x2000002c
 8000590:	20000030 	.word	0x20000030
 8000594:	8d3dcb09 	.word	0x8d3dcb09
 8000598:	20000034 	.word	0x20000034

0800059c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	@ 0x28
 80005a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	4b33      	ldr	r3, [pc, #204]	@ (8000680 <MX_GPIO_Init+0xe4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a32      	ldr	r2, [pc, #200]	@ (8000680 <MX_GPIO_Init+0xe4>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005be:	4b30      	ldr	r3, [pc, #192]	@ (8000680 <MX_GPIO_Init+0xe4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000680 <MX_GPIO_Init+0xe4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000680 <MX_GPIO_Init+0xe4>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000680 <MX_GPIO_Init+0xe4>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <MX_GPIO_Init+0xe4>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	4a26      	ldr	r2, [pc, #152]	@ (8000680 <MX_GPIO_Init+0xe4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <MX_GPIO_Init+0xe4>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <MX_GPIO_Init+0xe4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	4a20      	ldr	r2, [pc, #128]	@ (8000680 <MX_GPIO_Init+0xe4>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000606:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <MX_GPIO_Init+0xe4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Trigger_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061c:	f000 fd9c 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000620:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000626:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4619      	mov	r1, r3
 8000636:	4813      	ldr	r0, [pc, #76]	@ (8000684 <MX_GPIO_Init+0xe8>)
 8000638:	f000 fbcc 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Trigger_Pin;
 800063c:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000658:	f000 fbbc 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo_Pin;
 800065c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000674:	f000 fbae 	bl	8000dd4 <HAL_GPIO_Init>

}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000
 8000684:	48000800 	.word	0x48000800

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 f9f0 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f814 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f7ff ff82 	bl	800059c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000698:	f000 f934 	bl	8000904 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800069c:	f000 f8d6 	bl	800084c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7);
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <main+0x30>)
 80006a2:	f002 f8e9 	bl	8002878 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Sensor_get_distance();
 80006a6:	f7ff ff37 	bl	8000518 <Sensor_get_distance>
	  HAL_Delay(300);
 80006aa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80006ae:	f000 fa5b 	bl	8000b68 <HAL_Delay>
  {
 80006b2:	bf00      	nop
 80006b4:	e7f7      	b.n	80006a6 <main+0x1e>
 80006b6:	bf00      	nop
 80006b8:	20000038 	.word	0x20000038

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b096      	sub	sp, #88	@ 0x58
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2244      	movs	r2, #68	@ 0x44
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 f8cb 	bl	8003866 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006e2:	f000 fd5f 	bl	80011a4 <HAL_PWREx_ControlVoltageScaling>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ec:	f000 f837 	bl	800075e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	2310      	movs	r3, #16
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000702:	2302      	movs	r3, #2
 8000704:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800070a:	230a      	movs	r3, #10
 800070c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800070e:	2307      	movs	r3, #7
 8000710:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fd96 	bl	8001250 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800072a:	f000 f818 	bl	800075e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2303      	movs	r3, #3
 8000734:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	2104      	movs	r1, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f95e 	bl	8001a08 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000752:	f000 f804 	bl	800075e <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3758      	adds	r7, #88	@ 0x58
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000762:	b672      	cpsid	i
}
 8000764:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000766:	bf00      	nop
 8000768:	e7fd      	b.n	8000766 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <HAL_MspInit+0x44>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000776:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <HAL_MspInit+0x44>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6613      	str	r3, [r2, #96]	@ 0x60
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <HAL_MspInit+0x44>)
 8000780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <HAL_MspInit+0x44>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800078e:	4a08      	ldr	r2, [pc, #32]	@ (80007b0 <HAL_MspInit+0x44>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000794:	6593      	str	r3, [r2, #88]	@ 0x58
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <HAL_MspInit+0x44>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800079a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <NMI_Handler+0x4>

080007bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <MemManage_Handler+0x4>

080007cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <UsageFault_Handler+0x4>

080007dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080a:	f000 f98d 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000818:	4802      	ldr	r0, [pc, #8]	@ (8000824 <TIM7_IRQHandler+0x10>)
 800081a:	f002 f895 	bl	8002948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000038 	.word	0x20000038

08000828 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <SystemInit+0x20>)
 800082e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000832:	4a05      	ldr	r2, [pc, #20]	@ (8000848 <SystemInit+0x20>)
 8000834:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000838:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_TIM7_Init+0x64>)
 800085e:	4a15      	ldr	r2, [pc, #84]	@ (80008b4 <MX_TIM7_Init+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_TIM7_Init+0x64>)
 8000864:	224f      	movs	r2, #79	@ 0x4f
 8000866:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_TIM7_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_TIM7_Init+0x64>)
 8000870:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000874:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_TIM7_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <MX_TIM7_Init+0x64>)
 800087e:	f001 ffa3 	bl	80027c8 <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000888:	f7ff ff69 	bl	800075e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_TIM7_Init+0x64>)
 800089a:	f002 fa23 	bl	8002ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f7ff ff5b 	bl	800075e <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000038 	.word	0x20000038
 80008b4:	40001400 	.word	0x40001400

080008b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0d      	ldr	r2, [pc, #52]	@ (80008fc <HAL_TIM_Base_MspInit+0x44>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d113      	bne.n	80008f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80008ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <HAL_TIM_Base_MspInit+0x48>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000900 <HAL_TIM_Base_MspInit+0x48>)
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <HAL_TIM_Base_MspInit+0x48>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008da:	f003 0320 	and.w	r3, r3, #32
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2037      	movs	r0, #55	@ 0x37
 80008e8:	f000 fa3d 	bl	8000d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80008ec:	2037      	movs	r0, #55	@ 0x37
 80008ee:	f000 fa56 	bl	8000d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40001400 	.word	0x40001400
 8000900:	40021000 	.word	0x40021000

08000904 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_USART2_UART_Init+0x58>)
 800090a:	4a15      	ldr	r2, [pc, #84]	@ (8000960 <MX_USART2_UART_Init+0x5c>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090e:	4b13      	ldr	r3, [pc, #76]	@ (800095c <MX_USART2_UART_Init+0x58>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_USART2_UART_Init+0x58>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_USART2_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_USART2_UART_Init+0x58>)
 8000948:	f002 fa72 	bl	8002e30 <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000952:	f7ff ff04 	bl	800075e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000084 	.word	0x20000084
 8000960:	40004400 	.word	0x40004400

08000964 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0ac      	sub	sp, #176	@ 0xb0
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2288      	movs	r2, #136	@ 0x88
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f002 ff6e 	bl	8003866 <memset>
  if(uartHandle->Instance==USART2)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a21      	ldr	r2, [pc, #132]	@ (8000a14 <HAL_UART_MspInit+0xb0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d13b      	bne.n	8000a0c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000994:	2302      	movs	r3, #2
 8000996:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000998:	2300      	movs	r3, #0
 800099a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 fa55 	bl	8001e50 <HAL_RCCEx_PeriphCLKConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009ac:	f7ff fed7 	bl	800075e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b0:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <HAL_UART_MspInit+0xb4>)
 80009b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b4:	4a18      	ldr	r2, [pc, #96]	@ (8000a18 <HAL_UART_MspInit+0xb4>)
 80009b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80009bc:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <HAL_UART_MspInit+0xb4>)
 80009be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b13      	ldr	r3, [pc, #76]	@ (8000a18 <HAL_UART_MspInit+0xb4>)
 80009ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009cc:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <HAL_UART_MspInit+0xb4>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d4:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <HAL_UART_MspInit+0xb4>)
 80009d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e0:	230c      	movs	r3, #12
 80009e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f8:	2307      	movs	r3, #7
 80009fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a08:	f000 f9e4 	bl	8000dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	37b0      	adds	r7, #176	@ 0xb0
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40004400 	.word	0x40004400
 8000a18:	40021000 	.word	0x40021000

08000a1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a20:	f7ff ff02 	bl	8000828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a26:	490d      	ldr	r1, [pc, #52]	@ (8000a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a28:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <LoopForever+0xe>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a68 <LoopForever+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f002 ff15 	bl	8003878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4e:	f7ff fe1b 	bl	8000688 <main>

08000a52 <LoopForever>:

LoopForever:
    b LoopForever
 8000a52:	e7fe      	b.n	8000a52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a60:	08003930 	.word	0x08003930
  ldr r2, =_sbss
 8000a64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a68:	20000110 	.word	0x20000110

08000a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_2_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <HAL_Init+0x3c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000aac <HAL_Init+0x3c>)
 8000a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a86:	2003      	movs	r0, #3
 8000a88:	f000 f962 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f000 f80f 	bl	8000ab0 <HAL_InitTick>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	71fb      	strb	r3, [r7, #7]
 8000a9c:	e001      	b.n	8000aa2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a9e:	f7ff fe65 	bl	800076c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000abc:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <HAL_InitTick+0x6c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d023      	beq.n	8000b0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ac4:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <HAL_InitTick+0x70>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <HAL_InitTick+0x6c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f96d 	bl	8000dba <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d10f      	bne.n	8000b06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d809      	bhi.n	8000b00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f937 	bl	8000d66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <HAL_InitTick+0x74>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
 8000afe:	e007      	b.n	8000b10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	73fb      	strb	r3, [r7, #15]
 8000b04:	e004      	b.n	8000b10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	73fb      	strb	r3, [r7, #15]
 8000b0a:	e001      	b.n	8000b10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000004 	.word	0x20000004

08000b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	2000010c 	.word	0x2000010c

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	2000010c 	.word	0x2000010c

08000b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff ffee 	bl	8000b50 <HAL_GetTick>
 8000b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b80:	d005      	beq.n	8000b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b82:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <HAL_Delay+0x44>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b8e:	bf00      	nop
 8000b90:	f7ff ffde 	bl	8000b50 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d8f7      	bhi.n	8000b90 <HAL_Delay+0x28>
  {
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	@ (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff29 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff3e 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff8e 	bl	8000ca4 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5d 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff31 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffa2 	bl	8000d0c <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de2:	e17f      	b.n	80010e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8171 	beq.w	80010de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d005      	beq.n	8000e14 <HAL_GPIO_Init+0x40>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d130      	bne.n	8000e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	f003 0201 	and.w	r2, r3, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d118      	bne.n	8000eb4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	08db      	lsrs	r3, r3, #3
 8000e9e:	f003 0201 	and.w	r2, r3, #1
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d017      	beq.n	8000ef0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d123      	bne.n	8000f44 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	08da      	lsrs	r2, r3, #3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3208      	adds	r2, #8
 8000f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	6939      	ldr	r1, [r7, #16]
 8000f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0203 	and.w	r2, r3, #3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 80ac 	beq.w	80010de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	4b5f      	ldr	r3, [pc, #380]	@ (8001104 <HAL_GPIO_Init+0x330>)
 8000f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8a:	4a5e      	ldr	r2, [pc, #376]	@ (8001104 <HAL_GPIO_Init+0x330>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f92:	4b5c      	ldr	r3, [pc, #368]	@ (8001104 <HAL_GPIO_Init+0x330>)
 8000f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001108 <HAL_GPIO_Init+0x334>)
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fc8:	d025      	beq.n	8001016 <HAL_GPIO_Init+0x242>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4f      	ldr	r2, [pc, #316]	@ (800110c <HAL_GPIO_Init+0x338>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d01f      	beq.n	8001012 <HAL_GPIO_Init+0x23e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001110 <HAL_GPIO_Init+0x33c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d019      	beq.n	800100e <HAL_GPIO_Init+0x23a>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4d      	ldr	r2, [pc, #308]	@ (8001114 <HAL_GPIO_Init+0x340>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d013      	beq.n	800100a <HAL_GPIO_Init+0x236>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4c      	ldr	r2, [pc, #304]	@ (8001118 <HAL_GPIO_Init+0x344>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d00d      	beq.n	8001006 <HAL_GPIO_Init+0x232>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4b      	ldr	r2, [pc, #300]	@ (800111c <HAL_GPIO_Init+0x348>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d007      	beq.n	8001002 <HAL_GPIO_Init+0x22e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8001120 <HAL_GPIO_Init+0x34c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_GPIO_Init+0x22a>
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	e00c      	b.n	8001018 <HAL_GPIO_Init+0x244>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e00a      	b.n	8001018 <HAL_GPIO_Init+0x244>
 8001002:	2305      	movs	r3, #5
 8001004:	e008      	b.n	8001018 <HAL_GPIO_Init+0x244>
 8001006:	2304      	movs	r3, #4
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x244>
 800100a:	2303      	movs	r3, #3
 800100c:	e004      	b.n	8001018 <HAL_GPIO_Init+0x244>
 800100e:	2302      	movs	r3, #2
 8001010:	e002      	b.n	8001018 <HAL_GPIO_Init+0x244>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <HAL_GPIO_Init+0x244>
 8001016:	2300      	movs	r3, #0
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	f002 0203 	and.w	r2, r2, #3
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	4093      	lsls	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001028:	4937      	ldr	r1, [pc, #220]	@ (8001108 <HAL_GPIO_Init+0x334>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001036:	4b3b      	ldr	r3, [pc, #236]	@ (8001124 <HAL_GPIO_Init+0x350>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800105a:	4a32      	ldr	r2, [pc, #200]	@ (8001124 <HAL_GPIO_Init+0x350>)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001060:	4b30      	ldr	r3, [pc, #192]	@ (8001124 <HAL_GPIO_Init+0x350>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001084:	4a27      	ldr	r2, [pc, #156]	@ (8001124 <HAL_GPIO_Init+0x350>)
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800108a:	4b26      	ldr	r3, [pc, #152]	@ (8001124 <HAL_GPIO_Init+0x350>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001124 <HAL_GPIO_Init+0x350>)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <HAL_GPIO_Init+0x350>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010d8:	4a12      	ldr	r2, [pc, #72]	@ (8001124 <HAL_GPIO_Init+0x350>)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa22 f303 	lsr.w	r3, r2, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f47f ae78 	bne.w	8000de4 <HAL_GPIO_Init+0x10>
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000
 800110c:	48000400 	.word	0x48000400
 8001110:	48000800 	.word	0x48000800
 8001114:	48000c00 	.word	0x48000c00
 8001118:	48001000 	.word	0x48001000
 800111c:	48001400 	.word	0x48001400
 8001120:	48001800 	.word	0x48001800
 8001124:	40010400 	.word	0x40010400

08001128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	887b      	ldrh	r3, [r7, #2]
 800113a:	4013      	ands	r3, r2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e001      	b.n	800114a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001174:	e002      	b.n	800117c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800118c:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40007000 	.word	0x40007000

080011a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011b2:	d130      	bne.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011b4:	4b23      	ldr	r3, [pc, #140]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011c0:	d038      	beq.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c2:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2232      	movs	r2, #50	@ 0x32
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	4a1b      	ldr	r2, [pc, #108]	@ (800124c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011de:	fba2 2303 	umull	r2, r3, r2, r3
 80011e2:	0c9b      	lsrs	r3, r3, #18
 80011e4:	3301      	adds	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e8:	e002      	b.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011fc:	d102      	bne.n	8001204 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f2      	bne.n	80011ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800120c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001210:	d110      	bne.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e00f      	b.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001216:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800121e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001222:	d007      	beq.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001224:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800122c:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001232:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40007000 	.word	0x40007000
 8001248:	20000000 	.word	0x20000000
 800124c:	431bde83 	.word	0x431bde83

08001250 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e3ca      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001262:	4b97      	ldr	r3, [pc, #604]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800126c:	4b94      	ldr	r3, [pc, #592]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80e4 	beq.w	800144c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <HAL_RCC_OscConfig+0x4a>
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	2b0c      	cmp	r3, #12
 800128e:	f040 808b 	bne.w	80013a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 8087 	bne.w	80013a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800129a:	4b89      	ldr	r3, [pc, #548]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_RCC_OscConfig+0x62>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e3a2      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1a      	ldr	r2, [r3, #32]
 80012b6:	4b82      	ldr	r3, [pc, #520]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <HAL_RCC_OscConfig+0x7c>
 80012c2:	4b7f      	ldr	r3, [pc, #508]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012ca:	e005      	b.n	80012d8 <HAL_RCC_OscConfig+0x88>
 80012cc:	4b7c      	ldr	r3, [pc, #496]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80012ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012d8:	4293      	cmp	r3, r2
 80012da:	d223      	bcs.n	8001324 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fd55 	bl	8001d90 <RCC_SetFlashLatencyFromMSIRange>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e383      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012f0:	4b73      	ldr	r3, [pc, #460]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a72      	ldr	r2, [pc, #456]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b70      	ldr	r3, [pc, #448]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	496d      	ldr	r1, [pc, #436]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800130e:	4b6c      	ldr	r3, [pc, #432]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	4968      	ldr	r1, [pc, #416]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
 8001322:	e025      	b.n	8001370 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001324:	4b66      	ldr	r3, [pc, #408]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a65      	ldr	r2, [pc, #404]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b63      	ldr	r3, [pc, #396]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	4960      	ldr	r1, [pc, #384]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001342:	4b5f      	ldr	r3, [pc, #380]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	495b      	ldr	r1, [pc, #364]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d109      	bne.n	8001370 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fd15 	bl	8001d90 <RCC_SetFlashLatencyFromMSIRange>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e343      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001370:	f000 fc4a 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001374:	4602      	mov	r2, r0
 8001376:	4b52      	ldr	r3, [pc, #328]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	f003 030f 	and.w	r3, r3, #15
 8001380:	4950      	ldr	r1, [pc, #320]	@ (80014c4 <HAL_RCC_OscConfig+0x274>)
 8001382:	5ccb      	ldrb	r3, [r1, r3]
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
 800138c:	4a4e      	ldr	r2, [pc, #312]	@ (80014c8 <HAL_RCC_OscConfig+0x278>)
 800138e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001390:	4b4e      	ldr	r3, [pc, #312]	@ (80014cc <HAL_RCC_OscConfig+0x27c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fb8b 	bl	8000ab0 <HAL_InitTick>
 800139a:	4603      	mov	r3, r0
 800139c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d052      	beq.n	800144a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	e327      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d032      	beq.n	8001416 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013b0:	4b43      	ldr	r3, [pc, #268]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a42      	ldr	r2, [pc, #264]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fbc8 	bl	8000b50 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c4:	f7ff fbc4 	bl	8000b50 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e310      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013d6:	4b3a      	ldr	r3, [pc, #232]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e2:	4b37      	ldr	r3, [pc, #220]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a36      	ldr	r2, [pc, #216]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b34      	ldr	r3, [pc, #208]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4931      	ldr	r1, [pc, #196]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001400:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	492c      	ldr	r1, [pc, #176]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
 8001414:	e01a      	b.n	800144c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001416:	4b2a      	ldr	r3, [pc, #168]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a29      	ldr	r2, [pc, #164]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 800141c:	f023 0301 	bic.w	r3, r3, #1
 8001420:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001422:	f7ff fb95 	bl	8000b50 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142a:	f7ff fb91 	bl	8000b50 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e2dd      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800143c:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x1da>
 8001448:	e000      	b.n	800144c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800144a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d074      	beq.n	8001542 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2b08      	cmp	r3, #8
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x21a>
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	2b0c      	cmp	r3, #12
 8001462:	d10e      	bne.n	8001482 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d10b      	bne.n	8001482 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d064      	beq.n	8001540 <HAL_RCC_OscConfig+0x2f0>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d160      	bne.n	8001540 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e2ba      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x24a>
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	e026      	b.n	80014e8 <HAL_RCC_OscConfig+0x298>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a2:	d115      	bne.n	80014d0 <HAL_RCC_OscConfig+0x280>
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80014aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b03      	ldr	r3, [pc, #12]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a02      	ldr	r2, [pc, #8]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80014b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	e014      	b.n	80014e8 <HAL_RCC_OscConfig+0x298>
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	080038d8 	.word	0x080038d8
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000004 	.word	0x20000004
 80014d0:	4ba0      	ldr	r3, [pc, #640]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a9f      	ldr	r2, [pc, #636]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b9d      	ldr	r3, [pc, #628]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a9c      	ldr	r2, [pc, #624]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fb2e 	bl	8000b50 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fb2a 	bl	8000b50 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	@ 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e276      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150a:	4b92      	ldr	r3, [pc, #584]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2a8>
 8001516:	e014      	b.n	8001542 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fb1a 	bl	8000b50 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fb16 	bl	8000b50 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	@ 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e262      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001532:	4b88      	ldr	r3, [pc, #544]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x2d0>
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d060      	beq.n	8001610 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b04      	cmp	r3, #4
 8001552:	d005      	beq.n	8001560 <HAL_RCC_OscConfig+0x310>
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	2b0c      	cmp	r3, #12
 8001558:	d119      	bne.n	800158e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d116      	bne.n	800158e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001560:	4b7c      	ldr	r3, [pc, #496]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_OscConfig+0x328>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e23f      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4b76      	ldr	r3, [pc, #472]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	4973      	ldr	r1, [pc, #460]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800158c:	e040      	b.n	8001610 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d023      	beq.n	80015de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001596:	4b6f      	ldr	r3, [pc, #444]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a6e      	ldr	r2, [pc, #440]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fad5 	bl	8000b50 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fad1 	bl	8000b50 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e21d      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015bc:	4b65      	ldr	r3, [pc, #404]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b62      	ldr	r3, [pc, #392]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	061b      	lsls	r3, r3, #24
 80015d6:	495f      	ldr	r1, [pc, #380]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
 80015dc:	e018      	b.n	8001610 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015de:	4b5d      	ldr	r3, [pc, #372]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 80015e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fab1 	bl	8000b50 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff faad 	bl	8000b50 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e1f9      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001604:	4b53      	ldr	r3, [pc, #332]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d03c      	beq.n	8001696 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d01c      	beq.n	800165e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001624:	4b4b      	ldr	r3, [pc, #300]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800162a:	4a4a      	ldr	r2, [pc, #296]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001634:	f7ff fa8c 	bl	8000b50 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff fa88 	bl	8000b50 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e1d4      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800164e:	4b41      	ldr	r3, [pc, #260]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0ef      	beq.n	800163c <HAL_RCC_OscConfig+0x3ec>
 800165c:	e01b      	b.n	8001696 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165e:	4b3d      	ldr	r3, [pc, #244]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001660:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001664:	4a3b      	ldr	r2, [pc, #236]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001666:	f023 0301 	bic.w	r3, r3, #1
 800166a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166e:	f7ff fa6f 	bl	8000b50 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001676:	f7ff fa6b 	bl	8000b50 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e1b7      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001688:	4b32      	ldr	r3, [pc, #200]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 800168a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1ef      	bne.n	8001676 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80a6 	beq.w	80017f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10d      	bne.n	80016d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b4:	4b27      	ldr	r3, [pc, #156]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b8:	4a26      	ldr	r2, [pc, #152]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016be:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c0:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016cc:	2301      	movs	r3, #1
 80016ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d0:	4b21      	ldr	r3, [pc, #132]	@ (8001758 <HAL_RCC_OscConfig+0x508>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d118      	bne.n	800170e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <HAL_RCC_OscConfig+0x508>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001758 <HAL_RCC_OscConfig+0x508>)
 80016e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e8:	f7ff fa32 	bl	8000b50 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f0:	f7ff fa2e 	bl	8000b50 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e17a      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_RCC_OscConfig+0x508>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <HAL_RCC_OscConfig+0x4d8>
 8001716:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001726:	e029      	b.n	800177c <HAL_RCC_OscConfig+0x52c>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d115      	bne.n	800175c <HAL_RCC_OscConfig+0x50c>
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001736:	4a07      	ldr	r2, [pc, #28]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001740:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001746:	4a03      	ldr	r2, [pc, #12]	@ (8001754 <HAL_RCC_OscConfig+0x504>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001750:	e014      	b.n	800177c <HAL_RCC_OscConfig+0x52c>
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	40007000 	.word	0x40007000
 800175c:	4b9c      	ldr	r3, [pc, #624]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001762:	4a9b      	ldr	r2, [pc, #620]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800176c:	4b98      	ldr	r3, [pc, #608]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001772:	4a97      	ldr	r2, [pc, #604]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 8001774:	f023 0304 	bic.w	r3, r3, #4
 8001778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d016      	beq.n	80017b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff f9e4 	bl	8000b50 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7ff f9e0 	bl	8000b50 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e12a      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017a2:	4b8b      	ldr	r3, [pc, #556]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 80017a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0ed      	beq.n	800178c <HAL_RCC_OscConfig+0x53c>
 80017b0:	e015      	b.n	80017de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b2:	f7ff f9cd 	bl	8000b50 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff f9c9 	bl	8000b50 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e113      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d0:	4b7f      	ldr	r3, [pc, #508]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1ed      	bne.n	80017ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017de:	7ffb      	ldrb	r3, [r7, #31]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e4:	4b7a      	ldr	r3, [pc, #488]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e8:	4a79      	ldr	r2, [pc, #484]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 80017ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80fe 	beq.w	80019f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fe:	2b02      	cmp	r3, #2
 8001800:	f040 80d0 	bne.w	80019a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001804:	4b72      	ldr	r3, [pc, #456]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 0203 	and.w	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001814:	429a      	cmp	r2, r3
 8001816:	d130      	bne.n	800187a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	3b01      	subs	r3, #1
 8001824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d127      	bne.n	800187a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001834:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d11f      	bne.n	800187a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001844:	2a07      	cmp	r2, #7
 8001846:	bf14      	ite	ne
 8001848:	2201      	movne	r2, #1
 800184a:	2200      	moveq	r2, #0
 800184c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800184e:	4293      	cmp	r3, r2
 8001850:	d113      	bne.n	800187a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	3b01      	subs	r3, #1
 8001860:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d109      	bne.n	800187a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	3b01      	subs	r3, #1
 8001874:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d06e      	beq.n	8001958 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b0c      	cmp	r3, #12
 800187e:	d069      	beq.n	8001954 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001880:	4b53      	ldr	r3, [pc, #332]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800188c:	4b50      	ldr	r3, [pc, #320]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0ad      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800189c:	4b4c      	ldr	r3, [pc, #304]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a4b      	ldr	r2, [pc, #300]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 80018a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018a8:	f7ff f952 	bl	8000b50 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff f94e 	bl	8000b50 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e09a      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c2:	4b43      	ldr	r3, [pc, #268]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ce:	4b40      	ldr	r3, [pc, #256]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	4b40      	ldr	r3, [pc, #256]	@ (80019d4 <HAL_RCC_OscConfig+0x784>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018de:	3a01      	subs	r2, #1
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	4311      	orrs	r1, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018e8:	0212      	lsls	r2, r2, #8
 80018ea:	4311      	orrs	r1, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018f0:	0852      	lsrs	r2, r2, #1
 80018f2:	3a01      	subs	r2, #1
 80018f4:	0552      	lsls	r2, r2, #21
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018fc:	0852      	lsrs	r2, r2, #1
 80018fe:	3a01      	subs	r2, #1
 8001900:	0652      	lsls	r2, r2, #25
 8001902:	4311      	orrs	r1, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001908:	0912      	lsrs	r2, r2, #4
 800190a:	0452      	lsls	r2, r2, #17
 800190c:	430a      	orrs	r2, r1
 800190e:	4930      	ldr	r1, [pc, #192]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 8001910:	4313      	orrs	r3, r2
 8001912:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001914:	4b2e      	ldr	r3, [pc, #184]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2d      	ldr	r2, [pc, #180]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800191e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001920:	4b2b      	ldr	r3, [pc, #172]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4a2a      	ldr	r2, [pc, #168]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 8001926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800192a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800192c:	f7ff f910 	bl	8000b50 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff f90c 	bl	8000b50 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e058      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001946:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001952:	e050      	b.n	80019f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e04f      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001958:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d148      	bne.n	80019f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001964:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a19      	ldr	r2, [pc, #100]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 800196a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800196e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001970:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4a16      	ldr	r2, [pc, #88]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 8001976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800197a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800197c:	f7ff f8e8 	bl	8000b50 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff f8e4 	bl	8000b50 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e030      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001996:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x734>
 80019a2:	e028      	b.n	80019f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d023      	beq.n	80019f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a08      	ldr	r2, [pc, #32]	@ (80019d0 <HAL_RCC_OscConfig+0x780>)
 80019b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff f8cb 	bl	8000b50 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019bc:	e00c      	b.n	80019d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019be:	f7ff f8c7 	bl	8000b50 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d905      	bls.n	80019d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e013      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
 80019d0:	40021000 	.word	0x40021000
 80019d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <HAL_RCC_OscConfig+0x7b0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1ec      	bne.n	80019be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_RCC_OscConfig+0x7b0>)
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	4905      	ldr	r1, [pc, #20]	@ (8001a00 <HAL_RCC_OscConfig+0x7b0>)
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_RCC_OscConfig+0x7b4>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	60cb      	str	r3, [r1, #12]
 80019f0:	e001      	b.n	80019f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	feeefffc 	.word	0xfeeefffc

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0e7      	b.n	8001bec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b75      	ldr	r3, [pc, #468]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d910      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b72      	ldr	r3, [pc, #456]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0207 	bic.w	r2, r3, #7
 8001a32:	4970      	ldr	r1, [pc, #448]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b6e      	ldr	r3, [pc, #440]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0cf      	b.n	8001bec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d010      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4b66      	ldr	r3, [pc, #408]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d908      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b63      	ldr	r3, [pc, #396]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4960      	ldr	r1, [pc, #384]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d04c      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d121      	bne.n	8001ade <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0a6      	b.n	8001bec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa6:	4b54      	ldr	r3, [pc, #336]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d115      	bne.n	8001ade <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e09a      	b.n	8001bec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001abe:	4b4e      	ldr	r3, [pc, #312]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e08e      	b.n	8001bec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ace:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e086      	b.n	8001bec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ade:	4b46      	ldr	r3, [pc, #280]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f023 0203 	bic.w	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4943      	ldr	r1, [pc, #268]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af0:	f7ff f82e 	bl	8000b50 <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af8:	f7ff f82a 	bl	8000b50 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e06e      	b.n	8001bec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 020c 	and.w	r2, r3, #12
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d1eb      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d010      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	4b31      	ldr	r3, [pc, #196]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d208      	bcs.n	8001b4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	492b      	ldr	r1, [pc, #172]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4e:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d210      	bcs.n	8001b7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5c:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 0207 	bic.w	r2, r3, #7
 8001b64:	4923      	ldr	r1, [pc, #140]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6c:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e036      	b.n	8001bec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d008      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	4918      	ldr	r1, [pc, #96]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d009      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ba8:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4910      	ldr	r1, [pc, #64]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bbc:	f000 f824 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	490b      	ldr	r1, [pc, #44]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f4>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd8:	4a09      	ldr	r2, [pc, #36]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001bda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bdc:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <HAL_RCC_ClockConfig+0x1fc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe ff65 	bl	8000ab0 <HAL_InitTick>
 8001be6:	4603      	mov	r3, r0
 8001be8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bea:	7afb      	ldrb	r3, [r7, #11]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	080038d8 	.word	0x080038d8
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	@ 0x24
 8001c0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c16:	4b3e      	ldr	r3, [pc, #248]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c20:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x34>
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b0c      	cmp	r3, #12
 8001c34:	d121      	bne.n	8001c7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d11e      	bne.n	8001c7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c3c:	4b34      	ldr	r3, [pc, #208]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c48:	4b31      	ldr	r3, [pc, #196]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	e005      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c58:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c64:	4a2b      	ldr	r2, [pc, #172]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10d      	bne.n	8001c90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c78:	e00a      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d102      	bne.n	8001c86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c80:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	e004      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c8c:	4b23      	ldr	r3, [pc, #140]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d134      	bne.n	8001d00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c96:	4b1e      	ldr	r3, [pc, #120]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0xa6>
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d003      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xac>
 8001cac:	e005      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cb0:	617b      	str	r3, [r7, #20]
      break;
 8001cb2:	e005      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cb4:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cb6:	617b      	str	r3, [r7, #20]
      break;
 8001cb8:	e002      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	617b      	str	r3, [r7, #20]
      break;
 8001cbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cc0:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	3301      	adds	r3, #1
 8001ccc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cce:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	fb03 f202 	mul.w	r2, r3, r2
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	0e5b      	lsrs	r3, r3, #25
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d00:	69bb      	ldr	r3, [r7, #24]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	@ 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	080038f0 	.word	0x080038f0
 8001d18:	00f42400 	.word	0x00f42400
 8001d1c:	007a1200 	.word	0x007a1200

08001d20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d24:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000000 	.word	0x20000000

08001d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d3c:	f7ff fff0 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	4904      	ldr	r1, [pc, #16]	@ (8001d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d4e:	5ccb      	ldrb	r3, [r1, r3]
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	080038e8 	.word	0x080038e8

08001d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d68:	f7ff ffda 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	0adb      	lsrs	r3, r3, #11
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	4904      	ldr	r1, [pc, #16]	@ (8001d8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d7a:	5ccb      	ldrb	r3, [r1, r3]
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	080038e8 	.word	0x080038e8

08001d90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001da8:	f7ff f9ee 	bl	8001188 <HAL_PWREx_GetVoltageRange>
 8001dac:	6178      	str	r0, [r7, #20]
 8001dae:	e014      	b.n	8001dda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db4:	4a24      	ldr	r2, [pc, #144]	@ (8001e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dbc:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dc8:	f7ff f9de 	bl	8001188 <HAL_PWREx_GetVoltageRange>
 8001dcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dce:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001de0:	d10b      	bne.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b80      	cmp	r3, #128	@ 0x80
 8001de6:	d919      	bls.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2ba0      	cmp	r3, #160	@ 0xa0
 8001dec:	d902      	bls.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dee:	2302      	movs	r3, #2
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	e013      	b.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df4:	2301      	movs	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	e010      	b.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b80      	cmp	r3, #128	@ 0x80
 8001dfe:	d902      	bls.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e00:	2303      	movs	r3, #3
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	e00a      	b.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b80      	cmp	r3, #128	@ 0x80
 8001e0a:	d102      	bne.n	8001e12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	e004      	b.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b70      	cmp	r3, #112	@ 0x70
 8001e16:	d101      	bne.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e18:	2301      	movs	r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 0207 	bic.w	r2, r3, #7
 8001e24:	4909      	ldr	r1, [pc, #36]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e2c:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d001      	beq.n	8001e3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40022000 	.word	0x40022000

08001e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e58:	2300      	movs	r3, #0
 8001e5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d041      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e74:	d02a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e7a:	d824      	bhi.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e80:	d008      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e86:	d81e      	bhi.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e90:	d010      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e92:	e018      	b.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e94:	4b86      	ldr	r3, [pc, #536]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a85      	ldr	r2, [pc, #532]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ea0:	e015      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fabb 	bl	8002424 <RCCEx_PLLSAI1_Config>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eb2:	e00c      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3320      	adds	r3, #32
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fba6 	bl	800260c <RCCEx_PLLSAI2_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ec4:	e003      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eca:	e000      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ece:	7cfb      	ldrb	r3, [r7, #19]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10b      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ed4:	4b76      	ldr	r3, [pc, #472]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ee2:	4973      	ldr	r1, [pc, #460]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001eea:	e001      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d041      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f04:	d02a      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f0a:	d824      	bhi.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f10:	d008      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f16:	d81e      	bhi.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f20:	d010      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f22:	e018      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f24:	4b62      	ldr	r3, [pc, #392]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4a61      	ldr	r2, [pc, #388]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f30:	e015      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fa73 	bl	8002424 <RCCEx_PLLSAI1_Config>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f42:	e00c      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3320      	adds	r3, #32
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fb5e 	bl	800260c <RCCEx_PLLSAI2_Config>
 8001f50:	4603      	mov	r3, r0
 8001f52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f54:	e003      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	74fb      	strb	r3, [r7, #19]
      break;
 8001f5a:	e000      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f5e:	7cfb      	ldrb	r3, [r7, #19]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10b      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f64:	4b52      	ldr	r3, [pc, #328]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f72:	494f      	ldr	r1, [pc, #316]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f7a:	e001      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80a0 	beq.w	80020ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f92:	4b47      	ldr	r3, [pc, #284]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa8:	4b41      	ldr	r3, [pc, #260]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fac:	4a40      	ldr	r2, [pc, #256]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a3a      	ldr	r2, [pc, #232]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fd0:	f7fe fdbe 	bl	8000b50 <HAL_GetTick>
 8001fd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fd6:	e009      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd8:	f7fe fdba 	bl	8000b50 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d902      	bls.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	74fb      	strb	r3, [r7, #19]
        break;
 8001fea:	e005      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fec:	4b31      	ldr	r3, [pc, #196]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ef      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d15c      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002008:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01f      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	d019      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800201c:	4b24      	ldr	r3, [pc, #144]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002026:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002028:	4b21      	ldr	r3, [pc, #132]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202e:	4a20      	ldr	r2, [pc, #128]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002038:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203e:	4a1c      	ldr	r2, [pc, #112]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002048:	4a19      	ldr	r2, [pc, #100]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d016      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7fe fd79 	bl	8000b50 <HAL_GetTick>
 800205e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002060:	e00b      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7fe fd75 	bl	8000b50 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d902      	bls.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	74fb      	strb	r3, [r7, #19]
            break;
 8002078:	e006      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207a:	4b0d      	ldr	r3, [pc, #52]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ec      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002088:	7cfb      	ldrb	r3, [r7, #19]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800208e:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800209e:	4904      	ldr	r1, [pc, #16]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020a6:	e009      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	74bb      	strb	r3, [r7, #18]
 80020ac:	e006      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020bc:	7c7b      	ldrb	r3, [r7, #17]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d105      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c2:	4b9e      	ldr	r3, [pc, #632]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c6:	4a9d      	ldr	r2, [pc, #628]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020da:	4b98      	ldr	r3, [pc, #608]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e0:	f023 0203 	bic.w	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e8:	4994      	ldr	r1, [pc, #592]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020fc:	4b8f      	ldr	r3, [pc, #572]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002102:	f023 020c 	bic.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210a:	498c      	ldr	r1, [pc, #560]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800211e:	4b87      	ldr	r3, [pc, #540]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002124:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	4983      	ldr	r1, [pc, #524]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002140:	4b7e      	ldr	r3, [pc, #504]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002146:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	497b      	ldr	r1, [pc, #492]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002162:	4b76      	ldr	r3, [pc, #472]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002168:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002170:	4972      	ldr	r1, [pc, #456]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0320 	and.w	r3, r3, #32
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002184:	4b6d      	ldr	r3, [pc, #436]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002192:	496a      	ldr	r1, [pc, #424]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021a6:	4b65      	ldr	r3, [pc, #404]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b4:	4961      	ldr	r1, [pc, #388]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021c8:	4b5c      	ldr	r3, [pc, #368]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d6:	4959      	ldr	r1, [pc, #356]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ea:	4b54      	ldr	r3, [pc, #336]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f8:	4950      	ldr	r1, [pc, #320]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800220c:	4b4b      	ldr	r3, [pc, #300]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221a:	4948      	ldr	r1, [pc, #288]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800222e:	4b43      	ldr	r3, [pc, #268]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223c:	493f      	ldr	r1, [pc, #252]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d028      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002250:	4b3a      	ldr	r3, [pc, #232]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002256:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800225e:	4937      	ldr	r1, [pc, #220]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800226a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800226e:	d106      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002270:	4b32      	ldr	r3, [pc, #200]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a31      	ldr	r2, [pc, #196]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800227a:	60d3      	str	r3, [r2, #12]
 800227c:	e011      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002282:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002286:	d10c      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3304      	adds	r3, #4
 800228c:	2101      	movs	r1, #1
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f8c8 	bl	8002424 <RCCEx_PLLSAI1_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d028      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022ae:	4b23      	ldr	r3, [pc, #140]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022bc:	491f      	ldr	r1, [pc, #124]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022cc:	d106      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ce:	4b1b      	ldr	r3, [pc, #108]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	4a1a      	ldr	r2, [pc, #104]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d8:	60d3      	str	r3, [r2, #12]
 80022da:	e011      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2101      	movs	r1, #1
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 f899 	bl	8002424 <RCCEx_PLLSAI1_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d02b      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002312:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800231a:	4908      	ldr	r1, [pc, #32]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800232a:	d109      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800232c:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a02      	ldr	r2, [pc, #8]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002336:	60d3      	str	r3, [r2, #12]
 8002338:	e014      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002344:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002348:	d10c      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3304      	adds	r3, #4
 800234e:	2101      	movs	r1, #1
 8002350:	4618      	mov	r0, r3
 8002352:	f000 f867 	bl	8002424 <RCCEx_PLLSAI1_Config>
 8002356:	4603      	mov	r3, r0
 8002358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d02f      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002370:	4b2b      	ldr	r3, [pc, #172]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002376:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800237e:	4928      	ldr	r1, [pc, #160]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800238a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800238e:	d10d      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3304      	adds	r3, #4
 8002394:	2102      	movs	r1, #2
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f844 	bl	8002424 <RCCEx_PLLSAI1_Config>
 800239c:	4603      	mov	r3, r0
 800239e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d014      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	74bb      	strb	r3, [r7, #18]
 80023aa:	e011      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3320      	adds	r3, #32
 80023ba:	2102      	movs	r1, #2
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 f925 	bl	800260c <RCCEx_PLLSAI2_Config>
 80023c2:	4603      	mov	r3, r0
 80023c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023dc:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023ea:	490d      	ldr	r1, [pc, #52]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023fe:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002404:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800240e:	4904      	ldr	r1, [pc, #16]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002416:	7cbb      	ldrb	r3, [r7, #18]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000

08002424 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002432:	4b75      	ldr	r3, [pc, #468]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d018      	beq.n	8002470 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800243e:	4b72      	ldr	r3, [pc, #456]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f003 0203 	and.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d10d      	bne.n	800246a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
       ||
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002456:	4b6c      	ldr	r3, [pc, #432]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
       ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d047      	beq.n	80024fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	e044      	b.n	80024fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d018      	beq.n	80024aa <RCCEx_PLLSAI1_Config+0x86>
 8002478:	2b03      	cmp	r3, #3
 800247a:	d825      	bhi.n	80024c8 <RCCEx_PLLSAI1_Config+0xa4>
 800247c:	2b01      	cmp	r3, #1
 800247e:	d002      	beq.n	8002486 <RCCEx_PLLSAI1_Config+0x62>
 8002480:	2b02      	cmp	r3, #2
 8002482:	d009      	beq.n	8002498 <RCCEx_PLLSAI1_Config+0x74>
 8002484:	e020      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002486:	4b60      	ldr	r3, [pc, #384]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d11d      	bne.n	80024ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002496:	e01a      	b.n	80024ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002498:	4b5b      	ldr	r3, [pc, #364]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d116      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a8:	e013      	b.n	80024d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024aa:	4b57      	ldr	r3, [pc, #348]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10f      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024b6:	4b54      	ldr	r3, [pc, #336]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024c6:	e006      	b.n	80024d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
      break;
 80024cc:	e004      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ce:	bf00      	nop
 80024d0:	e002      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024d2:	bf00      	nop
 80024d4:	e000      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10d      	bne.n	80024fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024de:	4b4a      	ldr	r3, [pc, #296]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	430b      	orrs	r3, r1
 80024f4:	4944      	ldr	r1, [pc, #272]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d17d      	bne.n	80025fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002500:	4b41      	ldr	r3, [pc, #260]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a40      	ldr	r2, [pc, #256]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002506:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800250a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800250c:	f7fe fb20 	bl	8000b50 <HAL_GetTick>
 8002510:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002512:	e009      	b.n	8002528 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002514:	f7fe fb1c 	bl	8000b50 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d902      	bls.n	8002528 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	73fb      	strb	r3, [r7, #15]
        break;
 8002526:	e005      	b.n	8002534 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002528:	4b37      	ldr	r3, [pc, #220]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1ef      	bne.n	8002514 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d160      	bne.n	80025fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d111      	bne.n	8002564 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002540:	4b31      	ldr	r3, [pc, #196]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6892      	ldr	r2, [r2, #8]
 8002550:	0211      	lsls	r1, r2, #8
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68d2      	ldr	r2, [r2, #12]
 8002556:	0912      	lsrs	r2, r2, #4
 8002558:	0452      	lsls	r2, r2, #17
 800255a:	430a      	orrs	r2, r1
 800255c:	492a      	ldr	r1, [pc, #168]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	610b      	str	r3, [r1, #16]
 8002562:	e027      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d112      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800256a:	4b27      	ldr	r3, [pc, #156]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002572:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6892      	ldr	r2, [r2, #8]
 800257a:	0211      	lsls	r1, r2, #8
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6912      	ldr	r2, [r2, #16]
 8002580:	0852      	lsrs	r2, r2, #1
 8002582:	3a01      	subs	r2, #1
 8002584:	0552      	lsls	r2, r2, #21
 8002586:	430a      	orrs	r2, r1
 8002588:	491f      	ldr	r1, [pc, #124]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	610b      	str	r3, [r1, #16]
 800258e:	e011      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002590:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002598:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6892      	ldr	r2, [r2, #8]
 80025a0:	0211      	lsls	r1, r2, #8
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6952      	ldr	r2, [r2, #20]
 80025a6:	0852      	lsrs	r2, r2, #1
 80025a8:	3a01      	subs	r2, #1
 80025aa:	0652      	lsls	r2, r2, #25
 80025ac:	430a      	orrs	r2, r1
 80025ae:	4916      	ldr	r1, [pc, #88]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a13      	ldr	r2, [pc, #76]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7fe fac6 	bl	8000b50 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025c6:	e009      	b.n	80025dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025c8:	f7fe fac2 	bl	8000b50 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d902      	bls.n	80025dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	73fb      	strb	r3, [r7, #15]
          break;
 80025da:	e005      	b.n	80025e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ef      	beq.n	80025c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	4904      	ldr	r1, [pc, #16]	@ (8002608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000

0800260c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800261a:	4b6a      	ldr	r3, [pc, #424]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d018      	beq.n	8002658 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002626:	4b67      	ldr	r3, [pc, #412]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f003 0203 	and.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d10d      	bne.n	8002652 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
       ||
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800263e:	4b61      	ldr	r3, [pc, #388]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
       ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d047      	beq.n	80026e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
 8002656:	e044      	b.n	80026e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d018      	beq.n	8002692 <RCCEx_PLLSAI2_Config+0x86>
 8002660:	2b03      	cmp	r3, #3
 8002662:	d825      	bhi.n	80026b0 <RCCEx_PLLSAI2_Config+0xa4>
 8002664:	2b01      	cmp	r3, #1
 8002666:	d002      	beq.n	800266e <RCCEx_PLLSAI2_Config+0x62>
 8002668:	2b02      	cmp	r3, #2
 800266a:	d009      	beq.n	8002680 <RCCEx_PLLSAI2_Config+0x74>
 800266c:	e020      	b.n	80026b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800266e:	4b55      	ldr	r3, [pc, #340]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11d      	bne.n	80026b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267e:	e01a      	b.n	80026b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002680:	4b50      	ldr	r3, [pc, #320]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d116      	bne.n	80026ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002690:	e013      	b.n	80026ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002692:	4b4c      	ldr	r3, [pc, #304]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800269e:	4b49      	ldr	r3, [pc, #292]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026ae:	e006      	b.n	80026be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      break;
 80026b4:	e004      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026b6:	bf00      	nop
 80026b8:	e002      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026ba:	bf00      	nop
 80026bc:	e000      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026be:	bf00      	nop
    }

    if(status == HAL_OK)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10d      	bne.n	80026e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026c6:	4b3f      	ldr	r3, [pc, #252]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	430b      	orrs	r3, r1
 80026dc:	4939      	ldr	r1, [pc, #228]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d167      	bne.n	80027b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026e8:	4b36      	ldr	r3, [pc, #216]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a35      	ldr	r2, [pc, #212]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f4:	f7fe fa2c 	bl	8000b50 <HAL_GetTick>
 80026f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026fa:	e009      	b.n	8002710 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026fc:	f7fe fa28 	bl	8000b50 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d902      	bls.n	8002710 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	73fb      	strb	r3, [r7, #15]
        break;
 800270e:	e005      	b.n	800271c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002710:	4b2c      	ldr	r3, [pc, #176]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ef      	bne.n	80026fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d14a      	bne.n	80027b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d111      	bne.n	800274c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002728:	4b26      	ldr	r3, [pc, #152]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6892      	ldr	r2, [r2, #8]
 8002738:	0211      	lsls	r1, r2, #8
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68d2      	ldr	r2, [r2, #12]
 800273e:	0912      	lsrs	r2, r2, #4
 8002740:	0452      	lsls	r2, r2, #17
 8002742:	430a      	orrs	r2, r1
 8002744:	491f      	ldr	r1, [pc, #124]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	614b      	str	r3, [r1, #20]
 800274a:	e011      	b.n	8002770 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800274c:	4b1d      	ldr	r3, [pc, #116]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002754:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6892      	ldr	r2, [r2, #8]
 800275c:	0211      	lsls	r1, r2, #8
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6912      	ldr	r2, [r2, #16]
 8002762:	0852      	lsrs	r2, r2, #1
 8002764:	3a01      	subs	r2, #1
 8002766:	0652      	lsls	r2, r2, #25
 8002768:	430a      	orrs	r2, r1
 800276a:	4916      	ldr	r1, [pc, #88]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276c:	4313      	orrs	r3, r2
 800276e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002770:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a13      	ldr	r2, [pc, #76]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7fe f9e8 	bl	8000b50 <HAL_GetTick>
 8002780:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002782:	e009      	b.n	8002798 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002784:	f7fe f9e4 	bl	8000b50 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d902      	bls.n	8002798 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	73fb      	strb	r3, [r7, #15]
          break;
 8002796:	e005      	b.n	80027a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002798:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0ef      	beq.n	8002784 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027aa:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	4904      	ldr	r1, [pc, #16]	@ (80027c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000

080027c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e049      	b.n	800286e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe f862 	bl	80008b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3304      	adds	r3, #4
 8002804:	4619      	mov	r1, r3
 8002806:	4610      	mov	r0, r2
 8002808:	f000 f9d2 	bl	8002bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	d001      	beq.n	8002890 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e047      	b.n	8002920 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a23      	ldr	r2, [pc, #140]	@ (800292c <HAL_TIM_Base_Start+0xb4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01d      	beq.n	80028de <HAL_TIM_Base_Start+0x66>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028aa:	d018      	beq.n	80028de <HAL_TIM_Base_Start+0x66>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002930 <HAL_TIM_Base_Start+0xb8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_TIM_Base_Start+0x66>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002934 <HAL_TIM_Base_Start+0xbc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00e      	beq.n	80028de <HAL_TIM_Base_Start+0x66>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002938 <HAL_TIM_Base_Start+0xc0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d009      	beq.n	80028de <HAL_TIM_Base_Start+0x66>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1b      	ldr	r2, [pc, #108]	@ (800293c <HAL_TIM_Base_Start+0xc4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d004      	beq.n	80028de <HAL_TIM_Base_Start+0x66>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a19      	ldr	r2, [pc, #100]	@ (8002940 <HAL_TIM_Base_Start+0xc8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d115      	bne.n	800290a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	4b17      	ldr	r3, [pc, #92]	@ (8002944 <HAL_TIM_Base_Start+0xcc>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b06      	cmp	r3, #6
 80028ee:	d015      	beq.n	800291c <HAL_TIM_Base_Start+0xa4>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f6:	d011      	beq.n	800291c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002908:	e008      	b.n	800291c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e000      	b.n	800291e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800
 8002938:	40000c00 	.word	0x40000c00
 800293c:	40013400 	.word	0x40013400
 8002940:	40014000 	.word	0x40014000
 8002944:	00010007 	.word	0x00010007

08002948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d020      	beq.n	80029ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0202 	mvn.w	r2, #2
 800297c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8ee 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f8e0 	bl	8002b60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f8f1 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d020      	beq.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0204 	mvn.w	r2, #4
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8c8 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8ba 	bl	8002b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f8cb 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d020      	beq.n	8002a44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0208 	mvn.w	r2, #8
 8002a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8a2 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f894 	bl	8002b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f8a5 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d020      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01b      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0210 	mvn.w	r2, #16
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2208      	movs	r2, #8
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f87c 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f86e 	bl	8002b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f87f 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00c      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0201 	mvn.w	r2, #1
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f84c 	bl	8002b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f998 	bl	8002e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f990 	bl	8002e1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00c      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f83e 	bl	8002b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00c      	beq.n	8002b44 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0220 	mvn.w	r2, #32
 8002b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f958 	bl	8002df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a40      	ldr	r2, [pc, #256]	@ (8002cc4 <TIM_Base_SetConfig+0x114>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d013      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bce:	d00f      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a3d      	ldr	r2, [pc, #244]	@ (8002cc8 <TIM_Base_SetConfig+0x118>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00b      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a3c      	ldr	r2, [pc, #240]	@ (8002ccc <TIM_Base_SetConfig+0x11c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d007      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a3b      	ldr	r2, [pc, #236]	@ (8002cd0 <TIM_Base_SetConfig+0x120>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d003      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a3a      	ldr	r2, [pc, #232]	@ (8002cd4 <TIM_Base_SetConfig+0x124>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d108      	bne.n	8002c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a2f      	ldr	r2, [pc, #188]	@ (8002cc4 <TIM_Base_SetConfig+0x114>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01f      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c10:	d01b      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a2c      	ldr	r2, [pc, #176]	@ (8002cc8 <TIM_Base_SetConfig+0x118>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d017      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ccc <TIM_Base_SetConfig+0x11c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a2a      	ldr	r2, [pc, #168]	@ (8002cd0 <TIM_Base_SetConfig+0x120>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00f      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a29      	ldr	r2, [pc, #164]	@ (8002cd4 <TIM_Base_SetConfig+0x124>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00b      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a28      	ldr	r2, [pc, #160]	@ (8002cd8 <TIM_Base_SetConfig+0x128>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d007      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a27      	ldr	r2, [pc, #156]	@ (8002cdc <TIM_Base_SetConfig+0x12c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d003      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a26      	ldr	r2, [pc, #152]	@ (8002ce0 <TIM_Base_SetConfig+0x130>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d108      	bne.n	8002c5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a10      	ldr	r2, [pc, #64]	@ (8002cc4 <TIM_Base_SetConfig+0x114>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00f      	beq.n	8002ca8 <TIM_Base_SetConfig+0xf8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a12      	ldr	r2, [pc, #72]	@ (8002cd4 <TIM_Base_SetConfig+0x124>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00b      	beq.n	8002ca8 <TIM_Base_SetConfig+0xf8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a11      	ldr	r2, [pc, #68]	@ (8002cd8 <TIM_Base_SetConfig+0x128>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d007      	beq.n	8002ca8 <TIM_Base_SetConfig+0xf8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a10      	ldr	r2, [pc, #64]	@ (8002cdc <TIM_Base_SetConfig+0x12c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d003      	beq.n	8002ca8 <TIM_Base_SetConfig+0xf8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce0 <TIM_Base_SetConfig+0x130>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d103      	bne.n	8002cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	615a      	str	r2, [r3, #20]
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800
 8002cd0:	40000c00 	.word	0x40000c00
 8002cd4:	40013400 	.word	0x40013400
 8002cd8:	40014000 	.word	0x40014000
 8002cdc:	40014400 	.word	0x40014400
 8002ce0:	40014800 	.word	0x40014800

08002ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e068      	b.n	8002dce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a2e      	ldr	r2, [pc, #184]	@ (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d004      	beq.n	8002d30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d108      	bne.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002d36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1e      	ldr	r2, [pc, #120]	@ (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01d      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d6e:	d018      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1b      	ldr	r2, [pc, #108]	@ (8002de4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00e      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a18      	ldr	r2, [pc, #96]	@ (8002dec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d009      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a13      	ldr	r2, [pc, #76]	@ (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d004      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a14      	ldr	r2, [pc, #80]	@ (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10c      	bne.n	8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40013400 	.word	0x40013400
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800
 8002dec:	40000c00 	.word	0x40000c00
 8002df0:	40014000 	.word	0x40014000

08002df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e040      	b.n	8002ec4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fd fd86 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	@ 0x24
 8002e5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fae0 	bl	800343c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f825 	bl	8002ecc <UART_SetConfig>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e01b      	b.n	8002ec4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002eaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fb5f 	bl	8003580 <UART_CheckIdleState>
 8002ec2:	4603      	mov	r3, r0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed0:	b08a      	sub	sp, #40	@ 0x28
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4ba4      	ldr	r3, [pc, #656]	@ (800318c <UART_SetConfig+0x2c0>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a99      	ldr	r2, [pc, #612]	@ (8003190 <UART_SetConfig+0x2c4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f34:	4313      	orrs	r3, r2
 8002f36:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a90      	ldr	r2, [pc, #576]	@ (8003194 <UART_SetConfig+0x2c8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d126      	bne.n	8002fa4 <UART_SetConfig+0xd8>
 8002f56:	4b90      	ldr	r3, [pc, #576]	@ (8003198 <UART_SetConfig+0x2cc>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d81b      	bhi.n	8002f9c <UART_SetConfig+0xd0>
 8002f64:	a201      	add	r2, pc, #4	@ (adr r2, 8002f6c <UART_SetConfig+0xa0>)
 8002f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6a:	bf00      	nop
 8002f6c:	08002f7d 	.word	0x08002f7d
 8002f70:	08002f8d 	.word	0x08002f8d
 8002f74:	08002f85 	.word	0x08002f85
 8002f78:	08002f95 	.word	0x08002f95
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f82:	e116      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8002f84:	2302      	movs	r3, #2
 8002f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f8a:	e112      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f92:	e10e      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8002f94:	2308      	movs	r3, #8
 8002f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f9a:	e10a      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fa2:	e106      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a7c      	ldr	r2, [pc, #496]	@ (800319c <UART_SetConfig+0x2d0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d138      	bne.n	8003020 <UART_SetConfig+0x154>
 8002fae:	4b7a      	ldr	r3, [pc, #488]	@ (8003198 <UART_SetConfig+0x2cc>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d82d      	bhi.n	8003018 <UART_SetConfig+0x14c>
 8002fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc4 <UART_SetConfig+0xf8>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08002ff9 	.word	0x08002ff9
 8002fc8:	08003019 	.word	0x08003019
 8002fcc:	08003019 	.word	0x08003019
 8002fd0:	08003019 	.word	0x08003019
 8002fd4:	08003009 	.word	0x08003009
 8002fd8:	08003019 	.word	0x08003019
 8002fdc:	08003019 	.word	0x08003019
 8002fe0:	08003019 	.word	0x08003019
 8002fe4:	08003001 	.word	0x08003001
 8002fe8:	08003019 	.word	0x08003019
 8002fec:	08003019 	.word	0x08003019
 8002ff0:	08003019 	.word	0x08003019
 8002ff4:	08003011 	.word	0x08003011
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ffe:	e0d8      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8003000:	2302      	movs	r3, #2
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003006:	e0d4      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8003008:	2304      	movs	r3, #4
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300e:	e0d0      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8003010:	2308      	movs	r3, #8
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003016:	e0cc      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8003018:	2310      	movs	r3, #16
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301e:	e0c8      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a5e      	ldr	r2, [pc, #376]	@ (80031a0 <UART_SetConfig+0x2d4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d125      	bne.n	8003076 <UART_SetConfig+0x1aa>
 800302a:	4b5b      	ldr	r3, [pc, #364]	@ (8003198 <UART_SetConfig+0x2cc>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003030:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003034:	2b30      	cmp	r3, #48	@ 0x30
 8003036:	d016      	beq.n	8003066 <UART_SetConfig+0x19a>
 8003038:	2b30      	cmp	r3, #48	@ 0x30
 800303a:	d818      	bhi.n	800306e <UART_SetConfig+0x1a2>
 800303c:	2b20      	cmp	r3, #32
 800303e:	d00a      	beq.n	8003056 <UART_SetConfig+0x18a>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d814      	bhi.n	800306e <UART_SetConfig+0x1a2>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <UART_SetConfig+0x182>
 8003048:	2b10      	cmp	r3, #16
 800304a:	d008      	beq.n	800305e <UART_SetConfig+0x192>
 800304c:	e00f      	b.n	800306e <UART_SetConfig+0x1a2>
 800304e:	2300      	movs	r3, #0
 8003050:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003054:	e0ad      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8003056:	2302      	movs	r3, #2
 8003058:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800305c:	e0a9      	b.n	80031b2 <UART_SetConfig+0x2e6>
 800305e:	2304      	movs	r3, #4
 8003060:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003064:	e0a5      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8003066:	2308      	movs	r3, #8
 8003068:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800306c:	e0a1      	b.n	80031b2 <UART_SetConfig+0x2e6>
 800306e:	2310      	movs	r3, #16
 8003070:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003074:	e09d      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a4a      	ldr	r2, [pc, #296]	@ (80031a4 <UART_SetConfig+0x2d8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d125      	bne.n	80030cc <UART_SetConfig+0x200>
 8003080:	4b45      	ldr	r3, [pc, #276]	@ (8003198 <UART_SetConfig+0x2cc>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003086:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800308a:	2bc0      	cmp	r3, #192	@ 0xc0
 800308c:	d016      	beq.n	80030bc <UART_SetConfig+0x1f0>
 800308e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003090:	d818      	bhi.n	80030c4 <UART_SetConfig+0x1f8>
 8003092:	2b80      	cmp	r3, #128	@ 0x80
 8003094:	d00a      	beq.n	80030ac <UART_SetConfig+0x1e0>
 8003096:	2b80      	cmp	r3, #128	@ 0x80
 8003098:	d814      	bhi.n	80030c4 <UART_SetConfig+0x1f8>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <UART_SetConfig+0x1d8>
 800309e:	2b40      	cmp	r3, #64	@ 0x40
 80030a0:	d008      	beq.n	80030b4 <UART_SetConfig+0x1e8>
 80030a2:	e00f      	b.n	80030c4 <UART_SetConfig+0x1f8>
 80030a4:	2300      	movs	r3, #0
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030aa:	e082      	b.n	80031b2 <UART_SetConfig+0x2e6>
 80030ac:	2302      	movs	r3, #2
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b2:	e07e      	b.n	80031b2 <UART_SetConfig+0x2e6>
 80030b4:	2304      	movs	r3, #4
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ba:	e07a      	b.n	80031b2 <UART_SetConfig+0x2e6>
 80030bc:	2308      	movs	r3, #8
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c2:	e076      	b.n	80031b2 <UART_SetConfig+0x2e6>
 80030c4:	2310      	movs	r3, #16
 80030c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ca:	e072      	b.n	80031b2 <UART_SetConfig+0x2e6>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a35      	ldr	r2, [pc, #212]	@ (80031a8 <UART_SetConfig+0x2dc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d12a      	bne.n	800312c <UART_SetConfig+0x260>
 80030d6:	4b30      	ldr	r3, [pc, #192]	@ (8003198 <UART_SetConfig+0x2cc>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030e4:	d01a      	beq.n	800311c <UART_SetConfig+0x250>
 80030e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030ea:	d81b      	bhi.n	8003124 <UART_SetConfig+0x258>
 80030ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030f0:	d00c      	beq.n	800310c <UART_SetConfig+0x240>
 80030f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030f6:	d815      	bhi.n	8003124 <UART_SetConfig+0x258>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <UART_SetConfig+0x238>
 80030fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003100:	d008      	beq.n	8003114 <UART_SetConfig+0x248>
 8003102:	e00f      	b.n	8003124 <UART_SetConfig+0x258>
 8003104:	2300      	movs	r3, #0
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310a:	e052      	b.n	80031b2 <UART_SetConfig+0x2e6>
 800310c:	2302      	movs	r3, #2
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003112:	e04e      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8003114:	2304      	movs	r3, #4
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800311a:	e04a      	b.n	80031b2 <UART_SetConfig+0x2e6>
 800311c:	2308      	movs	r3, #8
 800311e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003122:	e046      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8003124:	2310      	movs	r3, #16
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312a:	e042      	b.n	80031b2 <UART_SetConfig+0x2e6>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a17      	ldr	r2, [pc, #92]	@ (8003190 <UART_SetConfig+0x2c4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d13a      	bne.n	80031ac <UART_SetConfig+0x2e0>
 8003136:	4b18      	ldr	r3, [pc, #96]	@ (8003198 <UART_SetConfig+0x2cc>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003140:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003144:	d01a      	beq.n	800317c <UART_SetConfig+0x2b0>
 8003146:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800314a:	d81b      	bhi.n	8003184 <UART_SetConfig+0x2b8>
 800314c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003150:	d00c      	beq.n	800316c <UART_SetConfig+0x2a0>
 8003152:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003156:	d815      	bhi.n	8003184 <UART_SetConfig+0x2b8>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <UART_SetConfig+0x298>
 800315c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003160:	d008      	beq.n	8003174 <UART_SetConfig+0x2a8>
 8003162:	e00f      	b.n	8003184 <UART_SetConfig+0x2b8>
 8003164:	2300      	movs	r3, #0
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316a:	e022      	b.n	80031b2 <UART_SetConfig+0x2e6>
 800316c:	2302      	movs	r3, #2
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003172:	e01e      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8003174:	2304      	movs	r3, #4
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317a:	e01a      	b.n	80031b2 <UART_SetConfig+0x2e6>
 800317c:	2308      	movs	r3, #8
 800317e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003182:	e016      	b.n	80031b2 <UART_SetConfig+0x2e6>
 8003184:	2310      	movs	r3, #16
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318a:	e012      	b.n	80031b2 <UART_SetConfig+0x2e6>
 800318c:	efff69f3 	.word	0xefff69f3
 8003190:	40008000 	.word	0x40008000
 8003194:	40013800 	.word	0x40013800
 8003198:	40021000 	.word	0x40021000
 800319c:	40004400 	.word	0x40004400
 80031a0:	40004800 	.word	0x40004800
 80031a4:	40004c00 	.word	0x40004c00
 80031a8:	40005000 	.word	0x40005000
 80031ac:	2310      	movs	r3, #16
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a9f      	ldr	r2, [pc, #636]	@ (8003434 <UART_SetConfig+0x568>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d17a      	bne.n	80032b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d824      	bhi.n	800320e <UART_SetConfig+0x342>
 80031c4:	a201      	add	r2, pc, #4	@ (adr r2, 80031cc <UART_SetConfig+0x300>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	080031f1 	.word	0x080031f1
 80031d0:	0800320f 	.word	0x0800320f
 80031d4:	080031f9 	.word	0x080031f9
 80031d8:	0800320f 	.word	0x0800320f
 80031dc:	080031ff 	.word	0x080031ff
 80031e0:	0800320f 	.word	0x0800320f
 80031e4:	0800320f 	.word	0x0800320f
 80031e8:	0800320f 	.word	0x0800320f
 80031ec:	08003207 	.word	0x08003207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f0:	f7fe fda2 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 80031f4:	61f8      	str	r0, [r7, #28]
        break;
 80031f6:	e010      	b.n	800321a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003438 <UART_SetConfig+0x56c>)
 80031fa:	61fb      	str	r3, [r7, #28]
        break;
 80031fc:	e00d      	b.n	800321a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031fe:	f7fe fd03 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8003202:	61f8      	str	r0, [r7, #28]
        break;
 8003204:	e009      	b.n	800321a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800320a:	61fb      	str	r3, [r7, #28]
        break;
 800320c:	e005      	b.n	800321a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003218:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80fb 	beq.w	8003418 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	429a      	cmp	r2, r3
 8003230:	d305      	bcc.n	800323e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	429a      	cmp	r2, r3
 800323c:	d903      	bls.n	8003246 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003244:	e0e8      	b.n	8003418 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	2200      	movs	r2, #0
 800324a:	461c      	mov	r4, r3
 800324c:	4615      	mov	r5, r2
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	022b      	lsls	r3, r5, #8
 8003258:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800325c:	0222      	lsls	r2, r4, #8
 800325e:	68f9      	ldr	r1, [r7, #12]
 8003260:	6849      	ldr	r1, [r1, #4]
 8003262:	0849      	lsrs	r1, r1, #1
 8003264:	2000      	movs	r0, #0
 8003266:	4688      	mov	r8, r1
 8003268:	4681      	mov	r9, r0
 800326a:	eb12 0a08 	adds.w	sl, r2, r8
 800326e:	eb43 0b09 	adc.w	fp, r3, r9
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003280:	4650      	mov	r0, sl
 8003282:	4659      	mov	r1, fp
 8003284:	f7fc ffa0 	bl	80001c8 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003296:	d308      	bcc.n	80032aa <UART_SetConfig+0x3de>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800329e:	d204      	bcs.n	80032aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	60da      	str	r2, [r3, #12]
 80032a8:	e0b6      	b.n	8003418 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032b0:	e0b2      	b.n	8003418 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ba:	d15e      	bne.n	800337a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80032bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d828      	bhi.n	8003316 <UART_SetConfig+0x44a>
 80032c4:	a201      	add	r2, pc, #4	@ (adr r2, 80032cc <UART_SetConfig+0x400>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	080032f1 	.word	0x080032f1
 80032d0:	080032f9 	.word	0x080032f9
 80032d4:	08003301 	.word	0x08003301
 80032d8:	08003317 	.word	0x08003317
 80032dc:	08003307 	.word	0x08003307
 80032e0:	08003317 	.word	0x08003317
 80032e4:	08003317 	.word	0x08003317
 80032e8:	08003317 	.word	0x08003317
 80032ec:	0800330f 	.word	0x0800330f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f0:	f7fe fd22 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 80032f4:	61f8      	str	r0, [r7, #28]
        break;
 80032f6:	e014      	b.n	8003322 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032f8:	f7fe fd34 	bl	8001d64 <HAL_RCC_GetPCLK2Freq>
 80032fc:	61f8      	str	r0, [r7, #28]
        break;
 80032fe:	e010      	b.n	8003322 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003300:	4b4d      	ldr	r3, [pc, #308]	@ (8003438 <UART_SetConfig+0x56c>)
 8003302:	61fb      	str	r3, [r7, #28]
        break;
 8003304:	e00d      	b.n	8003322 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003306:	f7fe fc7f 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 800330a:	61f8      	str	r0, [r7, #28]
        break;
 800330c:	e009      	b.n	8003322 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003312:	61fb      	str	r3, [r7, #28]
        break;
 8003314:	e005      	b.n	8003322 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003320:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d077      	beq.n	8003418 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	005a      	lsls	r2, r3, #1
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	441a      	add	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b0f      	cmp	r3, #15
 8003342:	d916      	bls.n	8003372 <UART_SetConfig+0x4a6>
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800334a:	d212      	bcs.n	8003372 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	b29b      	uxth	r3, r3
 8003350:	f023 030f 	bic.w	r3, r3, #15
 8003354:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	b29b      	uxth	r3, r3
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	b29a      	uxth	r2, r3
 8003362:	8afb      	ldrh	r3, [r7, #22]
 8003364:	4313      	orrs	r3, r2
 8003366:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	8afa      	ldrh	r2, [r7, #22]
 800336e:	60da      	str	r2, [r3, #12]
 8003370:	e052      	b.n	8003418 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003378:	e04e      	b.n	8003418 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800337a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800337e:	2b08      	cmp	r3, #8
 8003380:	d827      	bhi.n	80033d2 <UART_SetConfig+0x506>
 8003382:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <UART_SetConfig+0x4bc>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	080033ad 	.word	0x080033ad
 800338c:	080033b5 	.word	0x080033b5
 8003390:	080033bd 	.word	0x080033bd
 8003394:	080033d3 	.word	0x080033d3
 8003398:	080033c3 	.word	0x080033c3
 800339c:	080033d3 	.word	0x080033d3
 80033a0:	080033d3 	.word	0x080033d3
 80033a4:	080033d3 	.word	0x080033d3
 80033a8:	080033cb 	.word	0x080033cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ac:	f7fe fcc4 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 80033b0:	61f8      	str	r0, [r7, #28]
        break;
 80033b2:	e014      	b.n	80033de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b4:	f7fe fcd6 	bl	8001d64 <HAL_RCC_GetPCLK2Freq>
 80033b8:	61f8      	str	r0, [r7, #28]
        break;
 80033ba:	e010      	b.n	80033de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003438 <UART_SetConfig+0x56c>)
 80033be:	61fb      	str	r3, [r7, #28]
        break;
 80033c0:	e00d      	b.n	80033de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c2:	f7fe fc21 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 80033c6:	61f8      	str	r0, [r7, #28]
        break;
 80033c8:	e009      	b.n	80033de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033ce:	61fb      	str	r3, [r7, #28]
        break;
 80033d0:	e005      	b.n	80033de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033dc:	bf00      	nop
    }

    if (pclk != 0U)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d019      	beq.n	8003418 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	085a      	lsrs	r2, r3, #1
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	441a      	add	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	d909      	bls.n	8003412 <UART_SetConfig+0x546>
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003404:	d205      	bcs.n	8003412 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60da      	str	r2, [r3, #12]
 8003410:	e002      	b.n	8003418 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003424:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003428:	4618      	mov	r0, r3
 800342a:	3728      	adds	r7, #40	@ 0x28
 800342c:	46bd      	mov	sp, r7
 800342e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003432:	bf00      	nop
 8003434:	40008000 	.word	0x40008000
 8003438:	00f42400 	.word	0x00f42400

0800343c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01a      	beq.n	8003552 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800353a:	d10a      	bne.n	8003552 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]
  }
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b098      	sub	sp, #96	@ 0x60
 8003584:	af02      	add	r7, sp, #8
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003590:	f7fd fade 	bl	8000b50 <HAL_GetTick>
 8003594:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d12e      	bne.n	8003602 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ac:	2200      	movs	r2, #0
 80035ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f88c 	bl	80036d0 <UART_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d021      	beq.n	8003602 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c6:	e853 3f00 	ldrex	r3, [r3]
 80035ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80035de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035e4:	e841 2300 	strex	r3, r2, [r1]
 80035e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e6      	bne.n	80035be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e062      	b.n	80036c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b04      	cmp	r3, #4
 800360e:	d149      	bne.n	80036a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003610:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003618:	2200      	movs	r2, #0
 800361a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f856 	bl	80036d0 <UART_WaitOnFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d03c      	beq.n	80036a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	623b      	str	r3, [r7, #32]
   return(result);
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800363e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003648:	633b      	str	r3, [r7, #48]	@ 0x30
 800364a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800364e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e6      	bne.n	800362a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3308      	adds	r3, #8
 8003662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	60fb      	str	r3, [r7, #12]
   return(result);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3308      	adds	r3, #8
 800367a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800367c:	61fa      	str	r2, [r7, #28]
 800367e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	69b9      	ldr	r1, [r7, #24]
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	617b      	str	r3, [r7, #20]
   return(result);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e011      	b.n	80036c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3758      	adds	r7, #88	@ 0x58
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	4613      	mov	r3, r2
 80036de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e0:	e049      	b.n	8003776 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d045      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7fd fa31 	bl	8000b50 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <UART_WaitOnFlagUntilTimeout+0x30>
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e048      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d031      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b08      	cmp	r3, #8
 800371e:	d110      	bne.n	8003742 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2208      	movs	r2, #8
 8003726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f838 	bl	800379e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2208      	movs	r2, #8
 8003732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e029      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800374c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003750:	d111      	bne.n	8003776 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800375a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f81e 	bl	800379e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e00f      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4013      	ands	r3, r2
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	429a      	cmp	r2, r3
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	429a      	cmp	r2, r3
 8003792:	d0a6      	beq.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800379e:	b480      	push	{r7}
 80037a0:	b095      	sub	sp, #84	@ 0x54
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80037c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e6      	bne.n	80037a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3308      	adds	r3, #8
 80037de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3308      	adds	r3, #8
 80037f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e5      	bne.n	80037d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003810:	2b01      	cmp	r3, #1
 8003812:	d118      	bne.n	8003846 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	60bb      	str	r3, [r7, #8]
   return(result);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f023 0310 	bic.w	r3, r3, #16
 8003828:	647b      	str	r3, [r7, #68]	@ 0x44
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	6979      	ldr	r1, [r7, #20]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	613b      	str	r3, [r7, #16]
   return(result);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e6      	bne.n	8003814 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800385a:	bf00      	nop
 800385c:	3754      	adds	r7, #84	@ 0x54
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <memset>:
 8003866:	4402      	add	r2, r0
 8003868:	4603      	mov	r3, r0
 800386a:	4293      	cmp	r3, r2
 800386c:	d100      	bne.n	8003870 <memset+0xa>
 800386e:	4770      	bx	lr
 8003870:	f803 1b01 	strb.w	r1, [r3], #1
 8003874:	e7f9      	b.n	800386a <memset+0x4>
	...

08003878 <__libc_init_array>:
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	4d0d      	ldr	r5, [pc, #52]	@ (80038b0 <__libc_init_array+0x38>)
 800387c:	4c0d      	ldr	r4, [pc, #52]	@ (80038b4 <__libc_init_array+0x3c>)
 800387e:	1b64      	subs	r4, r4, r5
 8003880:	10a4      	asrs	r4, r4, #2
 8003882:	2600      	movs	r6, #0
 8003884:	42a6      	cmp	r6, r4
 8003886:	d109      	bne.n	800389c <__libc_init_array+0x24>
 8003888:	4d0b      	ldr	r5, [pc, #44]	@ (80038b8 <__libc_init_array+0x40>)
 800388a:	4c0c      	ldr	r4, [pc, #48]	@ (80038bc <__libc_init_array+0x44>)
 800388c:	f000 f818 	bl	80038c0 <_init>
 8003890:	1b64      	subs	r4, r4, r5
 8003892:	10a4      	asrs	r4, r4, #2
 8003894:	2600      	movs	r6, #0
 8003896:	42a6      	cmp	r6, r4
 8003898:	d105      	bne.n	80038a6 <__libc_init_array+0x2e>
 800389a:	bd70      	pop	{r4, r5, r6, pc}
 800389c:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a0:	4798      	blx	r3
 80038a2:	3601      	adds	r6, #1
 80038a4:	e7ee      	b.n	8003884 <__libc_init_array+0xc>
 80038a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038aa:	4798      	blx	r3
 80038ac:	3601      	adds	r6, #1
 80038ae:	e7f2      	b.n	8003896 <__libc_init_array+0x1e>
 80038b0:	08003928 	.word	0x08003928
 80038b4:	08003928 	.word	0x08003928
 80038b8:	08003928 	.word	0x08003928
 80038bc:	0800392c 	.word	0x0800392c

080038c0 <_init>:
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	bf00      	nop
 80038c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c6:	bc08      	pop	{r3}
 80038c8:	469e      	mov	lr, r3
 80038ca:	4770      	bx	lr

080038cc <_fini>:
 80038cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ce:	bf00      	nop
 80038d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d2:	bc08      	pop	{r3}
 80038d4:	469e      	mov	lr, r3
 80038d6:	4770      	bx	lr
