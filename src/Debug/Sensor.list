
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd4  08004cd4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd4  08004cd4  00005cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cdc  08004cdc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cdc  08004cdc  00005cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce0  08004ce0  00005ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ce4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  08004cf0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08004cf0  000061ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001073a  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d6  00000000  00000000  00016776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00018b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b96  00000000  00000000  00019a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001fd9  00000000  00000000  0001a5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001243f  00000000  00000000  0001c59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eeb25  00000000  00000000  0002e9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d503  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  0011d548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001212f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c60 	.word	0x08004c60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004c60 	.word	0x08004c60

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	4b3d      	ldr	r3, [pc, #244]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d2:	4a3c      	ldr	r2, [pc, #240]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 80004d4:	f043 0304 	orr.w	r3, r3, #4
 80004d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004da:	4b3a      	ldr	r3, [pc, #232]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004de:	f003 0304 	and.w	r3, r3, #4
 80004e2:	613b      	str	r3, [r7, #16]
 80004e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e6:	4b37      	ldr	r3, [pc, #220]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ea:	4a36      	ldr	r2, [pc, #216]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 80004ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004f2:	4b34      	ldr	r3, [pc, #208]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b31      	ldr	r3, [pc, #196]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	4a30      	ldr	r2, [pc, #192]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800050a:	4b2e      	ldr	r3, [pc, #184]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b2b      	ldr	r3, [pc, #172]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	4a2a      	ldr	r2, [pc, #168]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000522:	4b28      	ldr	r3, [pc, #160]	@ (80005c4 <MX_GPIO_Init+0x10c>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Trigger_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000534:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000538:	f001 f842 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2120      	movs	r1, #32
 8000540:	4821      	ldr	r0, [pc, #132]	@ (80005c8 <MX_GPIO_Init+0x110>)
 8000542:	f001 f83d 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000546:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800054c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4619      	mov	r1, r3
 800055c:	481b      	ldr	r0, [pc, #108]	@ (80005cc <MX_GPIO_Init+0x114>)
 800055e:	f000 fe85 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Trigger_Pin;
 8000562:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4619      	mov	r1, r3
 800057a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800057e:	f000 fe75 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8000582:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4619      	mov	r1, r3
 8000596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059a:	f000 fe67 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 800059e:	2320      	movs	r3, #32
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <MX_GPIO_Init+0x110>)
 80005b6:	f000 fe59 	bl	800126c <HAL_GPIO_Init>

}
 80005ba:	bf00      	nop
 80005bc:	3728      	adds	r7, #40	@ 0x28
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000
 80005c8:	48000400 	.word	0x48000400
 80005cc:	48000800 	.word	0x48000800

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fcbb 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f863 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f7ff ff6b 	bl	80004b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 fbff 	bl	8000de4 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80005e6:	f000 fb31 	bl	8000c4c <MX_TIM7_Init>
  MX_TIM1_Init();
 80005ea:	f000 fa7f 	bl	8000aec <MX_TIM1_Init>
  MX_TIM2_Init();
 80005ee:	f000 fad3 	bl	8000b98 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7);
 80005f2:	4828      	ldr	r0, [pc, #160]	@ (8000694 <main+0xc4>)
 80005f4:	f002 fb74 	bl	8002ce0 <HAL_TIM_Base_Start>
#if STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_SLAVE_TIM
  stepper_init(&stepper, &htim2, TIM_CHANNEL_3, &htim1);

#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
  stepper_init(&stepper, &htim2, TIM_CHANNEL_3);
 80005f8:	2208      	movs	r2, #8
 80005fa:	4927      	ldr	r1, [pc, #156]	@ (8000698 <main+0xc8>)
 80005fc:	4827      	ldr	r0, [pc, #156]	@ (800069c <main+0xcc>)
 80005fe:	f000 f8c9 	bl	8000794 <stepper_init>

//  int32_t speed_table[SET_TABLE_SIZE] = {30, 20, -20, 10, 50};
  int32_t angle_table[SET_TABLE_SIZE] = {30, 90, 45, 15, -180};
 8000602:	4b27      	ldr	r3, [pc, #156]	@ (80006a0 <main+0xd0>)
 8000604:	463c      	mov	r4, r7
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	682b      	ldr	r3, [r5, #0]
 800060e:	6023      	str	r3, [r4, #0]

  int i = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t time_tick = HAL_GetTick();
 8000614:	f000 fd0c 	bl	8001030 <HAL_GetTick>
 8000618:	6238      	str	r0, [r7, #32]
  uint32_t max_time = 2000;
 800061a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800061e:	617b      	str	r3, [r7, #20]
  uint32_t angle = 0; //speed = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
  direction dir = CW;
 8000624:	2301      	movs	r3, #1
 8000626:	76fb      	strb	r3, [r7, #27]
    /* USER CODE BEGIN 3 */
	  // Sensor_get_distance();
	  // HAL_Delay(300);


if((HAL_GetTick() - time_tick) > max_time)
 8000628:	f000 fd02 	bl	8001030 <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	6a3b      	ldr	r3, [r7, #32]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	429a      	cmp	r2, r3
 8000636:	d2f7      	bcs.n	8000628 <main+0x58>
	  {
		  time_tick = HAL_GetTick();
 8000638:	f000 fcfa 	bl	8001030 <HAL_GetTick>
 800063c:	6238      	str	r0, [r7, #32]

                  //obrót o zadany kąt
		  if(angle_table[i] >= 0)
 800063e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	3328      	adds	r3, #40	@ 0x28
 8000644:	443b      	add	r3, r7
 8000646:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800064a:	2b00      	cmp	r3, #0
 800064c:	db09      	blt.n	8000662 <main+0x92>
		  {
			  angle = angle_table[i];
 800064e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	3328      	adds	r3, #40	@ 0x28
 8000654:	443b      	add	r3, r7
 8000656:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800065a:	61fb      	str	r3, [r7, #28]
			  dir = CW;
 800065c:	2301      	movs	r3, #1
 800065e:	76fb      	strb	r3, [r7, #27]
 8000660:	e009      	b.n	8000676 <main+0xa6>
		  }
		  else
		  {
			  angle = -angle_table[i];
 8000662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	3328      	adds	r3, #40	@ 0x28
 8000668:	443b      	add	r3, r7
 800066a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800066e:	425b      	negs	r3, r3
 8000670:	61fb      	str	r3, [r7, #28]
			  dir = CCW;
 8000672:	2300      	movs	r3, #0
 8000674:	76fb      	strb	r3, [r7, #27]
		  }

		  stepper_set_angle(&stepper, dir, 10, angle);
 8000676:	7ef9      	ldrb	r1, [r7, #27]
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	220a      	movs	r2, #10
 800067c:	4807      	ldr	r0, [pc, #28]	@ (800069c <main+0xcc>)
 800067e:	f000 f89b 	bl	80007b8 <stepper_set_angle>
			  dir = CCW;
		  }

		  stepper_set_continous(&stepper, dir, speed);*/

		  i++;
 8000682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000684:	3301      	adds	r3, #1
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24

		  if(i >= SET_TABLE_SIZE)
 8000688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800068a:	2b04      	cmp	r3, #4
 800068c:	ddcc      	ble.n	8000628 <main+0x58>
		  {
			  i = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
if((HAL_GetTick() - time_tick) > max_time)
 8000692:	e7c9      	b.n	8000628 <main+0x58>
 8000694:	200000d4 	.word	0x200000d4
 8000698:	20000088 	.word	0x20000088
 800069c:	20000028 	.word	0x20000028
 80006a0:	08004c78 	.word	0x08004c78

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b096      	sub	sp, #88	@ 0x58
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2244      	movs	r2, #68	@ 0x44
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 faa7 	bl	8004c06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ca:	f000 ff9f 	bl	800160c <HAL_PWREx_ControlVoltageScaling>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d4:	f000 f858 	bl	8000788 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e2:	2310      	movs	r3, #16
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ea:	2302      	movs	r3, #2
 80006ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006f2:	230a      	movs	r3, #10
 80006f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006f6:	2307      	movs	r3, #7
 80006f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4618      	mov	r0, r3
 8000708:	f000 ffd6 	bl	80016b8 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000712:	f000 f839 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2303      	movs	r3, #3
 800071c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	2104      	movs	r1, #4
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fb9e 	bl	8001e70 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073a:	f000 f825 	bl	8000788 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3758      	adds	r7, #88	@ 0x58
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <HAL_TIM_PWM_PulseFinishedCallback>:
	}
}
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
											 
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stepper.timer.htim->Instance)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	429a      	cmp	r2, r3
 800075c:	d10d      	bne.n	800077a <HAL_TIM_PWM_PulseFinishedCallback+0x32>
	{
		stepper.step_counter++;
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	3301      	adds	r3, #1
 8000764:	4a07      	ldr	r2, [pc, #28]	@ (8000784 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000766:	60d3      	str	r3, [r2, #12]

		if(stepper.step_counter >= stepper.steps_to_count)
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800076a:	68da      	ldr	r2, [r3, #12]
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800076e:	691b      	ldr	r3, [r3, #16]
 8000770:	429a      	cmp	r2, r3
 8000772:	d302      	bcc.n	800077a <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		{
			stepper_stop(&stepper);
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000776:	f000 f857 	bl	8000828 <stepper_stop>
		}
	}
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000028 	.word	0x20000028

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <Error_Handler+0x8>

08000794 <stepper_init>:
	_stepper->timer.channel = _channel;
	_stepper->slave_timer.htim = _slave_timer;
}
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
void stepper_init(struct stepper_s *_stepper, TIM_HandleTypeDef *_htim, uint32_t _channel)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
	_stepper->timer.htim = _htim;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	601a      	str	r2, [r3, #0]
	_stepper->timer.channel = _channel;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	605a      	str	r2, [r3, #4]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <stepper_set_angle>:

	HAL_TIM_PWM_Start(_stepper->timer.htim, _stepper->timer.channel);
}

void stepper_set_angle(struct stepper_s *_stepper, direction _dir, uint32_t _speed, uint32_t _angle)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	460b      	mov	r3, r1
 80007c6:	72fb      	strb	r3, [r7, #11]
	_stepper->mode = angle;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	2201      	movs	r2, #1
 80007cc:	721a      	strb	r2, [r3, #8]

	stepper_set_direction(_stepper, _dir);
 80007ce:	7afb      	ldrb	r3, [r7, #11]
 80007d0:	4619      	mov	r1, r3
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f000 f872 	bl	80008bc <stepper_set_direction>
	stepper_set_speed(_stepper, _speed);
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	68f8      	ldr	r0, [r7, #12]
 80007dc:	f000 f88c 	bl	80008f8 <stepper_set_speed>

	_stepper->step_counter = 0;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
	_stepper->steps_to_count = _angle * (STEP_PER_REVOLUTION * MICRO_STEP) / 360;
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 80007ec:	fb02 f303 	mul.w	r3, r2, r3
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	4a0c      	ldr	r2, [pc, #48]	@ (8000824 <stepper_set_angle+0x6c>)
 80007f4:	fba2 2303 	umull	r2, r3, r2, r3
 80007f8:	089a      	lsrs	r2, r3, #2
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	611a      	str	r2, [r3, #16]

	if(0 == _stepper->steps_to_count)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d102      	bne.n	800080c <stepper_set_angle+0x54>
	{
		stepper_stop(_stepper);
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f000 f80e 	bl	8000828 <stepper_stop>
	__HAL_TIM_SET_AUTORELOAD(_stepper->slave_timer.htim, _stepper->steps_to_count - 1);
	HAL_TIM_Base_Start_IT(_stepper->slave_timer.htim);

	HAL_TIM_PWM_Start(_stepper->timer.htim, _stepper->timer.channel);
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
	HAL_TIM_PWM_Start_IT(_stepper->timer.htim, _stepper->timer.channel);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	4619      	mov	r1, r3
 8000816:	4610      	mov	r0, r2
 8000818:	f002 fbb8 	bl	8002f8c <HAL_TIM_PWM_Start_IT>
#endif
}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	16c16c17 	.word	0x16c16c17

08000828 <stepper_stop>:

void stepper_stop(struct stepper_s *_stepper)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	_stepper->mode = idle;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	721a      	strb	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, 0);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d105      	bne.n	800084a <stepper_stop+0x22>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2200      	movs	r2, #0
 8000846:	635a      	str	r2, [r3, #52]	@ 0x34
 8000848:	e02c      	b.n	80008a4 <stepper_stop+0x7c>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b04      	cmp	r3, #4
 8000850:	d105      	bne.n	800085e <stepper_stop+0x36>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	2300      	movs	r3, #0
 800085a:	6393      	str	r3, [r2, #56]	@ 0x38
 800085c:	e022      	b.n	80008a4 <stepper_stop+0x7c>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b08      	cmp	r3, #8
 8000864:	d105      	bne.n	8000872 <stepper_stop+0x4a>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	2300      	movs	r3, #0
 800086e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000870:	e018      	b.n	80008a4 <stepper_stop+0x7c>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b0c      	cmp	r3, #12
 8000878:	d105      	bne.n	8000886 <stepper_stop+0x5e>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	2300      	movs	r3, #0
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	e00e      	b.n	80008a4 <stepper_stop+0x7c>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b10      	cmp	r3, #16
 800088c:	d105      	bne.n	800089a <stepper_stop+0x72>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	6593      	str	r3, [r2, #88]	@ 0x58
 8000898:	e004      	b.n	80008a4 <stepper_stop+0x7c>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	2300      	movs	r3, #0
 80008a2:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Stop(_stepper->timer.htim, _stepper->timer.channel);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	4619      	mov	r1, r3
 80008ae:	4610      	mov	r0, r2
 80008b0:	f002 fad6 	bl	8002e60 <HAL_TIM_PWM_Stop>

#if STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_SLAVE_TIM
	HAL_TIM_Base_Stop_IT(_stepper->slave_timer.htim);
#endif
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <stepper_set_direction>:

void stepper_set_direction(struct stepper_s *_stepper, direction _dir)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	if(_dir == CCW)
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d105      	bne.n	80008da <stepper_set_direction+0x1e>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CCW);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	4808      	ldr	r0, [pc, #32]	@ (80008f4 <stepper_set_direction+0x38>)
 80008d4:	f000 fe74 	bl	80015c0 <HAL_GPIO_WritePin>
	else if(_dir == CW)
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
}
 80008d8:	e007      	b.n	80008ea <stepper_set_direction+0x2e>
	else if(_dir == CW)
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d104      	bne.n	80008ea <stepper_set_direction+0x2e>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
 80008e0:	2201      	movs	r2, #1
 80008e2:	2120      	movs	r1, #32
 80008e4:	4803      	ldr	r0, [pc, #12]	@ (80008f4 <stepper_set_direction+0x38>)
 80008e6:	f000 fe6b 	bl	80015c0 <HAL_GPIO_WritePin>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	48000400 	.word	0x48000400

080008f8 <stepper_set_speed>:

void stepper_set_speed(struct stepper_s *_stepper, uint32_t _speed)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	uint32_t counter, freq;

	if(_speed > 100)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	2b64      	cmp	r3, #100	@ 0x64
 8000906:	d902      	bls.n	800090e <stepper_set_speed+0x16>
	{
		_speed = 100;
 8000908:	2364      	movs	r3, #100	@ 0x64
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	e006      	b.n	800091c <stepper_set_speed+0x24>
	}
	else if(_speed == 0)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d103      	bne.n	800091c <stepper_set_speed+0x24>
	{
		stepper_stop(_stepper);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff87 	bl	8000828 <stepper_stop>
		return;
 800091a:	e068      	b.n	80009ee <stepper_set_speed+0xf6>
	}

	freq = (_speed * (STEPPER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ))/STEPPER_MOTOR_MAX_SPEED;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000922:	fb02 f303 	mul.w	r3, r2, r3
 8000926:	4a33      	ldr	r2, [pc, #204]	@ (80009f4 <stepper_set_speed+0xfc>)
 8000928:	fba2 2303 	umull	r2, r3, r2, r3
 800092c:	095b      	lsrs	r3, r3, #5
 800092e:	60fb      	str	r3, [r7, #12]
	counter = HAL_RCC_GetPCLK1Freq() / (_stepper->timer.htim->Init.Prescaler * freq);
 8000930:	f001 fc36 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 8000934:	4601      	mov	r1, r0
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	fb02 f303 	mul.w	r3, r2, r3
 8000942:	fbb1 f3f3 	udiv	r3, r1, r3
 8000946:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(_stepper->timer.htim, 0);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_AUTORELOAD(_stepper->timer.htim, counter - 1);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	68ba      	ldr	r2, [r7, #8]
 800095a:	3a01      	subs	r2, #1
 800095c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	3a01      	subs	r2, #1
 8000966:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, (counter/2) - 1);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d107      	bne.n	8000980 <stepper_set_speed+0x88>
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	085a      	lsrs	r2, r3, #1
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3a01      	subs	r2, #1
 800097c:	635a      	str	r2, [r3, #52]	@ 0x34
 800097e:	e036      	b.n	80009ee <stepper_set_speed+0xf6>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b04      	cmp	r3, #4
 8000986:	d107      	bne.n	8000998 <stepper_set_speed+0xa0>
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	085b      	lsrs	r3, r3, #1
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	6812      	ldr	r2, [r2, #0]
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	3b01      	subs	r3, #1
 8000994:	6393      	str	r3, [r2, #56]	@ 0x38
 8000996:	e02a      	b.n	80009ee <stepper_set_speed+0xf6>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	2b08      	cmp	r3, #8
 800099e:	d107      	bne.n	80009b0 <stepper_set_speed+0xb8>
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	085b      	lsrs	r3, r3, #1
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	6812      	ldr	r2, [r2, #0]
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80009ae:	e01e      	b.n	80009ee <stepper_set_speed+0xf6>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	2b0c      	cmp	r3, #12
 80009b6:	d107      	bne.n	80009c8 <stepper_set_speed+0xd0>
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	085b      	lsrs	r3, r3, #1
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	6812      	ldr	r2, [r2, #0]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c6:	e012      	b.n	80009ee <stepper_set_speed+0xf6>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	2b10      	cmp	r3, #16
 80009ce:	d107      	bne.n	80009e0 <stepper_set_speed+0xe8>
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	085b      	lsrs	r3, r3, #1
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	6812      	ldr	r2, [r2, #0]
 80009d8:	6812      	ldr	r2, [r2, #0]
 80009da:	3b01      	subs	r3, #1
 80009dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009de:	e006      	b.n	80009ee <stepper_set_speed+0xf6>
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	085b      	lsrs	r3, r3, #1
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	6812      	ldr	r2, [r2, #0]
 80009e8:	6812      	ldr	r2, [r2, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	51eb851f 	.word	0x51eb851f

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a02:	4a0e      	ldr	r2, [pc, #56]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1a:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <NMI_Handler+0x4>

08000a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <MemManage_Handler+0x4>

08000a58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a96:	f000 fab7 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000aa6:	f002 fbc5 	bl	8003234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000003c 	.word	0x2000003c

08000ab4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ab8:	4802      	ldr	r0, [pc, #8]	@ (8000ac4 <TIM7_IRQHandler+0x10>)
 8000aba:	f002 fbbb 	bl	8003234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000d4 	.word	0x200000d4

08000ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b02:	463b      	mov	r3, r7
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b0c:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <MX_TIM1_Init+0xa4>)
 8000b0e:	4a21      	ldr	r2, [pc, #132]	@ (8000b94 <MX_TIM1_Init+0xa8>)
 8000b10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <MX_TIM1_Init+0xa4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <MX_TIM1_Init+0xa4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <MX_TIM1_Init+0xa4>)
 8000b20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <MX_TIM1_Init+0xa4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <MX_TIM1_Init+0xa4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <MX_TIM1_Init+0xa4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b38:	4815      	ldr	r0, [pc, #84]	@ (8000b90 <MX_TIM1_Init+0xa4>)
 8000b3a:	f002 f879 	bl	8002c30 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000b44:	f7ff fe20 	bl	8000788 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4619      	mov	r1, r3
 8000b56:	480e      	ldr	r0, [pc, #56]	@ (8000b90 <MX_TIM1_Init+0xa4>)
 8000b58:	f002 fd82 	bl	8003660 <HAL_TIM_SlaveConfigSynchro>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b62:	f7ff fe11 	bl	8000788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b72:	463b      	mov	r3, r7
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <MX_TIM1_Init+0xa4>)
 8000b78:	f003 fa84 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000b82:	f7ff fe01 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	3720      	adds	r7, #32
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000003c 	.word	0x2000003c
 8000b94:	40012c00 	.word	0x40012c00

08000b98 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000baa:	463b      	mov	r3, r7
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	@ (8000c48 <MX_TIM2_Init+0xb0>)
 8000bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000bc4:	4b20      	ldr	r3, [pc, #128]	@ (8000c48 <MX_TIM2_Init+0xb0>)
 8000bc6:	224f      	movs	r2, #79	@ 0x4f
 8000bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <MX_TIM2_Init+0xb0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <MX_TIM2_Init+0xb0>)
 8000bd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <MX_TIM2_Init+0xb0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <MX_TIM2_Init+0xb0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000be4:	4818      	ldr	r0, [pc, #96]	@ (8000c48 <MX_TIM2_Init+0xb0>)
 8000be6:	f002 f8e3 	bl	8002db0 <HAL_TIM_PWM_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000bf0:	f7ff fdca 	bl	8000788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000bf4:	2360      	movs	r3, #96	@ 0x60
 8000bf6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000bf8:	2380      	movs	r3, #128	@ 0x80
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4811      	ldr	r0, [pc, #68]	@ (8000c48 <MX_TIM2_Init+0xb0>)
 8000c04:	f003 fa3e 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000c0e:	f7ff fdbb 	bl	8000788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c12:	2360      	movs	r3, #96	@ 0x60
 8000c14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000c16:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c24:	463b      	mov	r3, r7
 8000c26:	2208      	movs	r2, #8
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4807      	ldr	r0, [pc, #28]	@ (8000c48 <MX_TIM2_Init+0xb0>)
 8000c2c:	f002 fc04 	bl	8003438 <HAL_TIM_PWM_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000c36:	f7ff fda7 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c3a:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <MX_TIM2_Init+0xb0>)
 8000c3c:	f000 f89c 	bl	8000d78 <HAL_TIM_MspPostInit>

}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	@ 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000088 	.word	0x20000088

08000c4c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_TIM7_Init+0x64>)
 8000c5e:	4a15      	ldr	r2, [pc, #84]	@ (8000cb4 <MX_TIM7_Init+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 8000c62:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <MX_TIM7_Init+0x64>)
 8000c64:	224f      	movs	r2, #79	@ 0x4f
 8000c66:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_TIM7_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <MX_TIM7_Init+0x64>)
 8000c70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c74:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_TIM7_Init+0x64>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <MX_TIM7_Init+0x64>)
 8000c7e:	f001 ffd7 	bl	8002c30 <HAL_TIM_Base_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000c88:	f7ff fd7e 	bl	8000788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_TIM7_Init+0x64>)
 8000c9a:	f003 f9f3 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ca4:	f7ff fd70 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000d4 	.word	0x200000d4
 8000cb4:	40001400 	.word	0x40001400

08000cb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d30 <HAL_TIM_Base_MspInit+0x78>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d114      	bne.n	8000cf4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cca:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <HAL_TIM_Base_MspInit+0x7c>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cce:	4a19      	ldr	r2, [pc, #100]	@ (8000d34 <HAL_TIM_Base_MspInit+0x7c>)
 8000cd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <HAL_TIM_Base_MspInit+0x7c>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2019      	movs	r0, #25
 8000ce8:	f000 fa89 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cec:	2019      	movs	r0, #25
 8000cee:	f000 faa2 	bl	8001236 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000cf2:	e018      	b.n	8000d26 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d38 <HAL_TIM_Base_MspInit+0x80>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d113      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <HAL_TIM_Base_MspInit+0x7c>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	4a0c      	ldr	r2, [pc, #48]	@ (8000d34 <HAL_TIM_Base_MspInit+0x7c>)
 8000d04:	f043 0320 	orr.w	r3, r3, #32
 8000d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <HAL_TIM_Base_MspInit+0x7c>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0e:	f003 0320 	and.w	r3, r3, #32
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2037      	movs	r0, #55	@ 0x37
 8000d1c:	f000 fa6f 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d20:	2037      	movs	r0, #55	@ 0x37
 8000d22:	f000 fa88 	bl	8001236 <HAL_NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40012c00 	.word	0x40012c00
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40001400 	.word	0x40001400

08000d3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d4c:	d10b      	bne.n	8000d66 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <HAL_TIM_PWM_MspInit+0x38>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d52:	4a08      	ldr	r2, [pc, #32]	@ (8000d74 <HAL_TIM_PWM_MspInit+0x38>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_TIM_PWM_MspInit+0x38>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d98:	d11c      	bne.n	8000dd4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <HAL_TIM_MspPostInit+0x64>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ddc <HAL_TIM_MspPostInit+0x64>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <HAL_TIM_MspPostInit+0x64>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin;
 8000db2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000db6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <HAL_TIM_MspPostInit+0x68>)
 8000dd0:	f000 fa4c 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	48000400 	.word	0x48000400

08000de4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de8:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <MX_USART2_UART_Init+0x58>)
 8000dea:	4a15      	ldr	r2, [pc, #84]	@ (8000e40 <MX_USART2_UART_Init+0x5c>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dee:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <MX_USART2_UART_Init+0x58>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <MX_USART2_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <MX_USART2_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e28:	f003 f9d2 	bl	80041d0 <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e32:	f7ff fca9 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000120 	.word	0x20000120
 8000e40:	40004400 	.word	0x40004400

08000e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0ac      	sub	sp, #176	@ 0xb0
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2288      	movs	r2, #136	@ 0x88
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 fece 	bl	8004c06 <memset>
  if(uartHandle->Instance==USART2)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a21      	ldr	r2, [pc, #132]	@ (8000ef4 <HAL_UART_MspInit+0xb0>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d13b      	bne.n	8000eec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fa19 	bl	80022b8 <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e8c:	f7ff fc7c 	bl	8000788 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <HAL_UART_MspInit+0xb4>)
 8000e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e94:	4a18      	ldr	r2, [pc, #96]	@ (8000ef8 <HAL_UART_MspInit+0xb4>)
 8000e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <HAL_UART_MspInit+0xb4>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <HAL_UART_MspInit+0xb4>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eac:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <HAL_UART_MspInit+0xb4>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <HAL_UART_MspInit+0xb4>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ec0:	230c      	movs	r3, #12
 8000ec2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee8:	f000 f9c0 	bl	800126c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eec:	bf00      	nop
 8000eee:	37b0      	adds	r7, #176	@ 0xb0
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40004400 	.word	0x40004400
 8000ef8:	40021000 	.word	0x40021000

08000efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f00:	f7ff fde2 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	@ (8000f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <LoopForever+0xe>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f48 <LoopForever+0x16>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f003 fe75 	bl	8004c18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f2e:	f7ff fb4f 	bl	80005d0 <main>

08000f32 <LoopForever>:

LoopForever:
    b LoopForever
 8000f32:	e7fe      	b.n	8000f32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f40:	08004ce4 	.word	0x08004ce4
  ldr r2, =_sbss
 8000f44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f48:	200001ac 	.word	0x200001ac

08000f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_2_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <HAL_Init+0x3c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f8c <HAL_Init+0x3c>)
 8000f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f66:	2003      	movs	r0, #3
 8000f68:	f000 f93e 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f000 f80f 	bl	8000f90 <HAL_InitTick>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	e001      	b.n	8000f82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f7e:	f7ff fd3b 	bl	80009f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f82:	79fb      	ldrb	r3, [r7, #7]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40022000 	.word	0x40022000

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f9c:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <HAL_InitTick+0x6c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d023      	beq.n	8000fec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fa4:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_InitTick+0x70>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <HAL_InitTick+0x6c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f949 	bl	8001252 <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10f      	bne.n	8000fe6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d809      	bhi.n	8000fe0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f000 f913 	bl	80011fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <HAL_InitTick+0x74>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e007      	b.n	8000ff0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e004      	b.n	8000ff0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e001      	b.n	8000ff0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000000 	.word	0x20000000
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	@ (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	200001a8 	.word	0x200001a8

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200001a8 	.word	0x200001a8

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	@ (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	@ (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	@ (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	@ (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	@ 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff29 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff3e 	bl	8001090 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff31 	bl	80010ac <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127a:	e17f      	b.n	800157c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2101      	movs	r1, #1
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8171 	beq.w	8001576 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b01      	cmp	r3, #1
 800129e:	d005      	beq.n	80012ac <HAL_GPIO_Init+0x40>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d130      	bne.n	800130e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012e2:	2201      	movs	r2, #1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	f003 0201 	and.w	r2, r3, #1
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b03      	cmp	r3, #3
 8001318:	d118      	bne.n	800134c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001320:	2201      	movs	r2, #1
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	f003 0201 	and.w	r2, r3, #1
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b03      	cmp	r3, #3
 8001356:	d017      	beq.n	8001388 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d123      	bne.n	80013dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	6939      	ldr	r1, [r7, #16]
 80013d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80ac 	beq.w	8001576 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b5f      	ldr	r3, [pc, #380]	@ (800159c <HAL_GPIO_Init+0x330>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001422:	4a5e      	ldr	r2, [pc, #376]	@ (800159c <HAL_GPIO_Init+0x330>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6613      	str	r3, [r2, #96]	@ 0x60
 800142a:	4b5c      	ldr	r3, [pc, #368]	@ (800159c <HAL_GPIO_Init+0x330>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001436:	4a5a      	ldr	r2, [pc, #360]	@ (80015a0 <HAL_GPIO_Init+0x334>)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001460:	d025      	beq.n	80014ae <HAL_GPIO_Init+0x242>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4f      	ldr	r2, [pc, #316]	@ (80015a4 <HAL_GPIO_Init+0x338>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01f      	beq.n	80014aa <HAL_GPIO_Init+0x23e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4e      	ldr	r2, [pc, #312]	@ (80015a8 <HAL_GPIO_Init+0x33c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d019      	beq.n	80014a6 <HAL_GPIO_Init+0x23a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4d      	ldr	r2, [pc, #308]	@ (80015ac <HAL_GPIO_Init+0x340>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x236>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4c      	ldr	r2, [pc, #304]	@ (80015b0 <HAL_GPIO_Init+0x344>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x232>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4b      	ldr	r2, [pc, #300]	@ (80015b4 <HAL_GPIO_Init+0x348>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x22e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4a      	ldr	r2, [pc, #296]	@ (80015b8 <HAL_GPIO_Init+0x34c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x22a>
 8001492:	2306      	movs	r3, #6
 8001494:	e00c      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 8001496:	2307      	movs	r3, #7
 8001498:	e00a      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 800149a:	2305      	movs	r3, #5
 800149c:	e008      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 800149e:	2304      	movs	r3, #4
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e004      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 80014ae:	2300      	movs	r3, #0
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	f002 0203 	and.w	r2, r2, #3
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4093      	lsls	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014c0:	4937      	ldr	r1, [pc, #220]	@ (80015a0 <HAL_GPIO_Init+0x334>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ce:	4b3b      	ldr	r3, [pc, #236]	@ (80015bc <HAL_GPIO_Init+0x350>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014f2:	4a32      	ldr	r2, [pc, #200]	@ (80015bc <HAL_GPIO_Init+0x350>)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014f8:	4b30      	ldr	r3, [pc, #192]	@ (80015bc <HAL_GPIO_Init+0x350>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800151c:	4a27      	ldr	r2, [pc, #156]	@ (80015bc <HAL_GPIO_Init+0x350>)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001522:	4b26      	ldr	r3, [pc, #152]	@ (80015bc <HAL_GPIO_Init+0x350>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001546:	4a1d      	ldr	r2, [pc, #116]	@ (80015bc <HAL_GPIO_Init+0x350>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800154c:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <HAL_GPIO_Init+0x350>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001570:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <HAL_GPIO_Init+0x350>)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	f47f ae78 	bne.w	800127c <HAL_GPIO_Init+0x10>
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	371c      	adds	r7, #28
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010000 	.word	0x40010000
 80015a4:	48000400 	.word	0x48000400
 80015a8:	48000800 	.word	0x48000800
 80015ac:	48000c00 	.word	0x48000c00
 80015b0:	48001000 	.word	0x48001000
 80015b4:	48001400 	.word	0x48001400
 80015b8:	48001800 	.word	0x48001800
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d0:	787b      	ldrb	r3, [r7, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015f4:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <HAL_PWREx_GetVoltageRange+0x18>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40007000 	.word	0x40007000

0800160c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800161a:	d130      	bne.n	800167e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800161c:	4b23      	ldr	r3, [pc, #140]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001628:	d038      	beq.n	800169c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800162a:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001632:	4a1e      	ldr	r2, [pc, #120]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001634:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001638:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800163a:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2232      	movs	r2, #50	@ 0x32
 8001640:	fb02 f303 	mul.w	r3, r2, r3
 8001644:	4a1b      	ldr	r2, [pc, #108]	@ (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	0c9b      	lsrs	r3, r3, #18
 800164c:	3301      	adds	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001650:	e002      	b.n	8001658 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3b01      	subs	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001664:	d102      	bne.n	800166c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f2      	bne.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001678:	d110      	bne.n	800169c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e00f      	b.n	800169e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800167e:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800168a:	d007      	beq.n	800169c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800168c:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001694:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001696:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800169a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40007000 	.word	0x40007000
 80016b0:	20000000 	.word	0x20000000
 80016b4:	431bde83 	.word	0x431bde83

080016b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e3ca      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ca:	4b97      	ldr	r3, [pc, #604]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d4:	4b94      	ldr	r3, [pc, #592]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80e4 	beq.w	80018b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <HAL_RCC_OscConfig+0x4a>
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2b0c      	cmp	r3, #12
 80016f6:	f040 808b 	bne.w	8001810 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	f040 8087 	bne.w	8001810 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001702:	4b89      	ldr	r3, [pc, #548]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <HAL_RCC_OscConfig+0x62>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e3a2      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1a      	ldr	r2, [r3, #32]
 800171e:	4b82      	ldr	r3, [pc, #520]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <HAL_RCC_OscConfig+0x7c>
 800172a:	4b7f      	ldr	r3, [pc, #508]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001732:	e005      	b.n	8001740 <HAL_RCC_OscConfig+0x88>
 8001734:	4b7c      	ldr	r3, [pc, #496]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800173a:	091b      	lsrs	r3, r3, #4
 800173c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001740:	4293      	cmp	r3, r2
 8001742:	d223      	bcs.n	800178c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fd55 	bl	80021f8 <RCC_SetFlashLatencyFromMSIRange>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e383      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001758:	4b73      	ldr	r3, [pc, #460]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a72      	ldr	r2, [pc, #456]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b70      	ldr	r3, [pc, #448]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	496d      	ldr	r1, [pc, #436]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001776:	4b6c      	ldr	r3, [pc, #432]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	4968      	ldr	r1, [pc, #416]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
 800178a:	e025      	b.n	80017d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800178c:	4b66      	ldr	r3, [pc, #408]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a65      	ldr	r2, [pc, #404]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b63      	ldr	r3, [pc, #396]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4960      	ldr	r1, [pc, #384]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	495b      	ldr	r1, [pc, #364]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d109      	bne.n	80017d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fd15 	bl	80021f8 <RCC_SetFlashLatencyFromMSIRange>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e343      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017d8:	f000 fc4a 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 80017dc:	4602      	mov	r2, r0
 80017de:	4b52      	ldr	r3, [pc, #328]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	4950      	ldr	r1, [pc, #320]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 80017ea:	5ccb      	ldrb	r3, [r1, r3]
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
 80017f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001930 <HAL_RCC_OscConfig+0x278>)
 80017f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fbc7 	bl	8000f90 <HAL_InitTick>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d052      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	e327      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d032      	beq.n	800187e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001818:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a42      	ldr	r2, [pc, #264]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001824:	f7ff fc04 	bl	8001030 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800182c:	f7ff fc00 	bl	8001030 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e310      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800183e:	4b3a      	ldr	r3, [pc, #232]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800184a:	4b37      	ldr	r3, [pc, #220]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a36      	ldr	r2, [pc, #216]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b34      	ldr	r3, [pc, #208]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4931      	ldr	r1, [pc, #196]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001868:	4b2f      	ldr	r3, [pc, #188]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	492c      	ldr	r1, [pc, #176]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
 800187c:	e01a      	b.n	80018b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800187e:	4b2a      	ldr	r3, [pc, #168]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a29      	ldr	r2, [pc, #164]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800188a:	f7ff fbd1 	bl	8001030 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001892:	f7ff fbcd 	bl	8001030 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e2dd      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018a4:	4b20      	ldr	r3, [pc, #128]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f0      	bne.n	8001892 <HAL_RCC_OscConfig+0x1da>
 80018b0:	e000      	b.n	80018b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d074      	beq.n	80019aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d005      	beq.n	80018d2 <HAL_RCC_OscConfig+0x21a>
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2b0c      	cmp	r3, #12
 80018ca:	d10e      	bne.n	80018ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d10b      	bne.n	80018ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d064      	beq.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d160      	bne.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e2ba      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x24a>
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e026      	b.n	8001950 <HAL_RCC_OscConfig+0x298>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800190a:	d115      	bne.n	8001938 <HAL_RCC_OscConfig+0x280>
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a05      	ldr	r2, [pc, #20]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001912:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a02      	ldr	r2, [pc, #8]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800191e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	e014      	b.n	8001950 <HAL_RCC_OscConfig+0x298>
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	08004c8c 	.word	0x08004c8c
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004
 8001938:	4ba0      	ldr	r3, [pc, #640]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a9f      	ldr	r2, [pc, #636]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b9d      	ldr	r3, [pc, #628]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a9c      	ldr	r2, [pc, #624]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fb6a 	bl	8001030 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fb66 	bl	8001030 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	@ 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e276      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001972:	4b92      	ldr	r3, [pc, #584]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x2a8>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fb56 	bl	8001030 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fb52 	bl	8001030 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	@ 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e262      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800199a:	4b88      	ldr	r3, [pc, #544]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x2d0>
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d060      	beq.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_OscConfig+0x310>
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d119      	bne.n	80019f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d116      	bne.n	80019f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c8:	4b7c      	ldr	r3, [pc, #496]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_OscConfig+0x328>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e23f      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e0:	4b76      	ldr	r3, [pc, #472]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	061b      	lsls	r3, r3, #24
 80019ee:	4973      	ldr	r1, [pc, #460]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f4:	e040      	b.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d023      	beq.n	8001a46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019fe:	4b6f      	ldr	r3, [pc, #444]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6e      	ldr	r2, [pc, #440]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fb11 	bl	8001030 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff fb0d 	bl	8001030 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e21d      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a24:	4b65      	ldr	r3, [pc, #404]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b62      	ldr	r3, [pc, #392]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	495f      	ldr	r1, [pc, #380]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
 8001a44:	e018      	b.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a46:	4b5d      	ldr	r3, [pc, #372]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a5c      	ldr	r2, [pc, #368]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7ff faed 	bl	8001030 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fae9 	bl	8001030 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1f9      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a6c:	4b53      	ldr	r3, [pc, #332]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f0      	bne.n	8001a5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d03c      	beq.n	8001afe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a92:	4a4a      	ldr	r2, [pc, #296]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fac8 	bl	8001030 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fac4 	bl	8001030 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e1d4      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab6:	4b41      	ldr	r3, [pc, #260]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0ef      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x3ec>
 8001ac4:	e01b      	b.n	8001afe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001acc:	4a3b      	ldr	r2, [pc, #236]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad6:	f7ff faab 	bl	8001030 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ade:	f7ff faa7 	bl	8001030 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e1b7      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af0:	4b32      	ldr	r3, [pc, #200]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1ef      	bne.n	8001ade <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80a6 	beq.w	8001c58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b10:	4b2a      	ldr	r3, [pc, #168]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10d      	bne.n	8001b38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1c:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b20:	4a26      	ldr	r2, [pc, #152]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b28:	4b24      	ldr	r3, [pc, #144]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b34:	2301      	movs	r3, #1
 8001b36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b38:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <HAL_RCC_OscConfig+0x508>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d118      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b44:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc0 <HAL_RCC_OscConfig+0x508>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc0 <HAL_RCC_OscConfig+0x508>)
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b50:	f7ff fa6e 	bl	8001030 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b58:	f7ff fa6a 	bl	8001030 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e17a      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_RCC_OscConfig+0x508>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d108      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4d8>
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b84:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b8e:	e029      	b.n	8001be4 <HAL_RCC_OscConfig+0x52c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d115      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x50c>
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b9e:	4a07      	ldr	r2, [pc, #28]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bae:	4a03      	ldr	r2, [pc, #12]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bb8:	e014      	b.n	8001be4 <HAL_RCC_OscConfig+0x52c>
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	4b9c      	ldr	r3, [pc, #624]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bca:	4a9b      	ldr	r2, [pc, #620]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bd4:	4b98      	ldr	r3, [pc, #608]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bda:	4a97      	ldr	r2, [pc, #604]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001bdc:	f023 0304 	bic.w	r3, r3, #4
 8001be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d016      	beq.n	8001c1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7ff fa20 	bl	8001030 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fa1c 	bl	8001030 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e12a      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0a:	4b8b      	ldr	r3, [pc, #556]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0ed      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x53c>
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fa09 	bl	8001030 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7ff fa05 	bl	8001030 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e113      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c38:	4b7f      	ldr	r3, [pc, #508]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ed      	bne.n	8001c22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c46:	7ffb      	ldrb	r3, [r7, #31]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c50:	4a79      	ldr	r2, [pc, #484]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c56:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80fe 	beq.w	8001e5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	f040 80d0 	bne.w	8001e0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c6c:	4b72      	ldr	r3, [pc, #456]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0203 	and.w	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d130      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d127      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d11f      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cac:	2a07      	cmp	r2, #7
 8001cae:	bf14      	ite	ne
 8001cb0:	2201      	movne	r2, #1
 8001cb2:	2200      	moveq	r2, #0
 8001cb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d113      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d109      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d06e      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	d069      	beq.n	8001dbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ce8:	4b53      	ldr	r3, [pc, #332]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d105      	bne.n	8001d00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cf4:	4b50      	ldr	r3, [pc, #320]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0ad      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d04:	4b4c      	ldr	r3, [pc, #304]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a4b      	ldr	r2, [pc, #300]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d10:	f7ff f98e 	bl	8001030 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f98a 	bl	8001030 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e09a      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2a:	4b43      	ldr	r3, [pc, #268]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d36:	4b40      	ldr	r3, [pc, #256]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	4b40      	ldr	r3, [pc, #256]	@ (8001e3c <HAL_RCC_OscConfig+0x784>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d46:	3a01      	subs	r2, #1
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	4311      	orrs	r1, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d50:	0212      	lsls	r2, r2, #8
 8001d52:	4311      	orrs	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d58:	0852      	lsrs	r2, r2, #1
 8001d5a:	3a01      	subs	r2, #1
 8001d5c:	0552      	lsls	r2, r2, #21
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d64:	0852      	lsrs	r2, r2, #1
 8001d66:	3a01      	subs	r2, #1
 8001d68:	0652      	lsls	r2, r2, #25
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d70:	0912      	lsrs	r2, r2, #4
 8001d72:	0452      	lsls	r2, r2, #17
 8001d74:	430a      	orrs	r2, r1
 8001d76:	4930      	ldr	r1, [pc, #192]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2d      	ldr	r2, [pc, #180]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d88:	4b2b      	ldr	r3, [pc, #172]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d94:	f7ff f94c 	bl	8001030 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff f948 	bl	8001030 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e058      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dae:	4b22      	ldr	r3, [pc, #136]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dba:	e050      	b.n	8001e5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e04f      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d148      	bne.n	8001e5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a19      	ldr	r2, [pc, #100]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dd8:	4b17      	ldr	r3, [pc, #92]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a16      	ldr	r2, [pc, #88]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001dde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001de2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001de4:	f7ff f924 	bl	8001030 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff f920 	bl	8001030 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e030      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x734>
 8001e0a:	e028      	b.n	8001e5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d023      	beq.n	8001e5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a08      	ldr	r2, [pc, #32]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001e18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7ff f907 	bl	8001030 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e24:	e00c      	b.n	8001e40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7ff f903 	bl	8001030 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d905      	bls.n	8001e40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e013      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e40:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <HAL_RCC_OscConfig+0x7b0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ec      	bne.n	8001e26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_RCC_OscConfig+0x7b0>)
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	4905      	ldr	r1, [pc, #20]	@ (8001e68 <HAL_RCC_OscConfig+0x7b0>)
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_RCC_OscConfig+0x7b4>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
 8001e58:	e001      	b.n	8001e5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	feeefffc 	.word	0xfeeefffc

08001e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0e7      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e84:	4b75      	ldr	r3, [pc, #468]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d910      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b72      	ldr	r3, [pc, #456]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 0207 	bic.w	r2, r3, #7
 8001e9a:	4970      	ldr	r1, [pc, #448]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b6e      	ldr	r3, [pc, #440]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0cf      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d010      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	4b66      	ldr	r3, [pc, #408]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d908      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b63      	ldr	r3, [pc, #396]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4960      	ldr	r1, [pc, #384]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d04c      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	4b5a      	ldr	r3, [pc, #360]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d121      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0a6      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0e:	4b54      	ldr	r3, [pc, #336]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d115      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e09a      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f26:	4b4e      	ldr	r3, [pc, #312]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e08e      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f36:	4b4a      	ldr	r3, [pc, #296]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e086      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f46:	4b46      	ldr	r3, [pc, #280]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f023 0203 	bic.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4943      	ldr	r1, [pc, #268]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f58:	f7ff f86a 	bl	8001030 <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f60:	f7ff f866 	bl	8001030 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e06e      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	4b3a      	ldr	r3, [pc, #232]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 020c 	and.w	r2, r3, #12
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1eb      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d010      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	4b31      	ldr	r3, [pc, #196]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d208      	bcs.n	8001fb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	492b      	ldr	r1, [pc, #172]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb6:	4b29      	ldr	r3, [pc, #164]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d210      	bcs.n	8001fe6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc4:	4b25      	ldr	r3, [pc, #148]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 0207 	bic.w	r2, r3, #7
 8001fcc:	4923      	ldr	r1, [pc, #140]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd4:	4b21      	ldr	r3, [pc, #132]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e036      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4918      	ldr	r1, [pc, #96]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8002000:	4313      	orrs	r3, r2
 8002002:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4910      	ldr	r1, [pc, #64]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002024:	f000 f824 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	091b      	lsrs	r3, r3, #4
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	490b      	ldr	r1, [pc, #44]	@ (8002064 <HAL_RCC_ClockConfig+0x1f4>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
 8002040:	4a09      	ldr	r2, [pc, #36]	@ (8002068 <HAL_RCC_ClockConfig+0x1f8>)
 8002042:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002044:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_RCC_ClockConfig+0x1fc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe ffa1 	bl	8000f90 <HAL_InitTick>
 800204e:	4603      	mov	r3, r0
 8002050:	72fb      	strb	r3, [r7, #11]

  return status;
 8002052:	7afb      	ldrb	r3, [r7, #11]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40022000 	.word	0x40022000
 8002060:	40021000 	.word	0x40021000
 8002064:	08004c8c 	.word	0x08004c8c
 8002068:	20000000 	.word	0x20000000
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207e:	4b3e      	ldr	r3, [pc, #248]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002088:	4b3b      	ldr	r3, [pc, #236]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d121      	bne.n	80020e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d11e      	bne.n	80020e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020a4:	4b34      	ldr	r3, [pc, #208]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020b0:	4b31      	ldr	r3, [pc, #196]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e005      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020cc:	4a2b      	ldr	r2, [pc, #172]	@ (800217c <HAL_RCC_GetSysClockFreq+0x10c>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10d      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d102      	bne.n	80020ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x110>)
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	e004      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020f4:	4b23      	ldr	r3, [pc, #140]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x114>)
 80020f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	d134      	bne.n	8002168 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d003      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0xa6>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d003      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0xac>
 8002114:	e005      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002116:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x110>)
 8002118:	617b      	str	r3, [r7, #20]
      break;
 800211a:	e005      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800211c:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x114>)
 800211e:	617b      	str	r3, [r7, #20]
      break;
 8002120:	e002      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	617b      	str	r3, [r7, #20]
      break;
 8002126:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002128:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	3301      	adds	r3, #1
 8002134:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	fb03 f202 	mul.w	r2, r3, r2
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	0e5b      	lsrs	r3, r3, #25
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	3301      	adds	r3, #1
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002168:	69bb      	ldr	r3, [r7, #24]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	@ 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	08004ca4 	.word	0x08004ca4
 8002180:	00f42400 	.word	0x00f42400
 8002184:	007a1200 	.word	0x007a1200

08002188 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b03      	ldr	r3, [pc, #12]	@ (800219c <HAL_RCC_GetHCLKFreq+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000000 	.word	0x20000000

080021a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021a4:	f7ff fff0 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	4904      	ldr	r1, [pc, #16]	@ (80021c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08004c9c 	.word	0x08004c9c

080021cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021d0:	f7ff ffda 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	0adb      	lsrs	r3, r3, #11
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	4904      	ldr	r1, [pc, #16]	@ (80021f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021e2:	5ccb      	ldrb	r3, [r1, r3]
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08004c9c 	.word	0x08004c9c

080021f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002204:	4b2a      	ldr	r3, [pc, #168]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002210:	f7ff f9ee 	bl	80015f0 <HAL_PWREx_GetVoltageRange>
 8002214:	6178      	str	r0, [r7, #20]
 8002216:	e014      	b.n	8002242 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	4b25      	ldr	r3, [pc, #148]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	4a24      	ldr	r2, [pc, #144]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002222:	6593      	str	r3, [r2, #88]	@ 0x58
 8002224:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002230:	f7ff f9de 	bl	80015f0 <HAL_PWREx_GetVoltageRange>
 8002234:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b1e      	ldr	r3, [pc, #120]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	4a1d      	ldr	r2, [pc, #116]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002240:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002248:	d10b      	bne.n	8002262 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b80      	cmp	r3, #128	@ 0x80
 800224e:	d919      	bls.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2ba0      	cmp	r3, #160	@ 0xa0
 8002254:	d902      	bls.n	800225c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002256:	2302      	movs	r3, #2
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	e013      	b.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800225c:	2301      	movs	r3, #1
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	e010      	b.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b80      	cmp	r3, #128	@ 0x80
 8002266:	d902      	bls.n	800226e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002268:	2303      	movs	r3, #3
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	e00a      	b.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b80      	cmp	r3, #128	@ 0x80
 8002272:	d102      	bne.n	800227a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002274:	2302      	movs	r3, #2
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	e004      	b.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b70      	cmp	r3, #112	@ 0x70
 800227e:	d101      	bne.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002280:	2301      	movs	r3, #1
 8002282:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 0207 	bic.w	r2, r3, #7
 800228c:	4909      	ldr	r1, [pc, #36]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002294:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d001      	beq.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40022000 	.word	0x40022000

080022b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022c0:	2300      	movs	r3, #0
 80022c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022c4:	2300      	movs	r3, #0
 80022c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d041      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022dc:	d02a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022e2:	d824      	bhi.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022e8:	d008      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022ee:	d81e      	bhi.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022f8:	d010      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022fa:	e018      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022fc:	4b86      	ldr	r3, [pc, #536]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a85      	ldr	r2, [pc, #532]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002306:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002308:	e015      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fabb 	bl	800288c <RCCEx_PLLSAI1_Config>
 8002316:	4603      	mov	r3, r0
 8002318:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800231a:	e00c      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3320      	adds	r3, #32
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fba6 	bl	8002a74 <RCCEx_PLLSAI2_Config>
 8002328:	4603      	mov	r3, r0
 800232a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800232c:	e003      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	74fb      	strb	r3, [r7, #19]
      break;
 8002332:	e000      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10b      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800233c:	4b76      	ldr	r3, [pc, #472]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002342:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800234a:	4973      	ldr	r1, [pc, #460]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002352:	e001      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d041      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002368:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800236c:	d02a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800236e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002372:	d824      	bhi.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002374:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002378:	d008      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800237a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800237e:	d81e      	bhi.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002388:	d010      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800238a:	e018      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800238c:	4b62      	ldr	r3, [pc, #392]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a61      	ldr	r2, [pc, #388]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002396:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002398:	e015      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3304      	adds	r3, #4
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fa73 	bl	800288c <RCCEx_PLLSAI1_Config>
 80023a6:	4603      	mov	r3, r0
 80023a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023aa:	e00c      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3320      	adds	r3, #32
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fb5e 	bl	8002a74 <RCCEx_PLLSAI2_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023bc:	e003      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	74fb      	strb	r3, [r7, #19]
      break;
 80023c2:	e000      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023cc:	4b52      	ldr	r3, [pc, #328]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023da:	494f      	ldr	r1, [pc, #316]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023e2:	e001      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80a0 	beq.w	8002536 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023fa:	4b47      	ldr	r3, [pc, #284]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00d      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	4b41      	ldr	r3, [pc, #260]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	4a40      	ldr	r2, [pc, #256]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800241a:	6593      	str	r3, [r2, #88]	@ 0x58
 800241c:	4b3e      	ldr	r3, [pc, #248]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002428:	2301      	movs	r3, #1
 800242a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800242c:	4b3b      	ldr	r3, [pc, #236]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a3a      	ldr	r2, [pc, #232]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002436:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002438:	f7fe fdfa 	bl	8001030 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800243e:	e009      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002440:	f7fe fdf6 	bl	8001030 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d902      	bls.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	74fb      	strb	r3, [r7, #19]
        break;
 8002452:	e005      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002454:	4b31      	ldr	r3, [pc, #196]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ef      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d15c      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002466:	4b2c      	ldr	r3, [pc, #176]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002470:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01f      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	d019      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002484:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800248e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002490:	4b21      	ldr	r3, [pc, #132]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002496:	4a20      	ldr	r2, [pc, #128]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800249c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024b0:	4a19      	ldr	r2, [pc, #100]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d016      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7fe fdb5 	bl	8001030 <HAL_GetTick>
 80024c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c8:	e00b      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe fdb1 	bl	8001030 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d902      	bls.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	74fb      	strb	r3, [r7, #19]
            break;
 80024e0:	e006      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ec      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10c      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024f6:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002506:	4904      	ldr	r1, [pc, #16]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800250e:	e009      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	74bb      	strb	r3, [r7, #18]
 8002514:	e006      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002524:	7c7b      	ldrb	r3, [r7, #17]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d105      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252a:	4b9e      	ldr	r3, [pc, #632]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	4a9d      	ldr	r2, [pc, #628]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002534:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002542:	4b98      	ldr	r3, [pc, #608]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002548:	f023 0203 	bic.w	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002550:	4994      	ldr	r1, [pc, #592]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00a      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002564:	4b8f      	ldr	r3, [pc, #572]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256a:	f023 020c 	bic.w	r2, r3, #12
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002572:	498c      	ldr	r1, [pc, #560]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002586:	4b87      	ldr	r3, [pc, #540]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	4983      	ldr	r1, [pc, #524]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00a      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025a8:	4b7e      	ldr	r3, [pc, #504]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	497b      	ldr	r1, [pc, #492]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ca:	4b76      	ldr	r3, [pc, #472]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d8:	4972      	ldr	r1, [pc, #456]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025ec:	4b6d      	ldr	r3, [pc, #436]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	496a      	ldr	r1, [pc, #424]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800260e:	4b65      	ldr	r3, [pc, #404]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002614:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261c:	4961      	ldr	r1, [pc, #388]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002630:	4b5c      	ldr	r3, [pc, #368]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002636:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263e:	4959      	ldr	r1, [pc, #356]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002652:	4b54      	ldr	r3, [pc, #336]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002658:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002660:	4950      	ldr	r1, [pc, #320]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002674:	4b4b      	ldr	r3, [pc, #300]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002682:	4948      	ldr	r1, [pc, #288]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002696:	4b43      	ldr	r3, [pc, #268]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a4:	493f      	ldr	r1, [pc, #252]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d028      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026b8:	4b3a      	ldr	r3, [pc, #232]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026c6:	4937      	ldr	r1, [pc, #220]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026d6:	d106      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d8:	4b32      	ldr	r3, [pc, #200]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a31      	ldr	r2, [pc, #196]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026e2:	60d3      	str	r3, [r2, #12]
 80026e4:	e011      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026ee:	d10c      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3304      	adds	r3, #4
 80026f4:	2101      	movs	r1, #1
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f8c8 	bl	800288c <RCCEx_PLLSAI1_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d028      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002716:	4b23      	ldr	r3, [pc, #140]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	491f      	ldr	r1, [pc, #124]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002734:	d106      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002736:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	4a1a      	ldr	r2, [pc, #104]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002740:	60d3      	str	r3, [r2, #12]
 8002742:	e011      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800274c:	d10c      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	2101      	movs	r1, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f899 	bl	800288c <RCCEx_PLLSAI1_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800275e:	7cfb      	ldrb	r3, [r7, #19]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d02b      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002782:	4908      	ldr	r1, [pc, #32]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002792:	d109      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002794:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a02      	ldr	r2, [pc, #8]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800279e:	60d3      	str	r3, [r2, #12]
 80027a0:	e014      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2101      	movs	r1, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f867 	bl	800288c <RCCEx_PLLSAI1_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d02f      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027e6:	4928      	ldr	r1, [pc, #160]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027f6:	d10d      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3304      	adds	r3, #4
 80027fc:	2102      	movs	r1, #2
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f844 	bl	800288c <RCCEx_PLLSAI1_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d014      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800280e:	7cfb      	ldrb	r3, [r7, #19]
 8002810:	74bb      	strb	r3, [r7, #18]
 8002812:	e011      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800281c:	d10c      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3320      	adds	r3, #32
 8002822:	2102      	movs	r1, #2
 8002824:	4618      	mov	r0, r3
 8002826:	f000 f925 	bl	8002a74 <RCCEx_PLLSAI2_Config>
 800282a:	4603      	mov	r3, r0
 800282c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800282e:	7cfb      	ldrb	r3, [r7, #19]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002852:	490d      	ldr	r1, [pc, #52]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002866:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002876:	4904      	ldr	r1, [pc, #16]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800287e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000

0800288c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800289a:	4b75      	ldr	r3, [pc, #468]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d018      	beq.n	80028d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028a6:	4b72      	ldr	r3, [pc, #456]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0203 	and.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d10d      	bne.n	80028d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
       ||
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028be:	4b6c      	ldr	r3, [pc, #432]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
       ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d047      	beq.n	8002962 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	e044      	b.n	8002962 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d018      	beq.n	8002912 <RCCEx_PLLSAI1_Config+0x86>
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d825      	bhi.n	8002930 <RCCEx_PLLSAI1_Config+0xa4>
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d002      	beq.n	80028ee <RCCEx_PLLSAI1_Config+0x62>
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d009      	beq.n	8002900 <RCCEx_PLLSAI1_Config+0x74>
 80028ec:	e020      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ee:	4b60      	ldr	r3, [pc, #384]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d11d      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fe:	e01a      	b.n	8002936 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002900:	4b5b      	ldr	r3, [pc, #364]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d116      	bne.n	800293a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002910:	e013      	b.n	800293a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002912:	4b57      	ldr	r3, [pc, #348]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800291e:	4b54      	ldr	r3, [pc, #336]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800292e:	e006      	b.n	800293e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      break;
 8002934:	e004      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002936:	bf00      	nop
 8002938:	e002      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800293a:	bf00      	nop
 800293c:	e000      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800293e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002946:	4b4a      	ldr	r3, [pc, #296]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	430b      	orrs	r3, r1
 800295c:	4944      	ldr	r1, [pc, #272]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d17d      	bne.n	8002a64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002968:	4b41      	ldr	r3, [pc, #260]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a40      	ldr	r2, [pc, #256]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002974:	f7fe fb5c 	bl	8001030 <HAL_GetTick>
 8002978:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800297a:	e009      	b.n	8002990 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800297c:	f7fe fb58 	bl	8001030 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d902      	bls.n	8002990 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	73fb      	strb	r3, [r7, #15]
        break;
 800298e:	e005      	b.n	800299c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002990:	4b37      	ldr	r3, [pc, #220]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ef      	bne.n	800297c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d160      	bne.n	8002a64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d111      	bne.n	80029cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a8:	4b31      	ldr	r3, [pc, #196]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80029b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6892      	ldr	r2, [r2, #8]
 80029b8:	0211      	lsls	r1, r2, #8
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68d2      	ldr	r2, [r2, #12]
 80029be:	0912      	lsrs	r2, r2, #4
 80029c0:	0452      	lsls	r2, r2, #17
 80029c2:	430a      	orrs	r2, r1
 80029c4:	492a      	ldr	r1, [pc, #168]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	610b      	str	r3, [r1, #16]
 80029ca:	e027      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d112      	bne.n	80029f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029d2:	4b27      	ldr	r3, [pc, #156]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80029da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6892      	ldr	r2, [r2, #8]
 80029e2:	0211      	lsls	r1, r2, #8
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6912      	ldr	r2, [r2, #16]
 80029e8:	0852      	lsrs	r2, r2, #1
 80029ea:	3a01      	subs	r2, #1
 80029ec:	0552      	lsls	r2, r2, #21
 80029ee:	430a      	orrs	r2, r1
 80029f0:	491f      	ldr	r1, [pc, #124]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	610b      	str	r3, [r1, #16]
 80029f6:	e011      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6892      	ldr	r2, [r2, #8]
 8002a08:	0211      	lsls	r1, r2, #8
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6952      	ldr	r2, [r2, #20]
 8002a0e:	0852      	lsrs	r2, r2, #1
 8002a10:	3a01      	subs	r2, #1
 8002a12:	0652      	lsls	r2, r2, #25
 8002a14:	430a      	orrs	r2, r1
 8002a16:	4916      	ldr	r1, [pc, #88]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a1c:	4b14      	ldr	r3, [pc, #80]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a13      	ldr	r2, [pc, #76]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe fb02 	bl	8001030 <HAL_GetTick>
 8002a2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a2e:	e009      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a30:	f7fe fafe 	bl	8001030 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d902      	bls.n	8002a44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	73fb      	strb	r3, [r7, #15]
          break;
 8002a42:	e005      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a44:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ef      	beq.n	8002a30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	4904      	ldr	r1, [pc, #16]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000

08002a74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a82:	4b6a      	ldr	r3, [pc, #424]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d018      	beq.n	8002ac0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a8e:	4b67      	ldr	r3, [pc, #412]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0203 	and.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d10d      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
       ||
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002aa6:	4b61      	ldr	r3, [pc, #388]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d047      	beq.n	8002b4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
 8002abe:	e044      	b.n	8002b4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d018      	beq.n	8002afa <RCCEx_PLLSAI2_Config+0x86>
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d825      	bhi.n	8002b18 <RCCEx_PLLSAI2_Config+0xa4>
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d002      	beq.n	8002ad6 <RCCEx_PLLSAI2_Config+0x62>
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d009      	beq.n	8002ae8 <RCCEx_PLLSAI2_Config+0x74>
 8002ad4:	e020      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ad6:	4b55      	ldr	r3, [pc, #340]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11d      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae6:	e01a      	b.n	8002b1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ae8:	4b50      	ldr	r3, [pc, #320]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d116      	bne.n	8002b22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af8:	e013      	b.n	8002b22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002afa:	4b4c      	ldr	r3, [pc, #304]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10f      	bne.n	8002b26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b06:	4b49      	ldr	r3, [pc, #292]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b16:	e006      	b.n	8002b26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1c:	e004      	b.n	8002b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e002      	b.n	8002b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b22:	bf00      	nop
 8002b24:	e000      	b.n	8002b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10d      	bne.n	8002b4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	430b      	orrs	r3, r1
 8002b44:	4939      	ldr	r1, [pc, #228]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d167      	bne.n	8002c20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b50:	4b36      	ldr	r3, [pc, #216]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a35      	ldr	r2, [pc, #212]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fa68 	bl	8001030 <HAL_GetTick>
 8002b60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b62:	e009      	b.n	8002b78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b64:	f7fe fa64 	bl	8001030 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d902      	bls.n	8002b78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	73fb      	strb	r3, [r7, #15]
        break;
 8002b76:	e005      	b.n	8002b84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b78:	4b2c      	ldr	r3, [pc, #176]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1ef      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d14a      	bne.n	8002c20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d111      	bne.n	8002bb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b90:	4b26      	ldr	r3, [pc, #152]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6892      	ldr	r2, [r2, #8]
 8002ba0:	0211      	lsls	r1, r2, #8
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68d2      	ldr	r2, [r2, #12]
 8002ba6:	0912      	lsrs	r2, r2, #4
 8002ba8:	0452      	lsls	r2, r2, #17
 8002baa:	430a      	orrs	r2, r1
 8002bac:	491f      	ldr	r1, [pc, #124]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	614b      	str	r3, [r1, #20]
 8002bb2:	e011      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6892      	ldr	r2, [r2, #8]
 8002bc4:	0211      	lsls	r1, r2, #8
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6912      	ldr	r2, [r2, #16]
 8002bca:	0852      	lsrs	r2, r2, #1
 8002bcc:	3a01      	subs	r2, #1
 8002bce:	0652      	lsls	r2, r2, #25
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	4916      	ldr	r1, [pc, #88]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bd8:	4b14      	ldr	r3, [pc, #80]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a13      	ldr	r2, [pc, #76]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7fe fa24 	bl	8001030 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bea:	e009      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bec:	f7fe fa20 	bl	8001030 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d902      	bls.n	8002c00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	73fb      	strb	r3, [r7, #15]
          break;
 8002bfe:	e005      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c00:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ef      	beq.n	8002bec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	4904      	ldr	r1, [pc, #16]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000

08002c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e049      	b.n	8002cd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe f82e 	bl	8000cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f000 fd60 	bl	8003734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d001      	beq.n	8002cf8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e047      	b.n	8002d88 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a23      	ldr	r2, [pc, #140]	@ (8002d94 <HAL_TIM_Base_Start+0xb4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01d      	beq.n	8002d46 <HAL_TIM_Base_Start+0x66>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d12:	d018      	beq.n	8002d46 <HAL_TIM_Base_Start+0x66>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1f      	ldr	r2, [pc, #124]	@ (8002d98 <HAL_TIM_Base_Start+0xb8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_TIM_Base_Start+0x66>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1e      	ldr	r2, [pc, #120]	@ (8002d9c <HAL_TIM_Base_Start+0xbc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00e      	beq.n	8002d46 <HAL_TIM_Base_Start+0x66>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8002da0 <HAL_TIM_Base_Start+0xc0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d009      	beq.n	8002d46 <HAL_TIM_Base_Start+0x66>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1b      	ldr	r2, [pc, #108]	@ (8002da4 <HAL_TIM_Base_Start+0xc4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d004      	beq.n	8002d46 <HAL_TIM_Base_Start+0x66>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a19      	ldr	r2, [pc, #100]	@ (8002da8 <HAL_TIM_Base_Start+0xc8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d115      	bne.n	8002d72 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	4b17      	ldr	r3, [pc, #92]	@ (8002dac <HAL_TIM_Base_Start+0xcc>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d015      	beq.n	8002d84 <HAL_TIM_Base_Start+0xa4>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d5e:	d011      	beq.n	8002d84 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d70:	e008      	b.n	8002d84 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0201 	orr.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e000      	b.n	8002d86 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40000800 	.word	0x40000800
 8002da0:	40000c00 	.word	0x40000c00
 8002da4:	40013400 	.word	0x40013400
 8002da8:	40014000 	.word	0x40014000
 8002dac:	00010007 	.word	0x00010007

08002db0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e049      	b.n	8002e56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd ffb0 	bl	8000d3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3304      	adds	r3, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f000 fca0 	bl	8003734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	6839      	ldr	r1, [r7, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 f8e0 	bl	8004038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a3e      	ldr	r2, [pc, #248]	@ (8002f78 <HAL_TIM_PWM_Stop+0x118>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_TIM_PWM_Stop+0x4a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a3d      	ldr	r2, [pc, #244]	@ (8002f7c <HAL_TIM_PWM_Stop+0x11c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00e      	beq.n	8002eaa <HAL_TIM_PWM_Stop+0x4a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a3b      	ldr	r2, [pc, #236]	@ (8002f80 <HAL_TIM_PWM_Stop+0x120>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_TIM_PWM_Stop+0x4a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a3a      	ldr	r2, [pc, #232]	@ (8002f84 <HAL_TIM_PWM_Stop+0x124>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d004      	beq.n	8002eaa <HAL_TIM_PWM_Stop+0x4a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a38      	ldr	r2, [pc, #224]	@ (8002f88 <HAL_TIM_PWM_Stop+0x128>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <HAL_TIM_PWM_Stop+0x4e>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_TIM_PWM_Stop+0x50>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d017      	beq.n	8002ee4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10f      	bne.n	8002ee4 <HAL_TIM_PWM_Stop+0x84>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a1a      	ldr	r2, [r3, #32]
 8002eca:	f240 4344 	movw	r3, #1092	@ 0x444
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d107      	bne.n	8002ee4 <HAL_TIM_PWM_Stop+0x84>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ee2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6a1a      	ldr	r2, [r3, #32]
 8002eea:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10f      	bne.n	8002f14 <HAL_TIM_PWM_Stop+0xb4>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a1a      	ldr	r2, [r3, #32]
 8002efa:	f240 4344 	movw	r3, #1092	@ 0x444
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d107      	bne.n	8002f14 <HAL_TIM_PWM_Stop+0xb4>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <HAL_TIM_PWM_Stop+0xc4>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f22:	e023      	b.n	8002f6c <HAL_TIM_PWM_Stop+0x10c>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d104      	bne.n	8002f34 <HAL_TIM_PWM_Stop+0xd4>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f32:	e01b      	b.n	8002f6c <HAL_TIM_PWM_Stop+0x10c>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d104      	bne.n	8002f44 <HAL_TIM_PWM_Stop+0xe4>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f42:	e013      	b.n	8002f6c <HAL_TIM_PWM_Stop+0x10c>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b0c      	cmp	r3, #12
 8002f48:	d104      	bne.n	8002f54 <HAL_TIM_PWM_Stop+0xf4>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f52:	e00b      	b.n	8002f6c <HAL_TIM_PWM_Stop+0x10c>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d104      	bne.n	8002f64 <HAL_TIM_PWM_Stop+0x104>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f62:	e003      	b.n	8002f6c <HAL_TIM_PWM_Stop+0x10c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40013400 	.word	0x40013400
 8002f80:	40014000 	.word	0x40014000
 8002f84:	40014400 	.word	0x40014400
 8002f88:	40014800 	.word	0x40014800

08002f8c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <HAL_TIM_PWM_Start_IT+0x28>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	e03c      	b.n	800302e <HAL_TIM_PWM_Start_IT+0xa2>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d109      	bne.n	8002fce <HAL_TIM_PWM_Start_IT+0x42>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	bf14      	ite	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	2300      	moveq	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	e02f      	b.n	800302e <HAL_TIM_PWM_Start_IT+0xa2>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d109      	bne.n	8002fe8 <HAL_TIM_PWM_Start_IT+0x5c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e022      	b.n	800302e <HAL_TIM_PWM_Start_IT+0xa2>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	d109      	bne.n	8003002 <HAL_TIM_PWM_Start_IT+0x76>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	e015      	b.n	800302e <HAL_TIM_PWM_Start_IT+0xa2>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b10      	cmp	r3, #16
 8003006:	d109      	bne.n	800301c <HAL_TIM_PWM_Start_IT+0x90>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	bf14      	ite	ne
 8003014:	2301      	movne	r3, #1
 8003016:	2300      	moveq	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e008      	b.n	800302e <HAL_TIM_PWM_Start_IT+0xa2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0e7      	b.n	8003206 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d104      	bne.n	8003046 <HAL_TIM_PWM_Start_IT+0xba>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003044:	e023      	b.n	800308e <HAL_TIM_PWM_Start_IT+0x102>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d104      	bne.n	8003056 <HAL_TIM_PWM_Start_IT+0xca>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003054:	e01b      	b.n	800308e <HAL_TIM_PWM_Start_IT+0x102>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d104      	bne.n	8003066 <HAL_TIM_PWM_Start_IT+0xda>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003064:	e013      	b.n	800308e <HAL_TIM_PWM_Start_IT+0x102>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	d104      	bne.n	8003076 <HAL_TIM_PWM_Start_IT+0xea>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003074:	e00b      	b.n	800308e <HAL_TIM_PWM_Start_IT+0x102>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b10      	cmp	r3, #16
 800307a:	d104      	bne.n	8003086 <HAL_TIM_PWM_Start_IT+0xfa>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003084:	e003      	b.n	800308e <HAL_TIM_PWM_Start_IT+0x102>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b0c      	cmp	r3, #12
 8003092:	d841      	bhi.n	8003118 <HAL_TIM_PWM_Start_IT+0x18c>
 8003094:	a201      	add	r2, pc, #4	@ (adr r2, 800309c <HAL_TIM_PWM_Start_IT+0x110>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030d1 	.word	0x080030d1
 80030a0:	08003119 	.word	0x08003119
 80030a4:	08003119 	.word	0x08003119
 80030a8:	08003119 	.word	0x08003119
 80030ac:	080030e3 	.word	0x080030e3
 80030b0:	08003119 	.word	0x08003119
 80030b4:	08003119 	.word	0x08003119
 80030b8:	08003119 	.word	0x08003119
 80030bc:	080030f5 	.word	0x080030f5
 80030c0:	08003119 	.word	0x08003119
 80030c4:	08003119 	.word	0x08003119
 80030c8:	08003119 	.word	0x08003119
 80030cc:	08003107 	.word	0x08003107
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0202 	orr.w	r2, r2, #2
 80030de:	60da      	str	r2, [r3, #12]
      break;
 80030e0:	e01d      	b.n	800311e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0204 	orr.w	r2, r2, #4
 80030f0:	60da      	str	r2, [r3, #12]
      break;
 80030f2:	e014      	b.n	800311e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0208 	orr.w	r2, r2, #8
 8003102:	60da      	str	r2, [r3, #12]
      break;
 8003104:	e00b      	b.n	800311e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0210 	orr.w	r2, r2, #16
 8003114:	60da      	str	r2, [r3, #12]
      break;
 8003116:	e002      	b.n	800311e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	bf00      	nop
  }

  if (status == HAL_OK)
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d16f      	bne.n	8003204 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2201      	movs	r2, #1
 800312a:	6839      	ldr	r1, [r7, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 ff83 	bl	8004038 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a36      	ldr	r2, [pc, #216]	@ (8003210 <HAL_TIM_PWM_Start_IT+0x284>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_TIM_PWM_Start_IT+0x1d8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a34      	ldr	r2, [pc, #208]	@ (8003214 <HAL_TIM_PWM_Start_IT+0x288>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a33      	ldr	r2, [pc, #204]	@ (8003218 <HAL_TIM_PWM_Start_IT+0x28c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a31      	ldr	r2, [pc, #196]	@ (800321c <HAL_TIM_PWM_Start_IT+0x290>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_TIM_PWM_Start_IT+0x1d8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a30      	ldr	r2, [pc, #192]	@ (8003220 <HAL_TIM_PWM_Start_IT+0x294>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_TIM_PWM_Start_IT+0x1dc>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_TIM_PWM_Start_IT+0x1de>
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a23      	ldr	r2, [pc, #140]	@ (8003210 <HAL_TIM_PWM_Start_IT+0x284>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d01d      	beq.n	80031c4 <HAL_TIM_PWM_Start_IT+0x238>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003190:	d018      	beq.n	80031c4 <HAL_TIM_PWM_Start_IT+0x238>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a23      	ldr	r2, [pc, #140]	@ (8003224 <HAL_TIM_PWM_Start_IT+0x298>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d013      	beq.n	80031c4 <HAL_TIM_PWM_Start_IT+0x238>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a21      	ldr	r2, [pc, #132]	@ (8003228 <HAL_TIM_PWM_Start_IT+0x29c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00e      	beq.n	80031c4 <HAL_TIM_PWM_Start_IT+0x238>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a20      	ldr	r2, [pc, #128]	@ (800322c <HAL_TIM_PWM_Start_IT+0x2a0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_TIM_PWM_Start_IT+0x238>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a17      	ldr	r2, [pc, #92]	@ (8003214 <HAL_TIM_PWM_Start_IT+0x288>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_TIM_PWM_Start_IT+0x238>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <HAL_TIM_PWM_Start_IT+0x28c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d115      	bne.n	80031f0 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	4b19      	ldr	r3, [pc, #100]	@ (8003230 <HAL_TIM_PWM_Start_IT+0x2a4>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d015      	beq.n	8003202 <HAL_TIM_PWM_Start_IT+0x276>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031dc:	d011      	beq.n	8003202 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ee:	e008      	b.n	8003202 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e000      	b.n	8003204 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003202:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40013400 	.word	0x40013400
 8003218:	40014000 	.word	0x40014000
 800321c:	40014400 	.word	0x40014400
 8003220:	40014800 	.word	0x40014800
 8003224:	40000400 	.word	0x40000400
 8003228:	40000800 	.word	0x40000800
 800322c:	40000c00 	.word	0x40000c00
 8003230:	00010007 	.word	0x00010007

08003234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d020      	beq.n	8003298 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01b      	beq.n	8003298 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0202 	mvn.w	r2, #2
 8003268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fa44 	bl	800370c <HAL_TIM_IC_CaptureCallback>
 8003284:	e005      	b.n	8003292 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa36 	bl	80036f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7fd fa5b 	bl	8000748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d020      	beq.n	80032e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01b      	beq.n	80032e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0204 	mvn.w	r2, #4
 80032b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fa1e 	bl	800370c <HAL_TIM_IC_CaptureCallback>
 80032d0:	e005      	b.n	80032de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa10 	bl	80036f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7fd fa35 	bl	8000748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d020      	beq.n	8003330 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01b      	beq.n	8003330 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0208 	mvn.w	r2, #8
 8003300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2204      	movs	r2, #4
 8003306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f9f8 	bl	800370c <HAL_TIM_IC_CaptureCallback>
 800331c:	e005      	b.n	800332a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f9ea 	bl	80036f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7fd fa0f 	bl	8000748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	d020      	beq.n	800337c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01b      	beq.n	800337c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0210 	mvn.w	r2, #16
 800334c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2208      	movs	r2, #8
 8003352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f9d2 	bl	800370c <HAL_TIM_IC_CaptureCallback>
 8003368:	e005      	b.n	8003376 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f9c4 	bl	80036f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7fd f9e9 	bl	8000748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00c      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0201 	mvn.w	r2, #1
 8003398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f9a2 	bl	80036e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fef2 	bl	80041a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00c      	beq.n	80033e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80033e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 feea 	bl	80041bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00c      	beq.n	800340c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f98a 	bl	8003720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00c      	beq.n	8003430 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0220 	mvn.w	r2, #32
 8003428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 feb2 	bl	8004194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003452:	2302      	movs	r3, #2
 8003454:	e0ff      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b14      	cmp	r3, #20
 8003462:	f200 80f0 	bhi.w	8003646 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003466:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346c:	080034c1 	.word	0x080034c1
 8003470:	08003647 	.word	0x08003647
 8003474:	08003647 	.word	0x08003647
 8003478:	08003647 	.word	0x08003647
 800347c:	08003501 	.word	0x08003501
 8003480:	08003647 	.word	0x08003647
 8003484:	08003647 	.word	0x08003647
 8003488:	08003647 	.word	0x08003647
 800348c:	08003543 	.word	0x08003543
 8003490:	08003647 	.word	0x08003647
 8003494:	08003647 	.word	0x08003647
 8003498:	08003647 	.word	0x08003647
 800349c:	08003583 	.word	0x08003583
 80034a0:	08003647 	.word	0x08003647
 80034a4:	08003647 	.word	0x08003647
 80034a8:	08003647 	.word	0x08003647
 80034ac:	080035c5 	.word	0x080035c5
 80034b0:	08003647 	.word	0x08003647
 80034b4:	08003647 	.word	0x08003647
 80034b8:	08003647 	.word	0x08003647
 80034bc:	08003605 	.word	0x08003605
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f9ce 	bl	8003868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0208 	orr.w	r2, r2, #8
 80034da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0204 	bic.w	r2, r2, #4
 80034ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6999      	ldr	r1, [r3, #24]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	619a      	str	r2, [r3, #24]
      break;
 80034fe:	e0a5      	b.n	800364c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fa3e 	bl	8003988 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800351a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800352a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6999      	ldr	r1, [r3, #24]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	021a      	lsls	r2, r3, #8
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	619a      	str	r2, [r3, #24]
      break;
 8003540:	e084      	b.n	800364c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	4618      	mov	r0, r3
 800354a:	f000 faa7 	bl	8003a9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0208 	orr.w	r2, r2, #8
 800355c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0204 	bic.w	r2, r2, #4
 800356c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69d9      	ldr	r1, [r3, #28]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	61da      	str	r2, [r3, #28]
      break;
 8003580:	e064      	b.n	800364c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fb0f 	bl	8003bac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800359c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69d9      	ldr	r1, [r3, #28]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	021a      	lsls	r2, r3, #8
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	61da      	str	r2, [r3, #28]
      break;
 80035c2:	e043      	b.n	800364c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fb58 	bl	8003c80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0208 	orr.w	r2, r2, #8
 80035de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0204 	bic.w	r2, r2, #4
 80035ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003602:	e023      	b.n	800364c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fb9c 	bl	8003d48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800361e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800362e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	021a      	lsls	r2, r3, #8
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003644:	e002      	b.n	800364c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]
      break;
 800364a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003654:	7dfb      	ldrb	r3, [r7, #23]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop

08003660 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003674:	2302      	movs	r3, #2
 8003676:	e031      	b.n	80036dc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003688:	6839      	ldr	r1, [r7, #0]
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fbc2 	bl	8003e14 <TIM_SlaveTimer_SetConfig>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e018      	b.n	80036dc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036b8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036c8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a40      	ldr	r2, [pc, #256]	@ (8003848 <TIM_Base_SetConfig+0x114>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <TIM_Base_SetConfig+0x40>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003752:	d00f      	beq.n	8003774 <TIM_Base_SetConfig+0x40>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3d      	ldr	r2, [pc, #244]	@ (800384c <TIM_Base_SetConfig+0x118>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00b      	beq.n	8003774 <TIM_Base_SetConfig+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3c      	ldr	r2, [pc, #240]	@ (8003850 <TIM_Base_SetConfig+0x11c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d007      	beq.n	8003774 <TIM_Base_SetConfig+0x40>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a3b      	ldr	r2, [pc, #236]	@ (8003854 <TIM_Base_SetConfig+0x120>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d003      	beq.n	8003774 <TIM_Base_SetConfig+0x40>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a3a      	ldr	r2, [pc, #232]	@ (8003858 <TIM_Base_SetConfig+0x124>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d108      	bne.n	8003786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a2f      	ldr	r2, [pc, #188]	@ (8003848 <TIM_Base_SetConfig+0x114>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01f      	beq.n	80037ce <TIM_Base_SetConfig+0x9a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003794:	d01b      	beq.n	80037ce <TIM_Base_SetConfig+0x9a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a2c      	ldr	r2, [pc, #176]	@ (800384c <TIM_Base_SetConfig+0x118>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d017      	beq.n	80037ce <TIM_Base_SetConfig+0x9a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003850 <TIM_Base_SetConfig+0x11c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d013      	beq.n	80037ce <TIM_Base_SetConfig+0x9a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003854 <TIM_Base_SetConfig+0x120>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00f      	beq.n	80037ce <TIM_Base_SetConfig+0x9a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a29      	ldr	r2, [pc, #164]	@ (8003858 <TIM_Base_SetConfig+0x124>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00b      	beq.n	80037ce <TIM_Base_SetConfig+0x9a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a28      	ldr	r2, [pc, #160]	@ (800385c <TIM_Base_SetConfig+0x128>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d007      	beq.n	80037ce <TIM_Base_SetConfig+0x9a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a27      	ldr	r2, [pc, #156]	@ (8003860 <TIM_Base_SetConfig+0x12c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d003      	beq.n	80037ce <TIM_Base_SetConfig+0x9a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a26      	ldr	r2, [pc, #152]	@ (8003864 <TIM_Base_SetConfig+0x130>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d108      	bne.n	80037e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a10      	ldr	r2, [pc, #64]	@ (8003848 <TIM_Base_SetConfig+0x114>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00f      	beq.n	800382c <TIM_Base_SetConfig+0xf8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a12      	ldr	r2, [pc, #72]	@ (8003858 <TIM_Base_SetConfig+0x124>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00b      	beq.n	800382c <TIM_Base_SetConfig+0xf8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a11      	ldr	r2, [pc, #68]	@ (800385c <TIM_Base_SetConfig+0x128>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d007      	beq.n	800382c <TIM_Base_SetConfig+0xf8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a10      	ldr	r2, [pc, #64]	@ (8003860 <TIM_Base_SetConfig+0x12c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <TIM_Base_SetConfig+0xf8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a0f      	ldr	r2, [pc, #60]	@ (8003864 <TIM_Base_SetConfig+0x130>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d103      	bne.n	8003834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	615a      	str	r2, [r3, #20]
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800
 8003854:	40000c00 	.word	0x40000c00
 8003858:	40013400 	.word	0x40013400
 800385c:	40014000 	.word	0x40014000
 8003860:	40014400 	.word	0x40014400
 8003864:	40014800 	.word	0x40014800

08003868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f023 0201 	bic.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0303 	bic.w	r3, r3, #3
 80038a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f023 0302 	bic.w	r3, r3, #2
 80038b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003974 <TIM_OC1_SetConfig+0x10c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00f      	beq.n	80038e8 <TIM_OC1_SetConfig+0x80>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003978 <TIM_OC1_SetConfig+0x110>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <TIM_OC1_SetConfig+0x80>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a2a      	ldr	r2, [pc, #168]	@ (800397c <TIM_OC1_SetConfig+0x114>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_OC1_SetConfig+0x80>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a29      	ldr	r2, [pc, #164]	@ (8003980 <TIM_OC1_SetConfig+0x118>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_OC1_SetConfig+0x80>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a28      	ldr	r2, [pc, #160]	@ (8003984 <TIM_OC1_SetConfig+0x11c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d10c      	bne.n	8003902 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f023 0308 	bic.w	r3, r3, #8
 80038ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1b      	ldr	r2, [pc, #108]	@ (8003974 <TIM_OC1_SetConfig+0x10c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00f      	beq.n	800392a <TIM_OC1_SetConfig+0xc2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1a      	ldr	r2, [pc, #104]	@ (8003978 <TIM_OC1_SetConfig+0x110>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00b      	beq.n	800392a <TIM_OC1_SetConfig+0xc2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a19      	ldr	r2, [pc, #100]	@ (800397c <TIM_OC1_SetConfig+0x114>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <TIM_OC1_SetConfig+0xc2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a18      	ldr	r2, [pc, #96]	@ (8003980 <TIM_OC1_SetConfig+0x118>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_OC1_SetConfig+0xc2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a17      	ldr	r2, [pc, #92]	@ (8003984 <TIM_OC1_SetConfig+0x11c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d111      	bne.n	800394e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	621a      	str	r2, [r3, #32]
}
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	40012c00 	.word	0x40012c00
 8003978:	40013400 	.word	0x40013400
 800397c:	40014000 	.word	0x40014000
 8003980:	40014400 	.word	0x40014400
 8003984:	40014800 	.word	0x40014800

08003988 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f023 0210 	bic.w	r2, r3, #16
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f023 0320 	bic.w	r3, r3, #32
 80039d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a28      	ldr	r2, [pc, #160]	@ (8003a88 <TIM_OC2_SetConfig+0x100>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_OC2_SetConfig+0x6c>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a27      	ldr	r2, [pc, #156]	@ (8003a8c <TIM_OC2_SetConfig+0x104>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d10d      	bne.n	8003a10 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a1d      	ldr	r2, [pc, #116]	@ (8003a88 <TIM_OC2_SetConfig+0x100>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00f      	beq.n	8003a38 <TIM_OC2_SetConfig+0xb0>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a8c <TIM_OC2_SetConfig+0x104>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <TIM_OC2_SetConfig+0xb0>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a1b      	ldr	r2, [pc, #108]	@ (8003a90 <TIM_OC2_SetConfig+0x108>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <TIM_OC2_SetConfig+0xb0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a94 <TIM_OC2_SetConfig+0x10c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_OC2_SetConfig+0xb0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a19      	ldr	r2, [pc, #100]	@ (8003a98 <TIM_OC2_SetConfig+0x110>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d113      	bne.n	8003a60 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40013400 	.word	0x40013400
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40014400 	.word	0x40014400
 8003a98:	40014800 	.word	0x40014800

08003a9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0303 	bic.w	r3, r3, #3
 8003ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a27      	ldr	r2, [pc, #156]	@ (8003b98 <TIM_OC3_SetConfig+0xfc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d003      	beq.n	8003b06 <TIM_OC3_SetConfig+0x6a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a26      	ldr	r2, [pc, #152]	@ (8003b9c <TIM_OC3_SetConfig+0x100>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d10d      	bne.n	8003b22 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a1c      	ldr	r2, [pc, #112]	@ (8003b98 <TIM_OC3_SetConfig+0xfc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00f      	beq.n	8003b4a <TIM_OC3_SetConfig+0xae>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003b9c <TIM_OC3_SetConfig+0x100>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00b      	beq.n	8003b4a <TIM_OC3_SetConfig+0xae>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba0 <TIM_OC3_SetConfig+0x104>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d007      	beq.n	8003b4a <TIM_OC3_SetConfig+0xae>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ba4 <TIM_OC3_SetConfig+0x108>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d003      	beq.n	8003b4a <TIM_OC3_SetConfig+0xae>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a18      	ldr	r2, [pc, #96]	@ (8003ba8 <TIM_OC3_SetConfig+0x10c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d113      	bne.n	8003b72 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	621a      	str	r2, [r3, #32]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40013400 	.word	0x40013400
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40014400 	.word	0x40014400
 8003ba8:	40014800 	.word	0x40014800

08003bac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	031b      	lsls	r3, r3, #12
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a18      	ldr	r2, [pc, #96]	@ (8003c6c <TIM_OC4_SetConfig+0xc0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00f      	beq.n	8003c30 <TIM_OC4_SetConfig+0x84>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a17      	ldr	r2, [pc, #92]	@ (8003c70 <TIM_OC4_SetConfig+0xc4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <TIM_OC4_SetConfig+0x84>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a16      	ldr	r2, [pc, #88]	@ (8003c74 <TIM_OC4_SetConfig+0xc8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_OC4_SetConfig+0x84>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a15      	ldr	r2, [pc, #84]	@ (8003c78 <TIM_OC4_SetConfig+0xcc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_OC4_SetConfig+0x84>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a14      	ldr	r2, [pc, #80]	@ (8003c7c <TIM_OC4_SetConfig+0xd0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d109      	bne.n	8003c44 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	019b      	lsls	r3, r3, #6
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	621a      	str	r2, [r3, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40012c00 	.word	0x40012c00
 8003c70:	40013400 	.word	0x40013400
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40014400 	.word	0x40014400
 8003c7c:	40014800 	.word	0x40014800

08003c80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003cc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a17      	ldr	r2, [pc, #92]	@ (8003d34 <TIM_OC5_SetConfig+0xb4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00f      	beq.n	8003cfa <TIM_OC5_SetConfig+0x7a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a16      	ldr	r2, [pc, #88]	@ (8003d38 <TIM_OC5_SetConfig+0xb8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <TIM_OC5_SetConfig+0x7a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a15      	ldr	r2, [pc, #84]	@ (8003d3c <TIM_OC5_SetConfig+0xbc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d007      	beq.n	8003cfa <TIM_OC5_SetConfig+0x7a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a14      	ldr	r2, [pc, #80]	@ (8003d40 <TIM_OC5_SetConfig+0xc0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_OC5_SetConfig+0x7a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a13      	ldr	r2, [pc, #76]	@ (8003d44 <TIM_OC5_SetConfig+0xc4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d109      	bne.n	8003d0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	621a      	str	r2, [r3, #32]
}
 8003d28:	bf00      	nop
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	40013400 	.word	0x40013400
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40014400 	.word	0x40014400
 8003d44:	40014800 	.word	0x40014800

08003d48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	051b      	lsls	r3, r3, #20
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a18      	ldr	r2, [pc, #96]	@ (8003e00 <TIM_OC6_SetConfig+0xb8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00f      	beq.n	8003dc4 <TIM_OC6_SetConfig+0x7c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a17      	ldr	r2, [pc, #92]	@ (8003e04 <TIM_OC6_SetConfig+0xbc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00b      	beq.n	8003dc4 <TIM_OC6_SetConfig+0x7c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a16      	ldr	r2, [pc, #88]	@ (8003e08 <TIM_OC6_SetConfig+0xc0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d007      	beq.n	8003dc4 <TIM_OC6_SetConfig+0x7c>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a15      	ldr	r2, [pc, #84]	@ (8003e0c <TIM_OC6_SetConfig+0xc4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d003      	beq.n	8003dc4 <TIM_OC6_SetConfig+0x7c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a14      	ldr	r2, [pc, #80]	@ (8003e10 <TIM_OC6_SetConfig+0xc8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d109      	bne.n	8003dd8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	029b      	lsls	r3, r3, #10
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40013400 	.word	0x40013400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800

08003e14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e30:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e42:	f023 0307 	bic.w	r3, r3, #7
 8003e46:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b70      	cmp	r3, #112	@ 0x70
 8003e60:	d01a      	beq.n	8003e98 <TIM_SlaveTimer_SetConfig+0x84>
 8003e62:	2b70      	cmp	r3, #112	@ 0x70
 8003e64:	d860      	bhi.n	8003f28 <TIM_SlaveTimer_SetConfig+0x114>
 8003e66:	2b60      	cmp	r3, #96	@ 0x60
 8003e68:	d054      	beq.n	8003f14 <TIM_SlaveTimer_SetConfig+0x100>
 8003e6a:	2b60      	cmp	r3, #96	@ 0x60
 8003e6c:	d85c      	bhi.n	8003f28 <TIM_SlaveTimer_SetConfig+0x114>
 8003e6e:	2b50      	cmp	r3, #80	@ 0x50
 8003e70:	d046      	beq.n	8003f00 <TIM_SlaveTimer_SetConfig+0xec>
 8003e72:	2b50      	cmp	r3, #80	@ 0x50
 8003e74:	d858      	bhi.n	8003f28 <TIM_SlaveTimer_SetConfig+0x114>
 8003e76:	2b40      	cmp	r3, #64	@ 0x40
 8003e78:	d019      	beq.n	8003eae <TIM_SlaveTimer_SetConfig+0x9a>
 8003e7a:	2b40      	cmp	r3, #64	@ 0x40
 8003e7c:	d854      	bhi.n	8003f28 <TIM_SlaveTimer_SetConfig+0x114>
 8003e7e:	2b30      	cmp	r3, #48	@ 0x30
 8003e80:	d055      	beq.n	8003f2e <TIM_SlaveTimer_SetConfig+0x11a>
 8003e82:	2b30      	cmp	r3, #48	@ 0x30
 8003e84:	d850      	bhi.n	8003f28 <TIM_SlaveTimer_SetConfig+0x114>
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d051      	beq.n	8003f2e <TIM_SlaveTimer_SetConfig+0x11a>
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d84c      	bhi.n	8003f28 <TIM_SlaveTimer_SetConfig+0x114>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d04d      	beq.n	8003f2e <TIM_SlaveTimer_SetConfig+0x11a>
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d04b      	beq.n	8003f2e <TIM_SlaveTimer_SetConfig+0x11a>
 8003e96:	e047      	b.n	8003f28 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003ea8:	f000 f8a6 	bl	8003ff8 <TIM_ETR_SetConfig>
      break;
 8003eac:	e040      	b.n	8003f30 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d101      	bne.n	8003eba <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e03b      	b.n	8003f32 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a1a      	ldr	r2, [r3, #32]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0201 	bic.w	r2, r2, #1
 8003ed0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ee0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	621a      	str	r2, [r3, #32]
      break;
 8003efe:	e017      	b.n	8003f30 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f000 f814 	bl	8003f3a <TIM_TI1_ConfigInputStage>
      break;
 8003f12:	e00d      	b.n	8003f30 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f20:	461a      	mov	r2, r3
 8003f22:	f000 f839 	bl	8003f98 <TIM_TI2_ConfigInputStage>
      break;
 8003f26:	e003      	b.n	8003f30 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f2c:	e000      	b.n	8003f30 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8003f2e:	bf00      	nop
  }

  return status;
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b087      	sub	sp, #28
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	60f8      	str	r0, [r7, #12]
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f023 0201 	bic.w	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f023 030a 	bic.w	r3, r3, #10
 8003f76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	f023 0210 	bic.w	r2, r3, #16
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	031b      	lsls	r3, r3, #12
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	621a      	str	r2, [r3, #32]
}
 8003fec:	bf00      	nop
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	431a      	orrs	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4313      	orrs	r3, r2
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2201      	movs	r2, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1a      	ldr	r2, [r3, #32]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	43db      	mvns	r3, r3
 800405a:	401a      	ands	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004098:	2302      	movs	r3, #2
 800409a:	e068      	b.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a2e      	ldr	r2, [pc, #184]	@ (800417c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d108      	bne.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80040d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1e      	ldr	r2, [pc, #120]	@ (800417c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01d      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800410e:	d018      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1b      	ldr	r2, [pc, #108]	@ (8004184 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1a      	ldr	r2, [pc, #104]	@ (8004188 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a18      	ldr	r2, [pc, #96]	@ (800418c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a13      	ldr	r2, [pc, #76]	@ (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d004      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a14      	ldr	r2, [pc, #80]	@ (8004190 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d10c      	bne.n	800415c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	4313      	orrs	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40013400 	.word	0x40013400
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800
 800418c:	40000c00 	.word	0x40000c00
 8004190:	40014000 	.word	0x40014000

08004194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e040      	b.n	8004264 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fc fe26 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2224      	movs	r2, #36	@ 0x24
 80041fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0201 	bic.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fae0 	bl	80047dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f825 	bl	800426c <UART_SetConfig>
 8004222:	4603      	mov	r3, r0
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e01b      	b.n	8004264 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800423a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800424a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fb5f 	bl	8004920 <UART_CheckIdleState>
 8004262:	4603      	mov	r3, r0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800426c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004270:	b08a      	sub	sp, #40	@ 0x28
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	431a      	orrs	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	431a      	orrs	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	4313      	orrs	r3, r2
 8004292:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4ba4      	ldr	r3, [pc, #656]	@ (800452c <UART_SetConfig+0x2c0>)
 800429c:	4013      	ands	r3, r2
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a99      	ldr	r2, [pc, #612]	@ (8004530 <UART_SetConfig+0x2c4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d4:	4313      	orrs	r3, r2
 80042d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e8:	430a      	orrs	r2, r1
 80042ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a90      	ldr	r2, [pc, #576]	@ (8004534 <UART_SetConfig+0x2c8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d126      	bne.n	8004344 <UART_SetConfig+0xd8>
 80042f6:	4b90      	ldr	r3, [pc, #576]	@ (8004538 <UART_SetConfig+0x2cc>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b03      	cmp	r3, #3
 8004302:	d81b      	bhi.n	800433c <UART_SetConfig+0xd0>
 8004304:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <UART_SetConfig+0xa0>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	0800431d 	.word	0x0800431d
 8004310:	0800432d 	.word	0x0800432d
 8004314:	08004325 	.word	0x08004325
 8004318:	08004335 	.word	0x08004335
 800431c:	2301      	movs	r3, #1
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004322:	e116      	b.n	8004552 <UART_SetConfig+0x2e6>
 8004324:	2302      	movs	r3, #2
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432a:	e112      	b.n	8004552 <UART_SetConfig+0x2e6>
 800432c:	2304      	movs	r3, #4
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004332:	e10e      	b.n	8004552 <UART_SetConfig+0x2e6>
 8004334:	2308      	movs	r3, #8
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433a:	e10a      	b.n	8004552 <UART_SetConfig+0x2e6>
 800433c:	2310      	movs	r3, #16
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004342:	e106      	b.n	8004552 <UART_SetConfig+0x2e6>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a7c      	ldr	r2, [pc, #496]	@ (800453c <UART_SetConfig+0x2d0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d138      	bne.n	80043c0 <UART_SetConfig+0x154>
 800434e:	4b7a      	ldr	r3, [pc, #488]	@ (8004538 <UART_SetConfig+0x2cc>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004354:	f003 030c 	and.w	r3, r3, #12
 8004358:	2b0c      	cmp	r3, #12
 800435a:	d82d      	bhi.n	80043b8 <UART_SetConfig+0x14c>
 800435c:	a201      	add	r2, pc, #4	@ (adr r2, 8004364 <UART_SetConfig+0xf8>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	08004399 	.word	0x08004399
 8004368:	080043b9 	.word	0x080043b9
 800436c:	080043b9 	.word	0x080043b9
 8004370:	080043b9 	.word	0x080043b9
 8004374:	080043a9 	.word	0x080043a9
 8004378:	080043b9 	.word	0x080043b9
 800437c:	080043b9 	.word	0x080043b9
 8004380:	080043b9 	.word	0x080043b9
 8004384:	080043a1 	.word	0x080043a1
 8004388:	080043b9 	.word	0x080043b9
 800438c:	080043b9 	.word	0x080043b9
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043b1 	.word	0x080043b1
 8004398:	2300      	movs	r3, #0
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439e:	e0d8      	b.n	8004552 <UART_SetConfig+0x2e6>
 80043a0:	2302      	movs	r3, #2
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a6:	e0d4      	b.n	8004552 <UART_SetConfig+0x2e6>
 80043a8:	2304      	movs	r3, #4
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ae:	e0d0      	b.n	8004552 <UART_SetConfig+0x2e6>
 80043b0:	2308      	movs	r3, #8
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b6:	e0cc      	b.n	8004552 <UART_SetConfig+0x2e6>
 80043b8:	2310      	movs	r3, #16
 80043ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043be:	e0c8      	b.n	8004552 <UART_SetConfig+0x2e6>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a5e      	ldr	r2, [pc, #376]	@ (8004540 <UART_SetConfig+0x2d4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d125      	bne.n	8004416 <UART_SetConfig+0x1aa>
 80043ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004538 <UART_SetConfig+0x2cc>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043d4:	2b30      	cmp	r3, #48	@ 0x30
 80043d6:	d016      	beq.n	8004406 <UART_SetConfig+0x19a>
 80043d8:	2b30      	cmp	r3, #48	@ 0x30
 80043da:	d818      	bhi.n	800440e <UART_SetConfig+0x1a2>
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d00a      	beq.n	80043f6 <UART_SetConfig+0x18a>
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d814      	bhi.n	800440e <UART_SetConfig+0x1a2>
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <UART_SetConfig+0x182>
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d008      	beq.n	80043fe <UART_SetConfig+0x192>
 80043ec:	e00f      	b.n	800440e <UART_SetConfig+0x1a2>
 80043ee:	2300      	movs	r3, #0
 80043f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f4:	e0ad      	b.n	8004552 <UART_SetConfig+0x2e6>
 80043f6:	2302      	movs	r3, #2
 80043f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fc:	e0a9      	b.n	8004552 <UART_SetConfig+0x2e6>
 80043fe:	2304      	movs	r3, #4
 8004400:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004404:	e0a5      	b.n	8004552 <UART_SetConfig+0x2e6>
 8004406:	2308      	movs	r3, #8
 8004408:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440c:	e0a1      	b.n	8004552 <UART_SetConfig+0x2e6>
 800440e:	2310      	movs	r3, #16
 8004410:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004414:	e09d      	b.n	8004552 <UART_SetConfig+0x2e6>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a4a      	ldr	r2, [pc, #296]	@ (8004544 <UART_SetConfig+0x2d8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d125      	bne.n	800446c <UART_SetConfig+0x200>
 8004420:	4b45      	ldr	r3, [pc, #276]	@ (8004538 <UART_SetConfig+0x2cc>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004426:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800442a:	2bc0      	cmp	r3, #192	@ 0xc0
 800442c:	d016      	beq.n	800445c <UART_SetConfig+0x1f0>
 800442e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004430:	d818      	bhi.n	8004464 <UART_SetConfig+0x1f8>
 8004432:	2b80      	cmp	r3, #128	@ 0x80
 8004434:	d00a      	beq.n	800444c <UART_SetConfig+0x1e0>
 8004436:	2b80      	cmp	r3, #128	@ 0x80
 8004438:	d814      	bhi.n	8004464 <UART_SetConfig+0x1f8>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <UART_SetConfig+0x1d8>
 800443e:	2b40      	cmp	r3, #64	@ 0x40
 8004440:	d008      	beq.n	8004454 <UART_SetConfig+0x1e8>
 8004442:	e00f      	b.n	8004464 <UART_SetConfig+0x1f8>
 8004444:	2300      	movs	r3, #0
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444a:	e082      	b.n	8004552 <UART_SetConfig+0x2e6>
 800444c:	2302      	movs	r3, #2
 800444e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004452:	e07e      	b.n	8004552 <UART_SetConfig+0x2e6>
 8004454:	2304      	movs	r3, #4
 8004456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800445a:	e07a      	b.n	8004552 <UART_SetConfig+0x2e6>
 800445c:	2308      	movs	r3, #8
 800445e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004462:	e076      	b.n	8004552 <UART_SetConfig+0x2e6>
 8004464:	2310      	movs	r3, #16
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446a:	e072      	b.n	8004552 <UART_SetConfig+0x2e6>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a35      	ldr	r2, [pc, #212]	@ (8004548 <UART_SetConfig+0x2dc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d12a      	bne.n	80044cc <UART_SetConfig+0x260>
 8004476:	4b30      	ldr	r3, [pc, #192]	@ (8004538 <UART_SetConfig+0x2cc>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004480:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004484:	d01a      	beq.n	80044bc <UART_SetConfig+0x250>
 8004486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800448a:	d81b      	bhi.n	80044c4 <UART_SetConfig+0x258>
 800448c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004490:	d00c      	beq.n	80044ac <UART_SetConfig+0x240>
 8004492:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004496:	d815      	bhi.n	80044c4 <UART_SetConfig+0x258>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <UART_SetConfig+0x238>
 800449c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044a0:	d008      	beq.n	80044b4 <UART_SetConfig+0x248>
 80044a2:	e00f      	b.n	80044c4 <UART_SetConfig+0x258>
 80044a4:	2300      	movs	r3, #0
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044aa:	e052      	b.n	8004552 <UART_SetConfig+0x2e6>
 80044ac:	2302      	movs	r3, #2
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b2:	e04e      	b.n	8004552 <UART_SetConfig+0x2e6>
 80044b4:	2304      	movs	r3, #4
 80044b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ba:	e04a      	b.n	8004552 <UART_SetConfig+0x2e6>
 80044bc:	2308      	movs	r3, #8
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c2:	e046      	b.n	8004552 <UART_SetConfig+0x2e6>
 80044c4:	2310      	movs	r3, #16
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ca:	e042      	b.n	8004552 <UART_SetConfig+0x2e6>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a17      	ldr	r2, [pc, #92]	@ (8004530 <UART_SetConfig+0x2c4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d13a      	bne.n	800454c <UART_SetConfig+0x2e0>
 80044d6:	4b18      	ldr	r3, [pc, #96]	@ (8004538 <UART_SetConfig+0x2cc>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044e4:	d01a      	beq.n	800451c <UART_SetConfig+0x2b0>
 80044e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044ea:	d81b      	bhi.n	8004524 <UART_SetConfig+0x2b8>
 80044ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044f0:	d00c      	beq.n	800450c <UART_SetConfig+0x2a0>
 80044f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044f6:	d815      	bhi.n	8004524 <UART_SetConfig+0x2b8>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <UART_SetConfig+0x298>
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004500:	d008      	beq.n	8004514 <UART_SetConfig+0x2a8>
 8004502:	e00f      	b.n	8004524 <UART_SetConfig+0x2b8>
 8004504:	2300      	movs	r3, #0
 8004506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800450a:	e022      	b.n	8004552 <UART_SetConfig+0x2e6>
 800450c:	2302      	movs	r3, #2
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004512:	e01e      	b.n	8004552 <UART_SetConfig+0x2e6>
 8004514:	2304      	movs	r3, #4
 8004516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800451a:	e01a      	b.n	8004552 <UART_SetConfig+0x2e6>
 800451c:	2308      	movs	r3, #8
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004522:	e016      	b.n	8004552 <UART_SetConfig+0x2e6>
 8004524:	2310      	movs	r3, #16
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452a:	e012      	b.n	8004552 <UART_SetConfig+0x2e6>
 800452c:	efff69f3 	.word	0xefff69f3
 8004530:	40008000 	.word	0x40008000
 8004534:	40013800 	.word	0x40013800
 8004538:	40021000 	.word	0x40021000
 800453c:	40004400 	.word	0x40004400
 8004540:	40004800 	.word	0x40004800
 8004544:	40004c00 	.word	0x40004c00
 8004548:	40005000 	.word	0x40005000
 800454c:	2310      	movs	r3, #16
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a9f      	ldr	r2, [pc, #636]	@ (80047d4 <UART_SetConfig+0x568>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d17a      	bne.n	8004652 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800455c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004560:	2b08      	cmp	r3, #8
 8004562:	d824      	bhi.n	80045ae <UART_SetConfig+0x342>
 8004564:	a201      	add	r2, pc, #4	@ (adr r2, 800456c <UART_SetConfig+0x300>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	08004591 	.word	0x08004591
 8004570:	080045af 	.word	0x080045af
 8004574:	08004599 	.word	0x08004599
 8004578:	080045af 	.word	0x080045af
 800457c:	0800459f 	.word	0x0800459f
 8004580:	080045af 	.word	0x080045af
 8004584:	080045af 	.word	0x080045af
 8004588:	080045af 	.word	0x080045af
 800458c:	080045a7 	.word	0x080045a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004590:	f7fd fe06 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 8004594:	61f8      	str	r0, [r7, #28]
        break;
 8004596:	e010      	b.n	80045ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004598:	4b8f      	ldr	r3, [pc, #572]	@ (80047d8 <UART_SetConfig+0x56c>)
 800459a:	61fb      	str	r3, [r7, #28]
        break;
 800459c:	e00d      	b.n	80045ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459e:	f7fd fd67 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 80045a2:	61f8      	str	r0, [r7, #28]
        break;
 80045a4:	e009      	b.n	80045ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045aa:	61fb      	str	r3, [r7, #28]
        break;
 80045ac:	e005      	b.n	80045ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80fb 	beq.w	80047b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	4413      	add	r3, r2
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d305      	bcc.n	80045de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d903      	bls.n	80045e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045e4:	e0e8      	b.n	80047b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2200      	movs	r2, #0
 80045ea:	461c      	mov	r4, r3
 80045ec:	4615      	mov	r5, r2
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	022b      	lsls	r3, r5, #8
 80045f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045fc:	0222      	lsls	r2, r4, #8
 80045fe:	68f9      	ldr	r1, [r7, #12]
 8004600:	6849      	ldr	r1, [r1, #4]
 8004602:	0849      	lsrs	r1, r1, #1
 8004604:	2000      	movs	r0, #0
 8004606:	4688      	mov	r8, r1
 8004608:	4681      	mov	r9, r0
 800460a:	eb12 0a08 	adds.w	sl, r2, r8
 800460e:	eb43 0b09 	adc.w	fp, r3, r9
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	603b      	str	r3, [r7, #0]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004620:	4650      	mov	r0, sl
 8004622:	4659      	mov	r1, fp
 8004624:	f7fb fdd0 	bl	80001c8 <__aeabi_uldivmod>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4613      	mov	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004636:	d308      	bcc.n	800464a <UART_SetConfig+0x3de>
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800463e:	d204      	bcs.n	800464a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	60da      	str	r2, [r3, #12]
 8004648:	e0b6      	b.n	80047b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004650:	e0b2      	b.n	80047b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800465a:	d15e      	bne.n	800471a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800465c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004660:	2b08      	cmp	r3, #8
 8004662:	d828      	bhi.n	80046b6 <UART_SetConfig+0x44a>
 8004664:	a201      	add	r2, pc, #4	@ (adr r2, 800466c <UART_SetConfig+0x400>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	08004691 	.word	0x08004691
 8004670:	08004699 	.word	0x08004699
 8004674:	080046a1 	.word	0x080046a1
 8004678:	080046b7 	.word	0x080046b7
 800467c:	080046a7 	.word	0x080046a7
 8004680:	080046b7 	.word	0x080046b7
 8004684:	080046b7 	.word	0x080046b7
 8004688:	080046b7 	.word	0x080046b7
 800468c:	080046af 	.word	0x080046af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004690:	f7fd fd86 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 8004694:	61f8      	str	r0, [r7, #28]
        break;
 8004696:	e014      	b.n	80046c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004698:	f7fd fd98 	bl	80021cc <HAL_RCC_GetPCLK2Freq>
 800469c:	61f8      	str	r0, [r7, #28]
        break;
 800469e:	e010      	b.n	80046c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a0:	4b4d      	ldr	r3, [pc, #308]	@ (80047d8 <UART_SetConfig+0x56c>)
 80046a2:	61fb      	str	r3, [r7, #28]
        break;
 80046a4:	e00d      	b.n	80046c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a6:	f7fd fce3 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 80046aa:	61f8      	str	r0, [r7, #28]
        break;
 80046ac:	e009      	b.n	80046c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046b2:	61fb      	str	r3, [r7, #28]
        break;
 80046b4:	e005      	b.n	80046c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d077      	beq.n	80047b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	005a      	lsls	r2, r3, #1
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	441a      	add	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	2b0f      	cmp	r3, #15
 80046e2:	d916      	bls.n	8004712 <UART_SetConfig+0x4a6>
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ea:	d212      	bcs.n	8004712 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f023 030f 	bic.w	r3, r3, #15
 80046f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	085b      	lsrs	r3, r3, #1
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	b29a      	uxth	r2, r3
 8004702:	8afb      	ldrh	r3, [r7, #22]
 8004704:	4313      	orrs	r3, r2
 8004706:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	8afa      	ldrh	r2, [r7, #22]
 800470e:	60da      	str	r2, [r3, #12]
 8004710:	e052      	b.n	80047b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004718:	e04e      	b.n	80047b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800471a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800471e:	2b08      	cmp	r3, #8
 8004720:	d827      	bhi.n	8004772 <UART_SetConfig+0x506>
 8004722:	a201      	add	r2, pc, #4	@ (adr r2, 8004728 <UART_SetConfig+0x4bc>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	0800474d 	.word	0x0800474d
 800472c:	08004755 	.word	0x08004755
 8004730:	0800475d 	.word	0x0800475d
 8004734:	08004773 	.word	0x08004773
 8004738:	08004763 	.word	0x08004763
 800473c:	08004773 	.word	0x08004773
 8004740:	08004773 	.word	0x08004773
 8004744:	08004773 	.word	0x08004773
 8004748:	0800476b 	.word	0x0800476b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800474c:	f7fd fd28 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 8004750:	61f8      	str	r0, [r7, #28]
        break;
 8004752:	e014      	b.n	800477e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004754:	f7fd fd3a 	bl	80021cc <HAL_RCC_GetPCLK2Freq>
 8004758:	61f8      	str	r0, [r7, #28]
        break;
 800475a:	e010      	b.n	800477e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800475c:	4b1e      	ldr	r3, [pc, #120]	@ (80047d8 <UART_SetConfig+0x56c>)
 800475e:	61fb      	str	r3, [r7, #28]
        break;
 8004760:	e00d      	b.n	800477e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004762:	f7fd fc85 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8004766:	61f8      	str	r0, [r7, #28]
        break;
 8004768:	e009      	b.n	800477e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800476a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800476e:	61fb      	str	r3, [r7, #28]
        break;
 8004770:	e005      	b.n	800477e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800477c:	bf00      	nop
    }

    if (pclk != 0U)
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d019      	beq.n	80047b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	085a      	lsrs	r2, r3, #1
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	441a      	add	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b0f      	cmp	r3, #15
 800479c:	d909      	bls.n	80047b2 <UART_SetConfig+0x546>
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a4:	d205      	bcs.n	80047b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60da      	str	r2, [r3, #12]
 80047b0:	e002      	b.n	80047b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80047c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3728      	adds	r7, #40	@ 0x28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047d2:	bf00      	nop
 80047d4:	40008000 	.word	0x40008000
 80047d8:	00f42400 	.word	0x00f42400

080047dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01a      	beq.n	80048f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048da:	d10a      	bne.n	80048f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]
  }
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b098      	sub	sp, #96	@ 0x60
 8004924:	af02      	add	r7, sp, #8
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004930:	f7fc fb7e 	bl	8001030 <HAL_GetTick>
 8004934:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b08      	cmp	r3, #8
 8004942:	d12e      	bne.n	80049a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004944:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800494c:	2200      	movs	r2, #0
 800494e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f88c 	bl	8004a70 <UART_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d021      	beq.n	80049a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800496c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004972:	653b      	str	r3, [r7, #80]	@ 0x50
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800497c:	647b      	str	r3, [r7, #68]	@ 0x44
 800497e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004982:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800498a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e6      	bne.n	800495e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e062      	b.n	8004a68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d149      	bne.n	8004a44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b8:	2200      	movs	r2, #0
 80049ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f856 	bl	8004a70 <UART_WaitOnFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d03c      	beq.n	8004a44 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	623b      	str	r3, [r7, #32]
   return(result);
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e6      	bne.n	80049ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3308      	adds	r3, #8
 8004a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a1c:	61fa      	str	r2, [r7, #28]
 8004a1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	69b9      	ldr	r1, [r7, #24]
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	617b      	str	r3, [r7, #20]
   return(result);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e5      	bne.n	80049fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e011      	b.n	8004a68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3758      	adds	r7, #88	@ 0x58
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a80:	e049      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d045      	beq.n	8004b16 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8a:	f7fc fad1 	bl	8001030 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d302      	bcc.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e048      	b.n	8004b36 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d031      	beq.n	8004b16 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d110      	bne.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f838 	bl	8004b3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e029      	b.n	8004b36 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004aec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004af0:	d111      	bne.n	8004b16 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004afa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f81e 	bl	8004b3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e00f      	b.n	8004b36 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	bf0c      	ite	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	2300      	movne	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d0a6      	beq.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b095      	sub	sp, #84	@ 0x54
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b64:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e6      	bne.n	8004b46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3308      	adds	r3, #8
 8004b96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e5      	bne.n	8004b78 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d118      	bne.n	8004be6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f023 0310 	bic.w	r3, r3, #16
 8004bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6979      	ldr	r1, [r7, #20]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	613b      	str	r3, [r7, #16]
   return(result);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e6      	bne.n	8004bb4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004bfa:	bf00      	nop
 8004bfc:	3754      	adds	r7, #84	@ 0x54
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <memset>:
 8004c06:	4402      	add	r2, r0
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d100      	bne.n	8004c10 <memset+0xa>
 8004c0e:	4770      	bx	lr
 8004c10:	f803 1b01 	strb.w	r1, [r3], #1
 8004c14:	e7f9      	b.n	8004c0a <memset+0x4>
	...

08004c18 <__libc_init_array>:
 8004c18:	b570      	push	{r4, r5, r6, lr}
 8004c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8004c50 <__libc_init_array+0x38>)
 8004c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8004c54 <__libc_init_array+0x3c>)
 8004c1e:	1b64      	subs	r4, r4, r5
 8004c20:	10a4      	asrs	r4, r4, #2
 8004c22:	2600      	movs	r6, #0
 8004c24:	42a6      	cmp	r6, r4
 8004c26:	d109      	bne.n	8004c3c <__libc_init_array+0x24>
 8004c28:	4d0b      	ldr	r5, [pc, #44]	@ (8004c58 <__libc_init_array+0x40>)
 8004c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8004c5c <__libc_init_array+0x44>)
 8004c2c:	f000 f818 	bl	8004c60 <_init>
 8004c30:	1b64      	subs	r4, r4, r5
 8004c32:	10a4      	asrs	r4, r4, #2
 8004c34:	2600      	movs	r6, #0
 8004c36:	42a6      	cmp	r6, r4
 8004c38:	d105      	bne.n	8004c46 <__libc_init_array+0x2e>
 8004c3a:	bd70      	pop	{r4, r5, r6, pc}
 8004c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c40:	4798      	blx	r3
 8004c42:	3601      	adds	r6, #1
 8004c44:	e7ee      	b.n	8004c24 <__libc_init_array+0xc>
 8004c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c4a:	4798      	blx	r3
 8004c4c:	3601      	adds	r6, #1
 8004c4e:	e7f2      	b.n	8004c36 <__libc_init_array+0x1e>
 8004c50:	08004cdc 	.word	0x08004cdc
 8004c54:	08004cdc 	.word	0x08004cdc
 8004c58:	08004cdc 	.word	0x08004cdc
 8004c5c:	08004ce0 	.word	0x08004ce0

08004c60 <_init>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr

08004c6c <_fini>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr
