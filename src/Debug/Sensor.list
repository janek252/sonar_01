
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800595c  0800595c  0000695c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a08  08005a08  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a08  08005a08  00006a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a10  08005a10  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a10  08005a10  00006a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a14  08005a14  00006a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005a18  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  2000005c  08005a74  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08005a74  00007364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111ef  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026dd  00000000  00000000  0001827b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bcf  00000000  00000000  0001b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027462  00000000  00000000  0001c45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001347a  00000000  00000000  000438c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f284d  00000000  00000000  00056d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149588  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b0  00000000  00000000  001495cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0014d97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005944 	.word	0x08005944

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005944 	.word	0x08005944

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <delay_us>:
#include "tim.h"
#include "stm32l4xx_hal.h"
#include "gpio.h"

void delay_us(uint16_t time) //funkcja opóźnienia czasowego
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7,0); // załącznie timera
 800056a:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <delay_us+0x30>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7)<time); // wyłaczenie timera po upływie zadanego czasu
 8000572:	bf00      	nop
 8000574:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <delay_us+0x30>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	429a      	cmp	r2, r3
 800057e:	d3f9      	bcc.n	8000574 <delay_us+0x14>
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000138 	.word	0x20000138

08000594 <Sensor_trigger>:
uint32_t distance = 0;
uint32_t start;
uint32_t stop;

void Sensor_trigger() //funkcja wysyłania pulsu trigger
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, 1); // załączenie pulsu trigger
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800059e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a2:	f001 f981 	bl	80018a8 <HAL_GPIO_WritePin>
	delay_us(10); // oczekiwanie 10us
 80005a6:	200a      	movs	r0, #10
 80005a8:	f7ff ffda 	bl	8000560 <delay_us>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, 0); // wyłączenie pulsu trigger
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b6:	f001 f977 	bl	80018a8 <HAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <Sensor_get_distance>:

int Sensor_get_distance() // funckja pomiaru odległości
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	Sensor_trigger();
 80005c4:	f7ff ffe6 	bl	8000594 <Sensor_trigger>

	while( !(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin ))); // czekanie na stan wysoki
 80005c8:	bf00      	nop
 80005ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d2:	f001 f951 	bl	8001878 <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d0f6      	beq.n	80005ca <Sensor_get_distance+0xa>
	time1 = __HAL_TIM_GET_COUNTER(&htim7); // czas dla początku impulsu echo
 80005dc:	4b13      	ldr	r3, [pc, #76]	@ (800062c <Sensor_get_distance+0x6c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005e2:	4a13      	ldr	r2, [pc, #76]	@ (8000630 <Sensor_get_distance+0x70>)
 80005e4:	6013      	str	r3, [r2, #0]

	while( HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin )); // czekanie na stan niski
 80005e6:	bf00      	nop
 80005e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f0:	f001 f942 	bl	8001878 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f6      	bne.n	80005e8 <Sensor_get_distance+0x28>
	time2 = __HAL_TIM_GET_COUNTER(&htim7);  // czas dla końca pusu echo
 80005fa:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <Sensor_get_distance+0x6c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000600:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <Sensor_get_distance+0x74>)
 8000602:	6013      	str	r3, [r2, #0]

	diff = time2 - time1; // pomiar długości pulsu echo
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <Sensor_get_distance+0x74>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <Sensor_get_distance+0x70>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	4a0a      	ldr	r2, [pc, #40]	@ (8000638 <Sensor_get_distance+0x78>)
 8000610:	6013      	str	r3, [r2, #0]
	distance = diff/58; // pomiar odległości według wzoru producenta
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <Sensor_get_distance+0x78>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a09      	ldr	r2, [pc, #36]	@ (800063c <Sensor_get_distance+0x7c>)
 8000618:	fba2 2303 	umull	r2, r3, r2, r3
 800061c:	095b      	lsrs	r3, r3, #5
 800061e:	4a08      	ldr	r2, [pc, #32]	@ (8000640 <Sensor_get_distance+0x80>)
 8000620:	6013      	str	r3, [r2, #0]

	return distance;
 8000622:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <Sensor_get_distance+0x80>)
 8000624:	681b      	ldr	r3, [r3, #0]
}
 8000626:	4618      	mov	r0, r3
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000138 	.word	0x20000138
 8000630:	20000078 	.word	0x20000078
 8000634:	2000007c 	.word	0x2000007c
 8000638:	20000080 	.word	0x20000080
 800063c:	8d3dcb09 	.word	0x8d3dcb09
 8000640:	20000084 	.word	0x20000084

08000644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	@ 0x28
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b3d      	ldr	r3, [pc, #244]	@ (8000750 <MX_GPIO_Init+0x10c>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	4a3c      	ldr	r2, [pc, #240]	@ (8000750 <MX_GPIO_Init+0x10c>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000666:	4b3a      	ldr	r3, [pc, #232]	@ (8000750 <MX_GPIO_Init+0x10c>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	4b37      	ldr	r3, [pc, #220]	@ (8000750 <MX_GPIO_Init+0x10c>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a36      	ldr	r2, [pc, #216]	@ (8000750 <MX_GPIO_Init+0x10c>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b34      	ldr	r3, [pc, #208]	@ (8000750 <MX_GPIO_Init+0x10c>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b31      	ldr	r3, [pc, #196]	@ (8000750 <MX_GPIO_Init+0x10c>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a30      	ldr	r2, [pc, #192]	@ (8000750 <MX_GPIO_Init+0x10c>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000696:	4b2e      	ldr	r3, [pc, #184]	@ (8000750 <MX_GPIO_Init+0x10c>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <MX_GPIO_Init+0x10c>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000750 <MX_GPIO_Init+0x10c>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ae:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <MX_GPIO_Init+0x10c>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Trigger_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c4:	f001 f8f0 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2120      	movs	r1, #32
 80006cc:	4821      	ldr	r0, [pc, #132]	@ (8000754 <MX_GPIO_Init+0x110>)
 80006ce:	f001 f8eb 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	481b      	ldr	r0, [pc, #108]	@ (8000758 <MX_GPIO_Init+0x114>)
 80006ea:	f000 ff1b 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Trigger_Pin;
 80006ee:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070a:	f000 ff0b 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo_Pin;
 800070e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000726:	f000 fefd 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 800072a:	2320      	movs	r3, #32
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_GPIO_Init+0x110>)
 8000742:	f000 feef 	bl	8001524 <HAL_GPIO_Init>

}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	@ 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000
 8000754:	48000400 	.word	0x48000400
 8000758:	48000800 	.word	0x48000800

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b5b0      	push	{r4, r5, r7, lr}
 800075e:	b092      	sub	sp, #72	@ 0x48
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000762:	f000 fd2d 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000766:	f000 f86f 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076a:	f7ff ff6b 	bl	8000644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800076e:	f000 fc41 	bl	8000ff4 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000772:	f000 fb73 	bl	8000e5c <MX_TIM7_Init>
  MX_TIM2_Init();
 8000776:	f000 fb17 	bl	8000da8 <MX_TIM2_Init>
  MX_TIM1_Init();
 800077a:	f000 fabf 	bl	8000cfc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7);
 800077e:	482d      	ldr	r0, [pc, #180]	@ (8000834 <main+0xd8>)
 8000780:	f002 fc22 	bl	8002fc8 <HAL_TIM_Base_Start>
#if STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_SLAVE_TIM
  stepper_init(&stepper, &htim2, TIM_CHANNEL_3, &htim1);

#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
  stepper_init(&stepper, &htim2, TIM_CHANNEL_3);
 8000784:	2208      	movs	r2, #8
 8000786:	492c      	ldr	r1, [pc, #176]	@ (8000838 <main+0xdc>)
 8000788:	482c      	ldr	r0, [pc, #176]	@ (800083c <main+0xe0>)
 800078a:	f000 f8d5 	bl	8000938 <stepper_init>

//  int32_t speed_table[SET_TABLE_SIZE] = {30, 20, -20, 10, 50};
  // int32_t angle_table[SET_TABLE_SIZE] = {-10, -5, 0, 5, 10};
  int32_t angle_table[SET_TABLE_SIZE] = {-25 ,-20, -15 , -10, -5, 0, 5, 10, 15, 20, 25}; // Zakres 50 stopni
 800078e:	4b2c      	ldr	r3, [pc, #176]	@ (8000840 <main+0xe4>)
 8000790:	1d3c      	adds	r4, r7, #4
 8000792:	461d      	mov	r5, r3
 8000794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  int i = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t time_tick = HAL_GetTick();
 80007a8:	f000 fd7a 	bl	80012a0 <HAL_GetTick>
 80007ac:	6438      	str	r0, [r7, #64]	@ 0x40
  uint32_t max_time = 2000;
 80007ae:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t distance;
  //uint32_t angle = 0; //speed = 0;
  direction dir = CW;
 80007b4:	2301      	movs	r3, #1
 80007b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if ((HAL_GetTick() - time_tick) > max_time)
 80007ba:	f000 fd71 	bl	80012a0 <HAL_GetTick>
 80007be:	4602      	mov	r2, r0
 80007c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d2f7      	bcs.n	80007ba <main+0x5e>
    {
        time_tick = HAL_GetTick();
 80007ca:	f000 fd69 	bl	80012a0 <HAL_GetTick>
 80007ce:	6438      	str	r0, [r7, #64]	@ 0x40

        int32_t angle = angle_table[i];
 80007d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	3348      	adds	r3, #72	@ 0x48
 80007d6:	443b      	add	r3, r7
 80007d8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80007dc:	637b      	str	r3, [r7, #52]	@ 0x34
        dir = (angle >= 0) ? CW : CCW;
 80007de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007e0:	43db      	mvns	r3, r3
 80007e2:	0fdb      	lsrs	r3, r3, #31
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

        stepper_set_angle(&stepper, dir, 1 , abs(angle)); // Ustawienie kąta bezwzględnego
 80007ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bfb8      	it	lt
 80007f0:	425b      	neglt	r3, r3
 80007f2:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 80007f6:	2201      	movs	r2, #1
 80007f8:	4810      	ldr	r0, [pc, #64]	@ (800083c <main+0xe0>)
 80007fa:	f000 f8af 	bl	800095c <stepper_set_angle>

        distance = Sensor_get_distance();
 80007fe:	f7ff fedf 	bl	80005c0 <Sensor_get_distance>
 8000802:	4603      	mov	r3, r0
 8000804:	633b      	str	r3, [r7, #48]	@ 0x30

        Send_data(distance, angle);
 8000806:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800080a:	f000 fc7f 	bl	800110c <Send_data>

        HAL_Delay(100);// Poczekaj przed wykonaniem następnego kroku
 800080e:	2064      	movs	r0, #100	@ 0x64
 8000810:	f000 fd52 	bl	80012b8 <HAL_Delay>
        i = (i + 1) % SET_TABLE_SIZE; // Zapętlenie indeksu w tabeli kątów
 8000814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <main+0xe8>)
 800081a:	fb83 1302 	smull	r1, r3, r3, r2
 800081e:	1059      	asrs	r1, r3, #1
 8000820:	17d3      	asrs	r3, r2, #31
 8000822:	1ac9      	subs	r1, r1, r3
 8000824:	460b      	mov	r3, r1
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	440b      	add	r3, r1
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	440b      	add	r3, r1
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	647b      	str	r3, [r7, #68]	@ 0x44
    if ((HAL_GetTick() - time_tick) > max_time)
 8000832:	e7c2      	b.n	80007ba <main+0x5e>
 8000834:	20000138 	.word	0x20000138
 8000838:	200000ec 	.word	0x200000ec
 800083c:	20000088 	.word	0x20000088
 8000840:	0800595c 	.word	0x0800595c
 8000844:	2e8ba2e9 	.word	0x2e8ba2e9

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b096      	sub	sp, #88	@ 0x58
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2244      	movs	r2, #68	@ 0x44
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fbf4 	bl	8005044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800086a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800086e:	f001 f841 	bl	80018f4 <HAL_PWREx_ControlVoltageScaling>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000878:	f000 f858 	bl	800092c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087c:	2302      	movs	r3, #2
 800087e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000884:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000886:	2310      	movs	r3, #16
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088e:	2302      	movs	r3, #2
 8000890:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000896:	230a      	movs	r3, #10
 8000898:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800089a:	2307      	movs	r3, #7
 800089c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800089e:	2302      	movs	r3, #2
 80008a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 f878 	bl	80019a0 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008b6:	f000 f839 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2303      	movs	r3, #3
 80008c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	2104      	movs	r1, #4
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 fc40 	bl	8002158 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008de:	f000 f825 	bl	800092c <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3758      	adds	r7, #88	@ 0x58
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <HAL_TIM_PWM_PulseFinishedCallback>:
	}
}
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)

{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stepper.timer.htim->Instance)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d10d      	bne.n	800091e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
	{
		stepper.step_counter++;
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	3301      	adds	r3, #1
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800090a:	60d3      	str	r3, [r2, #12]

		if(stepper.step_counter >= stepper.steps_to_count)
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800090e:	68da      	ldr	r2, [r3, #12]
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	429a      	cmp	r2, r3
 8000916:	d302      	bcc.n	800091e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		{
			stepper_stop(&stepper);
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800091a:	f000 f857 	bl	80009cc <stepper_stop>
		}
	}
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000088 	.word	0x20000088

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <stepper_init>:
	_stepper->timer.channel = _channel;
	_stepper->slave_timer.htim = _slave_timer;
}
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
void stepper_init(struct stepper_s *_stepper, TIM_HandleTypeDef *_htim, uint32_t _channel)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	_stepper->timer.htim = _htim;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	601a      	str	r2, [r3, #0]
	_stepper->timer.channel = _channel;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	605a      	str	r2, [r3, #4]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <stepper_set_angle>:

	HAL_TIM_PWM_Start(_stepper->timer.htim, _stepper->timer.channel);
}

void stepper_set_angle(struct stepper_s *_stepper, direction _dir, uint32_t _speed, uint32_t _angle)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	460b      	mov	r3, r1
 800096a:	72fb      	strb	r3, [r7, #11]
	_stepper->mode = angle;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2201      	movs	r2, #1
 8000970:	721a      	strb	r2, [r3, #8]

	stepper_set_direction(_stepper, _dir);
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	4619      	mov	r1, r3
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f000 f872 	bl	8000a60 <stepper_set_direction>
	stepper_set_speed(_stepper, _speed);
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f000 f88c 	bl	8000a9c <stepper_set_speed>

	_stepper->step_counter = 0;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
	_stepper->steps_to_count = _angle * (STEP_PER_REVOLUTION * MICRO_STEP) / 360;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8000990:	fb02 f303 	mul.w	r3, r2, r3
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <stepper_set_angle+0x6c>)
 8000998:	fba2 2303 	umull	r2, r3, r2, r3
 800099c:	089a      	lsrs	r2, r3, #2
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	611a      	str	r2, [r3, #16]

	if(0 == _stepper->steps_to_count)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d102      	bne.n	80009b0 <stepper_set_angle+0x54>
	{
		stepper_stop(_stepper);
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f000 f80e 	bl	80009cc <stepper_stop>
	__HAL_TIM_SET_AUTORELOAD(_stepper->slave_timer.htim, _stepper->steps_to_count - 1);
	HAL_TIM_Base_Start_IT(_stepper->slave_timer.htim);

	HAL_TIM_PWM_Start(_stepper->timer.htim, _stepper->timer.channel);
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
	HAL_TIM_PWM_Start_IT(_stepper->timer.htim, _stepper->timer.channel);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	4619      	mov	r1, r3
 80009ba:	4610      	mov	r0, r2
 80009bc:	f002 fc5a 	bl	8003274 <HAL_TIM_PWM_Start_IT>
#endif
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	16c16c17 	.word	0x16c16c17

080009cc <stepper_stop>:

void stepper_stop(struct stepper_s *_stepper)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	_stepper->mode = idle;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	721a      	strb	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, 0);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d105      	bne.n	80009ee <stepper_stop+0x22>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2200      	movs	r2, #0
 80009ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ec:	e02c      	b.n	8000a48 <stepper_stop+0x7c>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d105      	bne.n	8000a02 <stepper_stop+0x36>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	2300      	movs	r3, #0
 80009fe:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a00:	e022      	b.n	8000a48 <stepper_stop+0x7c>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b08      	cmp	r3, #8
 8000a08:	d105      	bne.n	8000a16 <stepper_stop+0x4a>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	2300      	movs	r3, #0
 8000a12:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000a14:	e018      	b.n	8000a48 <stepper_stop+0x7c>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b0c      	cmp	r3, #12
 8000a1c:	d105      	bne.n	8000a2a <stepper_stop+0x5e>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	2300      	movs	r3, #0
 8000a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a28:	e00e      	b.n	8000a48 <stepper_stop+0x7c>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	2b10      	cmp	r3, #16
 8000a30:	d105      	bne.n	8000a3e <stepper_stop+0x72>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a3c:	e004      	b.n	8000a48 <stepper_stop+0x7c>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	2300      	movs	r3, #0
 8000a46:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Stop(_stepper->timer.htim, _stepper->timer.channel);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	4619      	mov	r1, r3
 8000a52:	4610      	mov	r0, r2
 8000a54:	f002 fb78 	bl	8003148 <HAL_TIM_PWM_Stop>

#if STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_SLAVE_TIM
	HAL_TIM_Base_Stop_IT(_stepper->slave_timer.htim);
#endif
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <stepper_set_direction>:

void stepper_set_direction(struct stepper_s *_stepper, direction _dir)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
	if(_dir == CCW)
 8000a6c:	78fb      	ldrb	r3, [r7, #3]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d105      	bne.n	8000a7e <stepper_set_direction+0x1e>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CCW);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2120      	movs	r1, #32
 8000a76:	4808      	ldr	r0, [pc, #32]	@ (8000a98 <stepper_set_direction+0x38>)
 8000a78:	f000 ff16 	bl	80018a8 <HAL_GPIO_WritePin>
	else if(_dir == CW)
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
}
 8000a7c:	e007      	b.n	8000a8e <stepper_set_direction+0x2e>
	else if(_dir == CW)
 8000a7e:	78fb      	ldrb	r3, [r7, #3]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d104      	bne.n	8000a8e <stepper_set_direction+0x2e>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2120      	movs	r1, #32
 8000a88:	4803      	ldr	r0, [pc, #12]	@ (8000a98 <stepper_set_direction+0x38>)
 8000a8a:	f000 ff0d 	bl	80018a8 <HAL_GPIO_WritePin>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	48000400 	.word	0x48000400

08000a9c <stepper_set_speed>:

void stepper_set_speed(struct stepper_s *_stepper, uint32_t _speed)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	uint32_t counter, freq;

	if(_speed > 100)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	2b64      	cmp	r3, #100	@ 0x64
 8000aaa:	d902      	bls.n	8000ab2 <stepper_set_speed+0x16>
	{
		_speed = 100;
 8000aac:	2364      	movs	r3, #100	@ 0x64
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	e006      	b.n	8000ac0 <stepper_set_speed+0x24>
	}
	else if(_speed == 0)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d103      	bne.n	8000ac0 <stepper_set_speed+0x24>
	{
		stepper_stop(_stepper);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff87 	bl	80009cc <stepper_stop>
		return;
 8000abe:	e068      	b.n	8000b92 <stepper_set_speed+0xf6>
	}

	freq = (_speed * (STEPPER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ))/STEPPER_MOTOR_MAX_SPEED;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000ac6:	fb02 f303 	mul.w	r3, r2, r3
 8000aca:	4a33      	ldr	r2, [pc, #204]	@ (8000b98 <stepper_set_speed+0xfc>)
 8000acc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad0:	095b      	lsrs	r3, r3, #5
 8000ad2:	60fb      	str	r3, [r7, #12]
	counter = HAL_RCC_GetPCLK1Freq() / (_stepper->timer.htim->Init.Prescaler * freq);
 8000ad4:	f001 fcd8 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 8000ad8:	4601      	mov	r1, r0
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	fb02 f303 	mul.w	r3, r2, r3
 8000ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000aea:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(_stepper->timer.htim, 0);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_AUTORELOAD(_stepper->timer.htim, counter - 1);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	3a01      	subs	r2, #1
 8000b00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	3a01      	subs	r2, #1
 8000b0a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, (counter/2) - 1);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d107      	bne.n	8000b24 <stepper_set_speed+0x88>
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	085a      	lsrs	r2, r3, #1
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3a01      	subs	r2, #1
 8000b20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b22:	e036      	b.n	8000b92 <stepper_set_speed+0xf6>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d107      	bne.n	8000b3c <stepper_set_speed+0xa0>
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	6812      	ldr	r2, [r2, #0]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b3a:	e02a      	b.n	8000b92 <stepper_set_speed+0xf6>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d107      	bne.n	8000b54 <stepper_set_speed+0xb8>
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	085b      	lsrs	r3, r3, #1
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	6812      	ldr	r2, [r2, #0]
 8000b4c:	6812      	ldr	r2, [r2, #0]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000b52:	e01e      	b.n	8000b92 <stepper_set_speed+0xf6>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b0c      	cmp	r3, #12
 8000b5a:	d107      	bne.n	8000b6c <stepper_set_speed+0xd0>
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	085b      	lsrs	r3, r3, #1
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	6812      	ldr	r2, [r2, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6a:	e012      	b.n	8000b92 <stepper_set_speed+0xf6>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b10      	cmp	r3, #16
 8000b72:	d107      	bne.n	8000b84 <stepper_set_speed+0xe8>
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	085b      	lsrs	r3, r3, #1
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	6812      	ldr	r2, [r2, #0]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b82:	e006      	b.n	8000b92 <stepper_set_speed+0xf6>
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	085b      	lsrs	r3, r3, #1
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	51eb851f 	.word	0x51eb851f

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <HAL_MspInit+0x44>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8000be0 <HAL_MspInit+0x44>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <HAL_MspInit+0x44>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <HAL_MspInit+0x44>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bbe:	4a08      	ldr	r2, [pc, #32]	@ (8000be0 <HAL_MspInit+0x44>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_MspInit+0x44>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 fb1d 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c4a:	f002 fc67 	bl	800351c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000a0 	.word	0x200000a0

08000c58 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <TIM7_IRQHandler+0x10>)
 8000c5e:	f002 fc5d 	bl	800351c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000138 	.word	0x20000138

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	@ (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f004 f9da 	bl	8005054 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20018000 	.word	0x20018000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	2000009c 	.word	0x2000009c
 8000cd4:	20000368 	.word	0x20000368

08000cd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d12:	463b      	mov	r3, r7
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d1c:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <MX_TIM1_Init+0xa4>)
 8000d1e:	4a21      	ldr	r2, [pc, #132]	@ (8000da4 <MX_TIM1_Init+0xa8>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d22:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <MX_TIM1_Init+0xa4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <MX_TIM1_Init+0xa4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <MX_TIM1_Init+0xa4>)
 8000d30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <MX_TIM1_Init+0xa4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <MX_TIM1_Init+0xa4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d42:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <MX_TIM1_Init+0xa4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d48:	4815      	ldr	r0, [pc, #84]	@ (8000da0 <MX_TIM1_Init+0xa4>)
 8000d4a:	f002 f8e5 	bl	8002f18 <HAL_TIM_Base_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000d54:	f7ff fdea 	bl	800092c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	480e      	ldr	r0, [pc, #56]	@ (8000da0 <MX_TIM1_Init+0xa4>)
 8000d68:	f002 fdee 	bl	8003948 <HAL_TIM_SlaveConfigSynchro>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d72:	f7ff fddb 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d82:	463b      	mov	r3, r7
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	@ (8000da0 <MX_TIM1_Init+0xa4>)
 8000d88:	f003 faf0 	bl	800436c <HAL_TIMEx_MasterConfigSynchronization>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000d92:	f7ff fdcb 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000a0 	.word	0x200000a0
 8000da4:	40012c00 	.word	0x40012c00

08000da8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	@ 0x28
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	615a      	str	r2, [r3, #20]
 8000dca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	@ (8000e58 <MX_TIM2_Init+0xb0>)
 8000dce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40-1;
 8000dd4:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <MX_TIM2_Init+0xb0>)
 8000dd6:	2227      	movs	r2, #39	@ 0x27
 8000dd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b1f      	ldr	r3, [pc, #124]	@ (8000e58 <MX_TIM2_Init+0xb0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e58 <MX_TIM2_Init+0xb0>)
 8000de2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000de6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <MX_TIM2_Init+0xb0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_TIM2_Init+0xb0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000df4:	4818      	ldr	r0, [pc, #96]	@ (8000e58 <MX_TIM2_Init+0xb0>)
 8000df6:	f002 f94f 	bl	8003098 <HAL_TIM_PWM_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e00:	f7ff fd94 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000e04:	2360      	movs	r3, #96	@ 0x60
 8000e06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000e08:	2380      	movs	r3, #128	@ 0x80
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <MX_TIM2_Init+0xb0>)
 8000e14:	f003 faaa 	bl	800436c <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e1e:	f7ff fd85 	bl	800092c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e22:	2360      	movs	r3, #96	@ 0x60
 8000e24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000e26:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e34:	463b      	mov	r3, r7
 8000e36:	2208      	movs	r2, #8
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4807      	ldr	r0, [pc, #28]	@ (8000e58 <MX_TIM2_Init+0xb0>)
 8000e3c:	f002 fc70 	bl	8003720 <HAL_TIM_PWM_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000e46:	f7ff fd71 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e4a:	4803      	ldr	r0, [pc, #12]	@ (8000e58 <MX_TIM2_Init+0xb0>)
 8000e4c:	f000 f89c 	bl	8000f88 <HAL_TIM_MspPostInit>

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	@ 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200000ec 	.word	0x200000ec

08000e5c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <MX_TIM7_Init+0x64>)
 8000e6e:	4a15      	ldr	r2, [pc, #84]	@ (8000ec4 <MX_TIM7_Init+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 8000e72:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <MX_TIM7_Init+0x64>)
 8000e74:	224f      	movs	r2, #79	@ 0x4f
 8000e76:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <MX_TIM7_Init+0x64>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <MX_TIM7_Init+0x64>)
 8000e80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e84:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <MX_TIM7_Init+0x64>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e8c:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <MX_TIM7_Init+0x64>)
 8000e8e:	f002 f843 	bl	8002f18 <HAL_TIM_Base_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000e98:	f7ff fd48 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <MX_TIM7_Init+0x64>)
 8000eaa:	f003 fa5f 	bl	800436c <HAL_TIMEx_MasterConfigSynchronization>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000eb4:	f7ff fd3a 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000138 	.word	0x20000138
 8000ec4:	40001400 	.word	0x40001400

08000ec8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <HAL_TIM_Base_MspInit+0x78>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d114      	bne.n	8000f04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <HAL_TIM_Base_MspInit+0x7c>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ede:	4a19      	ldr	r2, [pc, #100]	@ (8000f44 <HAL_TIM_Base_MspInit+0x7c>)
 8000ee0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ee4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <HAL_TIM_Base_MspInit+0x7c>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2019      	movs	r0, #25
 8000ef8:	f000 fadd 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000efc:	2019      	movs	r0, #25
 8000efe:	f000 faf6 	bl	80014ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000f02:	e018      	b.n	8000f36 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0f      	ldr	r2, [pc, #60]	@ (8000f48 <HAL_TIM_Base_MspInit+0x80>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d113      	bne.n	8000f36 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <HAL_TIM_Base_MspInit+0x7c>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f12:	4a0c      	ldr	r2, [pc, #48]	@ (8000f44 <HAL_TIM_Base_MspInit+0x7c>)
 8000f14:	f043 0320 	orr.w	r3, r3, #32
 8000f18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_TIM_Base_MspInit+0x7c>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1e:	f003 0320 	and.w	r3, r3, #32
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2037      	movs	r0, #55	@ 0x37
 8000f2c:	f000 fac3 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f30:	2037      	movs	r0, #55	@ 0x37
 8000f32:	f000 fadc 	bl	80014ee <HAL_NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40012c00 	.word	0x40012c00
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40001400 	.word	0x40001400

08000f4c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f5c:	d10b      	bne.n	8000f76 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f5e:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <HAL_TIM_PWM_MspInit+0x38>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f62:	4a08      	ldr	r2, [pc, #32]	@ (8000f84 <HAL_TIM_PWM_MspInit+0x38>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_TIM_PWM_MspInit+0x38>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fa8:	d11c      	bne.n	8000fe4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <HAL_TIM_MspPostInit+0x64>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	4a0f      	ldr	r2, [pc, #60]	@ (8000fec <HAL_TIM_MspPostInit+0x64>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <HAL_TIM_MspPostInit+0x64>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <HAL_TIM_MspPostInit+0x68>)
 8000fe0:	f000 faa0 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	48000400 	.word	0x48000400

08000ff4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_USART2_UART_Init+0x58>)
 8000ffa:	4a15      	ldr	r2, [pc, #84]	@ (8001050 <MX_USART2_UART_Init+0x5c>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	@ (800104c <MX_USART2_UART_Init+0x58>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_USART2_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_USART2_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <MX_USART2_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <MX_USART2_UART_Init+0x58>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <MX_USART2_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b09      	ldr	r3, [pc, #36]	@ (800104c <MX_USART2_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102a:	4b08      	ldr	r3, [pc, #32]	@ (800104c <MX_USART2_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <MX_USART2_UART_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_USART2_UART_Init+0x58>)
 8001038:	f003 fa3e 	bl	80044b8 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001042:	f7ff fc73 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000184 	.word	0x20000184
 8001050:	40004400 	.word	0x40004400

08001054 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0ac      	sub	sp, #176	@ 0xb0
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2288      	movs	r2, #136	@ 0x88
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f003 ffe5 	bl	8005044 <memset>
  if(uartHandle->Instance==USART2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a21      	ldr	r2, [pc, #132]	@ (8001104 <HAL_UART_MspInit+0xb0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d13b      	bne.n	80010fc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001084:	2302      	movs	r3, #2
 8001086:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001088:	2300      	movs	r3, #0
 800108a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4618      	mov	r0, r3
 8001092:	f001 fa85 	bl	80025a0 <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800109c:	f7ff fc46 	bl	800092c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a0:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <HAL_UART_MspInit+0xb4>)
 80010a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a4:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <HAL_UART_MspInit+0xb4>)
 80010a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ac:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <HAL_UART_MspInit+0xb4>)
 80010ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b8:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <HAL_UART_MspInit+0xb4>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010bc:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <HAL_UART_MspInit+0xb4>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c4:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <HAL_UART_MspInit+0xb4>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010d0:	230c      	movs	r3, #12
 80010d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e8:	2307      	movs	r3, #7
 80010ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010f2:	4619      	mov	r1, r3
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f8:	f000 fa14 	bl	8001524 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010fc:	bf00      	nop
 80010fe:	37b0      	adds	r7, #176	@ 0xb0
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40004400 	.word	0x40004400
 8001108:	40021000 	.word	0x40021000

0800110c <Send_data>:
}

/* USER CODE BEGIN 1 */
char buffer[8] = {0};
int32_t new_angle;
void Send_data(uint32_t distance, int32_t angle){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2,(uint8_t*)buffer,sprintf(buffer,"%ld",distance),40);
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4910      	ldr	r1, [pc, #64]	@ (800115c <Send_data+0x50>)
 800111a:	4811      	ldr	r0, [pc, #68]	@ (8001160 <Send_data+0x54>)
 800111c:	f003 ff72 	bl	8005004 <siprintf>
 8001120:	4603      	mov	r3, r0
 8001122:	b29a      	uxth	r2, r3
 8001124:	2328      	movs	r3, #40	@ 0x28
 8001126:	490e      	ldr	r1, [pc, #56]	@ (8001160 <Send_data+0x54>)
 8001128:	480e      	ldr	r0, [pc, #56]	@ (8001164 <Send_data+0x58>)
 800112a:	f003 fa13 	bl	8004554 <HAL_UART_Transmit>
	new_angle = angle + 25;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	3319      	adds	r3, #25
 8001132:	4a0d      	ldr	r2, [pc, #52]	@ (8001168 <Send_data+0x5c>)
 8001134:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2,(uint8_t*)buffer,sprintf(buffer,"%ld",new_angle),40);
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <Send_data+0x5c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	4907      	ldr	r1, [pc, #28]	@ (800115c <Send_data+0x50>)
 800113e:	4808      	ldr	r0, [pc, #32]	@ (8001160 <Send_data+0x54>)
 8001140:	f003 ff60 	bl	8005004 <siprintf>
 8001144:	4603      	mov	r3, r0
 8001146:	b29a      	uxth	r2, r3
 8001148:	2328      	movs	r3, #40	@ 0x28
 800114a:	4905      	ldr	r1, [pc, #20]	@ (8001160 <Send_data+0x54>)
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <Send_data+0x58>)
 800114e:	f003 fa01 	bl	8004554 <HAL_UART_Transmit>
	return;
 8001152:	bf00      	nop
}
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	08005988 	.word	0x08005988
 8001160:	2000020c 	.word	0x2000020c
 8001164:	20000184 	.word	0x20000184
 8001168:	20000214 	.word	0x20000214

0800116c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001170:	f7ff fdb2 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001174:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001176:	490d      	ldr	r1, [pc, #52]	@ (80011ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001178:	4a0d      	ldr	r2, [pc, #52]	@ (80011b0 <LoopForever+0xe>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800118c:	4c0a      	ldr	r4, [pc, #40]	@ (80011b8 <LoopForever+0x16>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119a:	f003 ff61 	bl	8005060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800119e:	f7ff fadd 	bl	800075c <main>

080011a2 <LoopForever>:

LoopForever:
    b LoopForever
 80011a2:	e7fe      	b.n	80011a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011b0:	08005a18 	.word	0x08005a18
  ldr r2, =_sbss
 80011b4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011b8:	20000364 	.word	0x20000364

080011bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_2_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <HAL_Init+0x3c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a0b      	ldr	r2, [pc, #44]	@ (80011fc <HAL_Init+0x3c>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d6:	2003      	movs	r0, #3
 80011d8:	f000 f962 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011dc:	2000      	movs	r0, #0
 80011de:	f000 f80f 	bl	8001200 <HAL_InitTick>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	e001      	b.n	80011f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ee:	f7ff fcd5 	bl	8000b9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40022000 	.word	0x40022000

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800120c:	4b17      	ldr	r3, [pc, #92]	@ (800126c <HAL_InitTick+0x6c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d023      	beq.n	800125c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001214:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <HAL_InitTick+0x70>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_InitTick+0x6c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f96d 	bl	800150a <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10f      	bne.n	8001256 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d809      	bhi.n	8001250 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 f937 	bl	80014b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001248:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <HAL_InitTick+0x74>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e007      	b.n	8001260 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e004      	b.n	8001260 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	e001      	b.n	8001260 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008
 8001270:	20000000 	.word	0x20000000
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008
 800129c:	20000218 	.word	0x20000218

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000218 	.word	0x20000218

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	@ (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4907      	ldr	r1, [pc, #28]	@ (800139c <__NVIC_EnableIRQ+0x38>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	@ (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	@ (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	@ 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	@ 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f7ff ff8e 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	@ (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff29 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff3e 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff8e 	bl	80013f4 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5d 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff31 	bl	8001364 <__NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffa2 	bl	800145c <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	e17f      	b.n	8001834 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2101      	movs	r1, #1
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8171 	beq.w	800182e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d005      	beq.n	8001564 <HAL_GPIO_Init+0x40>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d130      	bne.n	80015c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800159a:	2201      	movs	r2, #1
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	f003 0201 	and.w	r2, r3, #1
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d118      	bne.n	8001604 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015d8:	2201      	movs	r2, #1
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	08db      	lsrs	r3, r3, #3
 80015ee:	f003 0201 	and.w	r2, r3, #1
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b03      	cmp	r3, #3
 800160e:	d017      	beq.n	8001640 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d123      	bne.n	8001694 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	08da      	lsrs	r2, r3, #3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3208      	adds	r2, #8
 8001654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	220f      	movs	r2, #15
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3208      	adds	r2, #8
 800168e:	6939      	ldr	r1, [r7, #16]
 8001690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0203 	and.w	r2, r3, #3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80ac 	beq.w	800182e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001854 <HAL_GPIO_Init+0x330>)
 80016d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016da:	4a5e      	ldr	r2, [pc, #376]	@ (8001854 <HAL_GPIO_Init+0x330>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80016e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001854 <HAL_GPIO_Init+0x330>)
 80016e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001858 <HAL_GPIO_Init+0x334>)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001718:	d025      	beq.n	8001766 <HAL_GPIO_Init+0x242>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4f      	ldr	r2, [pc, #316]	@ (800185c <HAL_GPIO_Init+0x338>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d01f      	beq.n	8001762 <HAL_GPIO_Init+0x23e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4e      	ldr	r2, [pc, #312]	@ (8001860 <HAL_GPIO_Init+0x33c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d019      	beq.n	800175e <HAL_GPIO_Init+0x23a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4d      	ldr	r2, [pc, #308]	@ (8001864 <HAL_GPIO_Init+0x340>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d013      	beq.n	800175a <HAL_GPIO_Init+0x236>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4c      	ldr	r2, [pc, #304]	@ (8001868 <HAL_GPIO_Init+0x344>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d00d      	beq.n	8001756 <HAL_GPIO_Init+0x232>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4b      	ldr	r2, [pc, #300]	@ (800186c <HAL_GPIO_Init+0x348>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d007      	beq.n	8001752 <HAL_GPIO_Init+0x22e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4a      	ldr	r2, [pc, #296]	@ (8001870 <HAL_GPIO_Init+0x34c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d101      	bne.n	800174e <HAL_GPIO_Init+0x22a>
 800174a:	2306      	movs	r3, #6
 800174c:	e00c      	b.n	8001768 <HAL_GPIO_Init+0x244>
 800174e:	2307      	movs	r3, #7
 8001750:	e00a      	b.n	8001768 <HAL_GPIO_Init+0x244>
 8001752:	2305      	movs	r3, #5
 8001754:	e008      	b.n	8001768 <HAL_GPIO_Init+0x244>
 8001756:	2304      	movs	r3, #4
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x244>
 800175a:	2303      	movs	r3, #3
 800175c:	e004      	b.n	8001768 <HAL_GPIO_Init+0x244>
 800175e:	2302      	movs	r3, #2
 8001760:	e002      	b.n	8001768 <HAL_GPIO_Init+0x244>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_GPIO_Init+0x244>
 8001766:	2300      	movs	r3, #0
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	f002 0203 	and.w	r2, r2, #3
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	4093      	lsls	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001778:	4937      	ldr	r1, [pc, #220]	@ (8001858 <HAL_GPIO_Init+0x334>)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001786:	4b3b      	ldr	r3, [pc, #236]	@ (8001874 <HAL_GPIO_Init+0x350>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017aa:	4a32      	ldr	r2, [pc, #200]	@ (8001874 <HAL_GPIO_Init+0x350>)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017b0:	4b30      	ldr	r3, [pc, #192]	@ (8001874 <HAL_GPIO_Init+0x350>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017d4:	4a27      	ldr	r2, [pc, #156]	@ (8001874 <HAL_GPIO_Init+0x350>)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017da:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <HAL_GPIO_Init+0x350>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001874 <HAL_GPIO_Init+0x350>)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_GPIO_Init+0x350>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001828:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <HAL_GPIO_Init+0x350>)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	f47f ae78 	bne.w	8001534 <HAL_GPIO_Init+0x10>
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000
 800185c:	48000400 	.word	0x48000400
 8001860:	48000800 	.word	0x48000800
 8001864:	48000c00 	.word	0x48000c00
 8001868:	48001000 	.word	0x48001000
 800186c:	48001400 	.word	0x48001400
 8001870:	48001800 	.word	0x48001800
 8001874:	40010400 	.word	0x40010400

08001878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e001      	b.n	800189a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018dc:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40007000 	.word	0x40007000

080018f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001902:	d130      	bne.n	8001966 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001904:	4b23      	ldr	r3, [pc, #140]	@ (8001994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800190c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001910:	d038      	beq.n	8001984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001912:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800191a:	4a1e      	ldr	r2, [pc, #120]	@ (8001994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001920:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001922:	4b1d      	ldr	r3, [pc, #116]	@ (8001998 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2232      	movs	r2, #50	@ 0x32
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	4a1b      	ldr	r2, [pc, #108]	@ (800199c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0c9b      	lsrs	r3, r3, #18
 8001934:	3301      	adds	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001938:	e002      	b.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3b01      	subs	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001940:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800194c:	d102      	bne.n	8001954 <HAL_PWREx_ControlVoltageScaling+0x60>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f2      	bne.n	800193a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001954:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800195c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001960:	d110      	bne.n	8001984 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e00f      	b.n	8001986 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800196e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001972:	d007      	beq.n	8001984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001974:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800197c:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001982:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40007000 	.word	0x40007000
 8001998:	20000000 	.word	0x20000000
 800199c:	431bde83 	.word	0x431bde83

080019a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e3ca      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b2:	4b97      	ldr	r3, [pc, #604]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019bc:	4b94      	ldr	r3, [pc, #592]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80e4 	beq.w	8001b9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <HAL_RCC_OscConfig+0x4a>
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b0c      	cmp	r3, #12
 80019de:	f040 808b 	bne.w	8001af8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	f040 8087 	bne.w	8001af8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019ea:	4b89      	ldr	r3, [pc, #548]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_RCC_OscConfig+0x62>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e3a2      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1a      	ldr	r2, [r3, #32]
 8001a06:	4b82      	ldr	r3, [pc, #520]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d004      	beq.n	8001a1c <HAL_RCC_OscConfig+0x7c>
 8001a12:	4b7f      	ldr	r3, [pc, #508]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a1a:	e005      	b.n	8001a28 <HAL_RCC_OscConfig+0x88>
 8001a1c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d223      	bcs.n	8001a74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fd55 	bl	80024e0 <RCC_SetFlashLatencyFromMSIRange>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e383      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a40:	4b73      	ldr	r3, [pc, #460]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a72      	ldr	r2, [pc, #456]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a46:	f043 0308 	orr.w	r3, r3, #8
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b70      	ldr	r3, [pc, #448]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	496d      	ldr	r1, [pc, #436]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a5e:	4b6c      	ldr	r3, [pc, #432]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	4968      	ldr	r1, [pc, #416]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
 8001a72:	e025      	b.n	8001ac0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a74:	4b66      	ldr	r3, [pc, #408]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a65      	ldr	r2, [pc, #404]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a7a:	f043 0308 	orr.w	r3, r3, #8
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b63      	ldr	r3, [pc, #396]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4960      	ldr	r1, [pc, #384]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a92:	4b5f      	ldr	r3, [pc, #380]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	495b      	ldr	r1, [pc, #364]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fd15 	bl	80024e0 <RCC_SetFlashLatencyFromMSIRange>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e343      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ac0:	f000 fc4a 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b52      	ldr	r3, [pc, #328]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	091b      	lsrs	r3, r3, #4
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	4950      	ldr	r1, [pc, #320]	@ (8001c14 <HAL_RCC_OscConfig+0x274>)
 8001ad2:	5ccb      	ldrb	r3, [r1, r3]
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8001adc:	4a4e      	ldr	r2, [pc, #312]	@ (8001c18 <HAL_RCC_OscConfig+0x278>)
 8001ade:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ae0:	4b4e      	ldr	r3, [pc, #312]	@ (8001c1c <HAL_RCC_OscConfig+0x27c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fb8b 	bl	8001200 <HAL_InitTick>
 8001aea:	4603      	mov	r3, r0
 8001aec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d052      	beq.n	8001b9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	e327      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d032      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b00:	4b43      	ldr	r3, [pc, #268]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a42      	ldr	r2, [pc, #264]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fbc8 	bl	80012a0 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b14:	f7ff fbc4 	bl	80012a0 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e310      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b26:	4b3a      	ldr	r3, [pc, #232]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b32:	4b37      	ldr	r3, [pc, #220]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a36      	ldr	r2, [pc, #216]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b34      	ldr	r3, [pc, #208]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4931      	ldr	r1, [pc, #196]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b50:	4b2f      	ldr	r3, [pc, #188]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	492c      	ldr	r1, [pc, #176]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
 8001b64:	e01a      	b.n	8001b9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b66:	4b2a      	ldr	r3, [pc, #168]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a29      	ldr	r2, [pc, #164]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b72:	f7ff fb95 	bl	80012a0 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fb91 	bl	80012a0 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e2dd      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b8c:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x1da>
 8001b98:	e000      	b.n	8001b9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d074      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x21a>
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b0c      	cmp	r3, #12
 8001bb2:	d10e      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d064      	beq.n	8001c90 <HAL_RCC_OscConfig+0x2f0>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d160      	bne.n	8001c90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e2ba      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x24a>
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	e026      	b.n	8001c38 <HAL_RCC_OscConfig+0x298>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bf2:	d115      	bne.n	8001c20 <HAL_RCC_OscConfig+0x280>
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b03      	ldr	r3, [pc, #12]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a02      	ldr	r2, [pc, #8]	@ (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	e014      	b.n	8001c38 <HAL_RCC_OscConfig+0x298>
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	0800598c 	.word	0x0800598c
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004
 8001c20:	4ba0      	ldr	r3, [pc, #640]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a9f      	ldr	r2, [pc, #636]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a9c      	ldr	r2, [pc, #624]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fb2e 	bl	80012a0 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fb2a 	bl	80012a0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	@ 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e276      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5a:	4b92      	ldr	r3, [pc, #584]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x2a8>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff fb1a 	bl	80012a0 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff fb16 	bl	80012a0 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	@ 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e262      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c82:	4b88      	ldr	r3, [pc, #544]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x2d0>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d060      	beq.n	8001d60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x310>
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d119      	bne.n	8001cde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d116      	bne.n	8001cde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x328>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e23f      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b76      	ldr	r3, [pc, #472]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	061b      	lsls	r3, r3, #24
 8001cd6:	4973      	ldr	r1, [pc, #460]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cdc:	e040      	b.n	8001d60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d023      	beq.n	8001d2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce6:	4b6f      	ldr	r3, [pc, #444]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a6e      	ldr	r2, [pc, #440]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fad5 	bl	80012a0 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fad1 	bl	80012a0 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e21d      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d0c:	4b65      	ldr	r3, [pc, #404]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d18:	4b62      	ldr	r3, [pc, #392]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	495f      	ldr	r1, [pc, #380]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
 8001d2c:	e018      	b.n	8001d60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a5c      	ldr	r2, [pc, #368]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fab1 	bl	80012a0 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d42:	f7ff faad 	bl	80012a0 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e1f9      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d54:	4b53      	ldr	r3, [pc, #332]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d03c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01c      	beq.n	8001dae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d74:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff fa8c 	bl	80012a0 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fa88 	bl	80012a0 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1d4      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d9e:	4b41      	ldr	r3, [pc, #260]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0ef      	beq.n	8001d8c <HAL_RCC_OscConfig+0x3ec>
 8001dac:	e01b      	b.n	8001de6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db4:	4a3b      	ldr	r2, [pc, #236]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fa6f 	bl	80012a0 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fa6b 	bl	80012a0 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e1b7      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dd8:	4b32      	ldr	r3, [pc, #200]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1ef      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80a6 	beq.w	8001f40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001df8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10d      	bne.n	8001e20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	4b27      	ldr	r3, [pc, #156]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e08:	4a26      	ldr	r2, [pc, #152]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e10:	4b24      	ldr	r3, [pc, #144]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e20:	4b21      	ldr	r3, [pc, #132]	@ (8001ea8 <HAL_RCC_OscConfig+0x508>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d118      	bne.n	8001e5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea8 <HAL_RCC_OscConfig+0x508>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea8 <HAL_RCC_OscConfig+0x508>)
 8001e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e38:	f7ff fa32 	bl	80012a0 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e40:	f7ff fa2e 	bl	80012a0 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e17a      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e52:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <HAL_RCC_OscConfig+0x508>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d108      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4d8>
 8001e66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e76:	e029      	b.n	8001ecc <HAL_RCC_OscConfig+0x52c>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b05      	cmp	r3, #5
 8001e7e:	d115      	bne.n	8001eac <HAL_RCC_OscConfig+0x50c>
 8001e80:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e86:	4a07      	ldr	r2, [pc, #28]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e90:	4b04      	ldr	r3, [pc, #16]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e96:	4a03      	ldr	r2, [pc, #12]	@ (8001ea4 <HAL_RCC_OscConfig+0x504>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ea0:	e014      	b.n	8001ecc <HAL_RCC_OscConfig+0x52c>
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	4b9c      	ldr	r3, [pc, #624]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8001eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb2:	4a9b      	ldr	r2, [pc, #620]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ebc:	4b98      	ldr	r3, [pc, #608]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec2:	4a97      	ldr	r2, [pc, #604]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d016      	beq.n	8001f02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed4:	f7ff f9e4 	bl	80012a0 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001edc:	f7ff f9e0 	bl	80012a0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e12a      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef2:	4b8b      	ldr	r3, [pc, #556]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8001ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ed      	beq.n	8001edc <HAL_RCC_OscConfig+0x53c>
 8001f00:	e015      	b.n	8001f2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f02:	f7ff f9cd 	bl	80012a0 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0a:	f7ff f9c9 	bl	80012a0 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e113      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f20:	4b7f      	ldr	r3, [pc, #508]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1ed      	bne.n	8001f0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f2e:	7ffb      	ldrb	r3, [r7, #31]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d105      	bne.n	8001f40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f34:	4b7a      	ldr	r3, [pc, #488]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f38:	4a79      	ldr	r2, [pc, #484]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8001f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80fe 	beq.w	8002146 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	f040 80d0 	bne.w	80020f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f54:	4b72      	ldr	r3, [pc, #456]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d130      	bne.n	8001fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	3b01      	subs	r3, #1
 8001f74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d127      	bne.n	8001fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d11f      	bne.n	8001fca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f94:	2a07      	cmp	r2, #7
 8001f96:	bf14      	ite	ne
 8001f98:	2201      	movne	r2, #1
 8001f9a:	2200      	moveq	r2, #0
 8001f9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d113      	bne.n	8001fca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	085b      	lsrs	r3, r3, #1
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d06e      	beq.n	80020a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b0c      	cmp	r3, #12
 8001fce:	d069      	beq.n	80020a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fd0:	4b53      	ldr	r3, [pc, #332]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d105      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fdc:	4b50      	ldr	r3, [pc, #320]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0ad      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fec:	4b4c      	ldr	r3, [pc, #304]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a4b      	ldr	r2, [pc, #300]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8001ff2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ff6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ff8:	f7ff f952 	bl	80012a0 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002000:	f7ff f94e 	bl	80012a0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e09a      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002012:	4b43      	ldr	r3, [pc, #268]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800201e:	4b40      	ldr	r3, [pc, #256]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	4b40      	ldr	r3, [pc, #256]	@ (8002124 <HAL_RCC_OscConfig+0x784>)
 8002024:	4013      	ands	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800202e:	3a01      	subs	r2, #1
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	4311      	orrs	r1, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002038:	0212      	lsls	r2, r2, #8
 800203a:	4311      	orrs	r1, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002040:	0852      	lsrs	r2, r2, #1
 8002042:	3a01      	subs	r2, #1
 8002044:	0552      	lsls	r2, r2, #21
 8002046:	4311      	orrs	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800204c:	0852      	lsrs	r2, r2, #1
 800204e:	3a01      	subs	r2, #1
 8002050:	0652      	lsls	r2, r2, #25
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002058:	0912      	lsrs	r2, r2, #4
 800205a:	0452      	lsls	r2, r2, #17
 800205c:	430a      	orrs	r2, r1
 800205e:	4930      	ldr	r1, [pc, #192]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8002060:	4313      	orrs	r3, r2
 8002062:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002064:	4b2e      	ldr	r3, [pc, #184]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2d      	ldr	r2, [pc, #180]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 800206a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800206e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002070:	4b2b      	ldr	r3, [pc, #172]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a2a      	ldr	r2, [pc, #168]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8002076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800207a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800207c:	f7ff f910 	bl	80012a0 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002084:	f7ff f90c 	bl	80012a0 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e058      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002096:	4b22      	ldr	r3, [pc, #136]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020a2:	e050      	b.n	8002146 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e04f      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d148      	bne.n	8002146 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a19      	ldr	r2, [pc, #100]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 80020ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020c0:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a16      	ldr	r2, [pc, #88]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 80020c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020cc:	f7ff f8e8 	bl	80012a0 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff f8e4 	bl	80012a0 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e030      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x734>
 80020f2:	e028      	b.n	8002146 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d023      	beq.n	8002142 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a08      	ldr	r2, [pc, #32]	@ (8002120 <HAL_RCC_OscConfig+0x780>)
 8002100:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002106:	f7ff f8cb 	bl	80012a0 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800210c:	e00c      	b.n	8002128 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210e:	f7ff f8c7 	bl	80012a0 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d905      	bls.n	8002128 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e013      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
 8002120:	40021000 	.word	0x40021000
 8002124:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002128:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_RCC_OscConfig+0x7b0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1ec      	bne.n	800210e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002134:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_RCC_OscConfig+0x7b0>)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	4905      	ldr	r1, [pc, #20]	@ (8002150 <HAL_RCC_OscConfig+0x7b0>)
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <HAL_RCC_OscConfig+0x7b4>)
 800213c:	4013      	ands	r3, r2
 800213e:	60cb      	str	r3, [r1, #12]
 8002140:	e001      	b.n	8002146 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	feeefffc 	.word	0xfeeefffc

08002158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0e7      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b75      	ldr	r3, [pc, #468]	@ (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d910      	bls.n	800219c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b72      	ldr	r3, [pc, #456]	@ (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 0207 	bic.w	r2, r3, #7
 8002182:	4970      	ldr	r1, [pc, #448]	@ (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b6e      	ldr	r3, [pc, #440]	@ (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0cf      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d010      	beq.n	80021ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4b66      	ldr	r3, [pc, #408]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d908      	bls.n	80021ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b8:	4b63      	ldr	r3, [pc, #396]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4960      	ldr	r1, [pc, #384]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d04c      	beq.n	8002270 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	4b5a      	ldr	r3, [pc, #360]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d121      	bne.n	800222e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0a6      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f6:	4b54      	ldr	r3, [pc, #336]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d115      	bne.n	800222e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e09a      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800220e:	4b4e      	ldr	r3, [pc, #312]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e08e      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800221e:	4b4a      	ldr	r3, [pc, #296]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e086      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800222e:	4b46      	ldr	r3, [pc, #280]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f023 0203 	bic.w	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4943      	ldr	r1, [pc, #268]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002240:	f7ff f82e 	bl	80012a0 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	e00a      	b.n	800225e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7ff f82a 	bl	80012a0 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e06e      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	4b3a      	ldr	r3, [pc, #232]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 020c 	and.w	r2, r3, #12
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	429a      	cmp	r2, r3
 800226e:	d1eb      	bne.n	8002248 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d010      	beq.n	800229e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	4b31      	ldr	r3, [pc, #196]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002288:	429a      	cmp	r2, r3
 800228a:	d208      	bcs.n	800229e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	4b2e      	ldr	r3, [pc, #184]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	492b      	ldr	r1, [pc, #172]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800229e:	4b29      	ldr	r3, [pc, #164]	@ (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d210      	bcs.n	80022ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ac:	4b25      	ldr	r3, [pc, #148]	@ (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 0207 	bic.w	r2, r3, #7
 80022b4:	4923      	ldr	r1, [pc, #140]	@ (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022bc:	4b21      	ldr	r3, [pc, #132]	@ (8002344 <HAL_RCC_ClockConfig+0x1ec>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e036      	b.n	800233c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022da:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	4918      	ldr	r1, [pc, #96]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022f8:	4b13      	ldr	r3, [pc, #76]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4910      	ldr	r1, [pc, #64]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	4313      	orrs	r3, r2
 800230a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800230c:	f000 f824 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002310:	4602      	mov	r2, r0
 8002312:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	490b      	ldr	r1, [pc, #44]	@ (800234c <HAL_RCC_ClockConfig+0x1f4>)
 800231e:	5ccb      	ldrb	r3, [r1, r3]
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
 8002328:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <HAL_RCC_ClockConfig+0x1f8>)
 800232a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800232c:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_RCC_ClockConfig+0x1fc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe ff65 	bl	8001200 <HAL_InitTick>
 8002336:	4603      	mov	r3, r0
 8002338:	72fb      	strb	r3, [r7, #11]

  return status;
 800233a:	7afb      	ldrb	r3, [r7, #11]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40022000 	.word	0x40022000
 8002348:	40021000 	.word	0x40021000
 800234c:	0800598c 	.word	0x0800598c
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	@ 0x24
 800235c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002366:	4b3e      	ldr	r3, [pc, #248]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002370:	4b3b      	ldr	r3, [pc, #236]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x34>
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2b0c      	cmp	r3, #12
 8002384:	d121      	bne.n	80023ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d11e      	bne.n	80023ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800238c:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002398:	4b31      	ldr	r3, [pc, #196]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 800239a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	e005      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10d      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d102      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023d0:	4b25      	ldr	r3, [pc, #148]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x110>)
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	e004      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023dc:	4b23      	ldr	r3, [pc, #140]	@ (800246c <HAL_RCC_GetSysClockFreq+0x114>)
 80023de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2b0c      	cmp	r3, #12
 80023e4:	d134      	bne.n	8002450 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0xa6>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d003      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0xac>
 80023fc:	e005      	b.n	800240a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x110>)
 8002400:	617b      	str	r3, [r7, #20]
      break;
 8002402:	e005      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002404:	4b19      	ldr	r3, [pc, #100]	@ (800246c <HAL_RCC_GetSysClockFreq+0x114>)
 8002406:	617b      	str	r3, [r7, #20]
      break;
 8002408:	e002      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	617b      	str	r3, [r7, #20]
      break;
 800240e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002410:	4b13      	ldr	r3, [pc, #76]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	3301      	adds	r3, #1
 800241c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800241e:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	fb03 f202 	mul.w	r2, r3, r2
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002436:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x108>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	0e5b      	lsrs	r3, r3, #25
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	3301      	adds	r3, #1
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002450:	69bb      	ldr	r3, [r7, #24]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	@ 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	080059a4 	.word	0x080059a4
 8002468:	00f42400 	.word	0x00f42400
 800246c:	007a1200 	.word	0x007a1200

08002470 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002474:	4b03      	ldr	r3, [pc, #12]	@ (8002484 <HAL_RCC_GetHCLKFreq+0x14>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000000 	.word	0x20000000

08002488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800248c:	f7ff fff0 	bl	8002470 <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	4904      	ldr	r1, [pc, #16]	@ (80024b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	0800599c 	.word	0x0800599c

080024b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024b8:	f7ff ffda 	bl	8002470 <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	0adb      	lsrs	r3, r3, #11
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4904      	ldr	r1, [pc, #16]	@ (80024dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	0800599c 	.word	0x0800599c

080024e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024f8:	f7ff f9ee 	bl	80018d8 <HAL_PWREx_GetVoltageRange>
 80024fc:	6178      	str	r0, [r7, #20]
 80024fe:	e014      	b.n	800252a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002500:	4b25      	ldr	r3, [pc, #148]	@ (8002598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002504:	4a24      	ldr	r2, [pc, #144]	@ (8002598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002506:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800250a:	6593      	str	r3, [r2, #88]	@ 0x58
 800250c:	4b22      	ldr	r3, [pc, #136]	@ (8002598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002518:	f7ff f9de 	bl	80018d8 <HAL_PWREx_GetVoltageRange>
 800251c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800251e:	4b1e      	ldr	r3, [pc, #120]	@ (8002598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	4a1d      	ldr	r2, [pc, #116]	@ (8002598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002524:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002528:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002530:	d10b      	bne.n	800254a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b80      	cmp	r3, #128	@ 0x80
 8002536:	d919      	bls.n	800256c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2ba0      	cmp	r3, #160	@ 0xa0
 800253c:	d902      	bls.n	8002544 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800253e:	2302      	movs	r3, #2
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	e013      	b.n	800256c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002544:	2301      	movs	r3, #1
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	e010      	b.n	800256c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b80      	cmp	r3, #128	@ 0x80
 800254e:	d902      	bls.n	8002556 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002550:	2303      	movs	r3, #3
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	e00a      	b.n	800256c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b80      	cmp	r3, #128	@ 0x80
 800255a:	d102      	bne.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800255c:	2302      	movs	r3, #2
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e004      	b.n	800256c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b70      	cmp	r3, #112	@ 0x70
 8002566:	d101      	bne.n	800256c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002568:	2301      	movs	r3, #1
 800256a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 0207 	bic.w	r2, r3, #7
 8002574:	4909      	ldr	r1, [pc, #36]	@ (800259c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800257c:	4b07      	ldr	r3, [pc, #28]	@ (800259c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	429a      	cmp	r2, r3
 8002588:	d001      	beq.n	800258e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	40022000 	.word	0x40022000

080025a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025a8:	2300      	movs	r3, #0
 80025aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025ac:	2300      	movs	r3, #0
 80025ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d041      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025c4:	d02a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025ca:	d824      	bhi.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025d0:	d008      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025d6:	d81e      	bhi.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025e0:	d010      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025e2:	e018      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025e4:	4b86      	ldr	r3, [pc, #536]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a85      	ldr	r2, [pc, #532]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025f0:	e015      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fabb 	bl	8002b74 <RCCEx_PLLSAI1_Config>
 80025fe:	4603      	mov	r3, r0
 8002600:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002602:	e00c      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3320      	adds	r3, #32
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fba6 	bl	8002d5c <RCCEx_PLLSAI2_Config>
 8002610:	4603      	mov	r3, r0
 8002612:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002614:	e003      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	74fb      	strb	r3, [r7, #19]
      break;
 800261a:	e000      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800261c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800261e:	7cfb      	ldrb	r3, [r7, #19]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10b      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002624:	4b76      	ldr	r3, [pc, #472]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002632:	4973      	ldr	r1, [pc, #460]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800263a:	e001      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d041      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002650:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002654:	d02a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002656:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800265a:	d824      	bhi.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800265c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002660:	d008      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002662:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002666:	d81e      	bhi.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800266c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002670:	d010      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002672:	e018      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002674:	4b62      	ldr	r3, [pc, #392]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a61      	ldr	r2, [pc, #388]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002680:	e015      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fa73 	bl	8002b74 <RCCEx_PLLSAI1_Config>
 800268e:	4603      	mov	r3, r0
 8002690:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002692:	e00c      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3320      	adds	r3, #32
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fb5e 	bl	8002d5c <RCCEx_PLLSAI2_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026a4:	e003      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	74fb      	strb	r3, [r7, #19]
      break;
 80026aa:	e000      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10b      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026b4:	4b52      	ldr	r3, [pc, #328]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026c2:	494f      	ldr	r1, [pc, #316]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026ca:	e001      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80a0 	beq.w	800281e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026e2:	4b47      	ldr	r3, [pc, #284]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026f2:	2300      	movs	r3, #0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	4b41      	ldr	r3, [pc, #260]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fc:	4a40      	ldr	r2, [pc, #256]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002702:	6593      	str	r3, [r2, #88]	@ 0x58
 8002704:	4b3e      	ldr	r3, [pc, #248]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002710:	2301      	movs	r3, #1
 8002712:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002714:	4b3b      	ldr	r3, [pc, #236]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a3a      	ldr	r2, [pc, #232]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800271a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800271e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002720:	f7fe fdbe 	bl	80012a0 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002726:	e009      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002728:	f7fe fdba 	bl	80012a0 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d902      	bls.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	74fb      	strb	r3, [r7, #19]
        break;
 800273a:	e005      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800273c:	4b31      	ldr	r3, [pc, #196]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ef      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d15c      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800274e:	4b2c      	ldr	r3, [pc, #176]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002758:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01f      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	d019      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800276c:	4b24      	ldr	r3, [pc, #144]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002776:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002778:	4b21      	ldr	r3, [pc, #132]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277e:	4a20      	ldr	r2, [pc, #128]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002788:	4b1d      	ldr	r3, [pc, #116]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278e:	4a1c      	ldr	r2, [pc, #112]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002790:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002798:	4a19      	ldr	r2, [pc, #100]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d016      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7fe fd79 	bl	80012a0 <HAL_GetTick>
 80027ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b0:	e00b      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7fe fd75 	bl	80012a0 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d902      	bls.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	74fb      	strb	r3, [r7, #19]
            break;
 80027c8:	e006      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0ec      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027de:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027ee:	4904      	ldr	r1, [pc, #16]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027f6:	e009      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	74bb      	strb	r3, [r7, #18]
 80027fc:	e006      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800280c:	7c7b      	ldrb	r3, [r7, #17]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002812:	4b9e      	ldr	r3, [pc, #632]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002816:	4a9d      	ldr	r2, [pc, #628]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800281c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800282a:	4b98      	ldr	r3, [pc, #608]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002830:	f023 0203 	bic.w	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002838:	4994      	ldr	r1, [pc, #592]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800284c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002852:	f023 020c 	bic.w	r2, r3, #12
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285a:	498c      	ldr	r1, [pc, #560]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800286e:	4b87      	ldr	r3, [pc, #540]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002874:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	4983      	ldr	r1, [pc, #524]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002890:	4b7e      	ldr	r3, [pc, #504]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002896:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289e:	497b      	ldr	r1, [pc, #492]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028b2:	4b76      	ldr	r3, [pc, #472]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c0:	4972      	ldr	r1, [pc, #456]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028d4:	4b6d      	ldr	r3, [pc, #436]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e2:	496a      	ldr	r1, [pc, #424]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028f6:	4b65      	ldr	r3, [pc, #404]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002904:	4961      	ldr	r1, [pc, #388]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002918:	4b5c      	ldr	r3, [pc, #368]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002926:	4959      	ldr	r1, [pc, #356]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800293a:	4b54      	ldr	r3, [pc, #336]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002940:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002948:	4950      	ldr	r1, [pc, #320]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800295c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002962:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296a:	4948      	ldr	r1, [pc, #288]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800297e:	4b43      	ldr	r3, [pc, #268]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002984:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298c:	493f      	ldr	r1, [pc, #252]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d028      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029a0:	4b3a      	ldr	r3, [pc, #232]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ae:	4937      	ldr	r1, [pc, #220]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029be:	d106      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c0:	4b32      	ldr	r3, [pc, #200]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a31      	ldr	r2, [pc, #196]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ca:	60d3      	str	r3, [r2, #12]
 80029cc:	e011      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029d6:	d10c      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	2101      	movs	r1, #1
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f8c8 	bl	8002b74 <RCCEx_PLLSAI1_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d028      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029fe:	4b23      	ldr	r3, [pc, #140]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a04:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0c:	491f      	ldr	r1, [pc, #124]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a1c:	d106      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	4a1a      	ldr	r2, [pc, #104]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a28:	60d3      	str	r3, [r2, #12]
 8002a2a:	e011      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 f899 	bl	8002b74 <RCCEx_PLLSAI1_Config>
 8002a42:	4603      	mov	r3, r0
 8002a44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a46:	7cfb      	ldrb	r3, [r7, #19]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d02b      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a6a:	4908      	ldr	r1, [pc, #32]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a7a:	d109      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a7c:	4b03      	ldr	r3, [pc, #12]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a02      	ldr	r2, [pc, #8]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a86:	60d3      	str	r3, [r2, #12]
 8002a88:	e014      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 f867 	bl	8002b74 <RCCEx_PLLSAI1_Config>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d02f      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ace:	4928      	ldr	r1, [pc, #160]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ada:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ade:	d10d      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f844 	bl	8002b74 <RCCEx_PLLSAI1_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d014      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002af6:	7cfb      	ldrb	r3, [r7, #19]
 8002af8:	74bb      	strb	r3, [r7, #18]
 8002afa:	e011      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3320      	adds	r3, #32
 8002b0a:	2102      	movs	r1, #2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 f925 	bl	8002d5c <RCCEx_PLLSAI2_Config>
 8002b12:	4603      	mov	r3, r0
 8002b14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b16:	7cfb      	ldrb	r3, [r7, #19]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b2c:	4b10      	ldr	r3, [pc, #64]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b32:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b3a:	490d      	ldr	r1, [pc, #52]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b4e:	4b08      	ldr	r3, [pc, #32]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b5e:	4904      	ldr	r1, [pc, #16]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b66:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000

08002b74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b82:	4b75      	ldr	r3, [pc, #468]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d018      	beq.n	8002bc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b8e:	4b72      	ldr	r3, [pc, #456]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0203 	and.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d10d      	bne.n	8002bba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ba6:	4b6c      	ldr	r3, [pc, #432]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
       ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d047      	beq.n	8002c4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	e044      	b.n	8002c4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d018      	beq.n	8002bfa <RCCEx_PLLSAI1_Config+0x86>
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d825      	bhi.n	8002c18 <RCCEx_PLLSAI1_Config+0xa4>
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d002      	beq.n	8002bd6 <RCCEx_PLLSAI1_Config+0x62>
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d009      	beq.n	8002be8 <RCCEx_PLLSAI1_Config+0x74>
 8002bd4:	e020      	b.n	8002c18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bd6:	4b60      	ldr	r3, [pc, #384]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d11d      	bne.n	8002c1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be6:	e01a      	b.n	8002c1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002be8:	4b5b      	ldr	r3, [pc, #364]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d116      	bne.n	8002c22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf8:	e013      	b.n	8002c22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bfa:	4b57      	ldr	r3, [pc, #348]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10f      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c06:	4b54      	ldr	r3, [pc, #336]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c16:	e006      	b.n	8002c26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c1c:	e004      	b.n	8002c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c1e:	bf00      	nop
 8002c20:	e002      	b.n	8002c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c22:	bf00      	nop
 8002c24:	e000      	b.n	8002c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10d      	bne.n	8002c4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6819      	ldr	r1, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	430b      	orrs	r3, r1
 8002c44:	4944      	ldr	r1, [pc, #272]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d17d      	bne.n	8002d4c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c50:	4b41      	ldr	r3, [pc, #260]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a40      	ldr	r2, [pc, #256]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fb20 	bl	80012a0 <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c62:	e009      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c64:	f7fe fb1c 	bl	80012a0 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d902      	bls.n	8002c78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	73fb      	strb	r3, [r7, #15]
        break;
 8002c76:	e005      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c78:	4b37      	ldr	r3, [pc, #220]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ef      	bne.n	8002c64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d160      	bne.n	8002d4c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d111      	bne.n	8002cb4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c90:	4b31      	ldr	r3, [pc, #196]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6892      	ldr	r2, [r2, #8]
 8002ca0:	0211      	lsls	r1, r2, #8
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68d2      	ldr	r2, [r2, #12]
 8002ca6:	0912      	lsrs	r2, r2, #4
 8002ca8:	0452      	lsls	r2, r2, #17
 8002caa:	430a      	orrs	r2, r1
 8002cac:	492a      	ldr	r1, [pc, #168]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	610b      	str	r3, [r1, #16]
 8002cb2:	e027      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d112      	bne.n	8002ce0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cba:	4b27      	ldr	r3, [pc, #156]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002cc2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6892      	ldr	r2, [r2, #8]
 8002cca:	0211      	lsls	r1, r2, #8
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6912      	ldr	r2, [r2, #16]
 8002cd0:	0852      	lsrs	r2, r2, #1
 8002cd2:	3a01      	subs	r2, #1
 8002cd4:	0552      	lsls	r2, r2, #21
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	491f      	ldr	r1, [pc, #124]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	610b      	str	r3, [r1, #16]
 8002cde:	e011      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ce8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6892      	ldr	r2, [r2, #8]
 8002cf0:	0211      	lsls	r1, r2, #8
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6952      	ldr	r2, [r2, #20]
 8002cf6:	0852      	lsrs	r2, r2, #1
 8002cf8:	3a01      	subs	r2, #1
 8002cfa:	0652      	lsls	r2, r2, #25
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	4916      	ldr	r1, [pc, #88]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d04:	4b14      	ldr	r3, [pc, #80]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a13      	ldr	r2, [pc, #76]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe fac6 	bl	80012a0 <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d16:	e009      	b.n	8002d2c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d18:	f7fe fac2 	bl	80012a0 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d902      	bls.n	8002d2c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	73fb      	strb	r3, [r7, #15]
          break;
 8002d2a:	e005      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ef      	beq.n	8002d18 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d3e:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	4904      	ldr	r1, [pc, #16]	@ (8002d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000

08002d5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d018      	beq.n	8002da8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d76:	4b67      	ldr	r3, [pc, #412]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0203 	and.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d10d      	bne.n	8002da2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
       ||
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d8e:	4b61      	ldr	r3, [pc, #388]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d047      	beq.n	8002e32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
 8002da6:	e044      	b.n	8002e32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d018      	beq.n	8002de2 <RCCEx_PLLSAI2_Config+0x86>
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d825      	bhi.n	8002e00 <RCCEx_PLLSAI2_Config+0xa4>
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d002      	beq.n	8002dbe <RCCEx_PLLSAI2_Config+0x62>
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d009      	beq.n	8002dd0 <RCCEx_PLLSAI2_Config+0x74>
 8002dbc:	e020      	b.n	8002e00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dbe:	4b55      	ldr	r3, [pc, #340]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d11d      	bne.n	8002e06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dce:	e01a      	b.n	8002e06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dd0:	4b50      	ldr	r3, [pc, #320]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d116      	bne.n	8002e0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de0:	e013      	b.n	8002e0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002de2:	4b4c      	ldr	r3, [pc, #304]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10f      	bne.n	8002e0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dfe:	e006      	b.n	8002e0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
      break;
 8002e04:	e004      	b.n	8002e10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e06:	bf00      	nop
 8002e08:	e002      	b.n	8002e10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e0a:	bf00      	nop
 8002e0c:	e000      	b.n	8002e10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10d      	bne.n	8002e32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e16:	4b3f      	ldr	r3, [pc, #252]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6819      	ldr	r1, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	4939      	ldr	r1, [pc, #228]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d167      	bne.n	8002f08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e38:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a35      	ldr	r2, [pc, #212]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e44:	f7fe fa2c 	bl	80012a0 <HAL_GetTick>
 8002e48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e4a:	e009      	b.n	8002e60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e4c:	f7fe fa28 	bl	80012a0 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d902      	bls.n	8002e60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e5e:	e005      	b.n	8002e6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e60:	4b2c      	ldr	r3, [pc, #176]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ef      	bne.n	8002e4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d14a      	bne.n	8002f08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d111      	bne.n	8002e9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e78:	4b26      	ldr	r3, [pc, #152]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6892      	ldr	r2, [r2, #8]
 8002e88:	0211      	lsls	r1, r2, #8
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68d2      	ldr	r2, [r2, #12]
 8002e8e:	0912      	lsrs	r2, r2, #4
 8002e90:	0452      	lsls	r2, r2, #17
 8002e92:	430a      	orrs	r2, r1
 8002e94:	491f      	ldr	r1, [pc, #124]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	614b      	str	r3, [r1, #20]
 8002e9a:	e011      	b.n	8002ec0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ea4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6892      	ldr	r2, [r2, #8]
 8002eac:	0211      	lsls	r1, r2, #8
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6912      	ldr	r2, [r2, #16]
 8002eb2:	0852      	lsrs	r2, r2, #1
 8002eb4:	3a01      	subs	r2, #1
 8002eb6:	0652      	lsls	r2, r2, #25
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	4916      	ldr	r1, [pc, #88]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ec0:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a13      	ldr	r2, [pc, #76]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fe f9e8 	bl	80012a0 <HAL_GetTick>
 8002ed0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ed2:	e009      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ed4:	f7fe f9e4 	bl	80012a0 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d902      	bls.n	8002ee8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ee6:	e005      	b.n	8002ef4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ef      	beq.n	8002ed4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002efa:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4904      	ldr	r1, [pc, #16]	@ (8002f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e049      	b.n	8002fbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd ffc2 	bl	8000ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f000 fd60 	bl	8003a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d001      	beq.n	8002fe0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e047      	b.n	8003070 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a23      	ldr	r2, [pc, #140]	@ (800307c <HAL_TIM_Base_Start+0xb4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01d      	beq.n	800302e <HAL_TIM_Base_Start+0x66>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffa:	d018      	beq.n	800302e <HAL_TIM_Base_Start+0x66>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1f      	ldr	r2, [pc, #124]	@ (8003080 <HAL_TIM_Base_Start+0xb8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_TIM_Base_Start+0x66>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1e      	ldr	r2, [pc, #120]	@ (8003084 <HAL_TIM_Base_Start+0xbc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00e      	beq.n	800302e <HAL_TIM_Base_Start+0x66>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1c      	ldr	r2, [pc, #112]	@ (8003088 <HAL_TIM_Base_Start+0xc0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d009      	beq.n	800302e <HAL_TIM_Base_Start+0x66>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1b      	ldr	r2, [pc, #108]	@ (800308c <HAL_TIM_Base_Start+0xc4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <HAL_TIM_Base_Start+0x66>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a19      	ldr	r2, [pc, #100]	@ (8003090 <HAL_TIM_Base_Start+0xc8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d115      	bne.n	800305a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	4b17      	ldr	r3, [pc, #92]	@ (8003094 <HAL_TIM_Base_Start+0xcc>)
 8003036:	4013      	ands	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b06      	cmp	r3, #6
 800303e:	d015      	beq.n	800306c <HAL_TIM_Base_Start+0xa4>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003046:	d011      	beq.n	800306c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003058:	e008      	b.n	800306c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e000      	b.n	800306e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40012c00 	.word	0x40012c00
 8003080:	40000400 	.word	0x40000400
 8003084:	40000800 	.word	0x40000800
 8003088:	40000c00 	.word	0x40000c00
 800308c:	40013400 	.word	0x40013400
 8003090:	40014000 	.word	0x40014000
 8003094:	00010007 	.word	0x00010007

08003098 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e049      	b.n	800313e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fd ff44 	bl	8000f4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f000 fca0 	bl	8003a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	6839      	ldr	r1, [r7, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f001 f8e0 	bl	8004320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a3e      	ldr	r2, [pc, #248]	@ (8003260 <HAL_TIM_PWM_Stop+0x118>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_TIM_PWM_Stop+0x4a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a3d      	ldr	r2, [pc, #244]	@ (8003264 <HAL_TIM_PWM_Stop+0x11c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00e      	beq.n	8003192 <HAL_TIM_PWM_Stop+0x4a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a3b      	ldr	r2, [pc, #236]	@ (8003268 <HAL_TIM_PWM_Stop+0x120>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d009      	beq.n	8003192 <HAL_TIM_PWM_Stop+0x4a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a3a      	ldr	r2, [pc, #232]	@ (800326c <HAL_TIM_PWM_Stop+0x124>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_TIM_PWM_Stop+0x4a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a38      	ldr	r2, [pc, #224]	@ (8003270 <HAL_TIM_PWM_Stop+0x128>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_TIM_PWM_Stop+0x4e>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_TIM_PWM_Stop+0x50>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d017      	beq.n	80031cc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a1a      	ldr	r2, [r3, #32]
 80031a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10f      	bne.n	80031cc <HAL_TIM_PWM_Stop+0x84>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6a1a      	ldr	r2, [r3, #32]
 80031b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d107      	bne.n	80031cc <HAL_TIM_PWM_Stop+0x84>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6a1a      	ldr	r2, [r3, #32]
 80031d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10f      	bne.n	80031fc <HAL_TIM_PWM_Stop+0xb4>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	f240 4344 	movw	r3, #1092	@ 0x444
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d107      	bne.n	80031fc <HAL_TIM_PWM_Stop+0xb4>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d104      	bne.n	800320c <HAL_TIM_PWM_Stop+0xc4>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800320a:	e023      	b.n	8003254 <HAL_TIM_PWM_Stop+0x10c>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2b04      	cmp	r3, #4
 8003210:	d104      	bne.n	800321c <HAL_TIM_PWM_Stop+0xd4>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800321a:	e01b      	b.n	8003254 <HAL_TIM_PWM_Stop+0x10c>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b08      	cmp	r3, #8
 8003220:	d104      	bne.n	800322c <HAL_TIM_PWM_Stop+0xe4>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800322a:	e013      	b.n	8003254 <HAL_TIM_PWM_Stop+0x10c>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d104      	bne.n	800323c <HAL_TIM_PWM_Stop+0xf4>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800323a:	e00b      	b.n	8003254 <HAL_TIM_PWM_Stop+0x10c>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b10      	cmp	r3, #16
 8003240:	d104      	bne.n	800324c <HAL_TIM_PWM_Stop+0x104>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800324a:	e003      	b.n	8003254 <HAL_TIM_PWM_Stop+0x10c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40012c00 	.word	0x40012c00
 8003264:	40013400 	.word	0x40013400
 8003268:	40014000 	.word	0x40014000
 800326c:	40014400 	.word	0x40014400
 8003270:	40014800 	.word	0x40014800

08003274 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_TIM_PWM_Start_IT+0x28>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e03c      	b.n	8003316 <HAL_TIM_PWM_Start_IT+0xa2>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d109      	bne.n	80032b6 <HAL_TIM_PWM_Start_IT+0x42>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	bf14      	ite	ne
 80032ae:	2301      	movne	r3, #1
 80032b0:	2300      	moveq	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	e02f      	b.n	8003316 <HAL_TIM_PWM_Start_IT+0xa2>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d109      	bne.n	80032d0 <HAL_TIM_PWM_Start_IT+0x5c>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e022      	b.n	8003316 <HAL_TIM_PWM_Start_IT+0xa2>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b0c      	cmp	r3, #12
 80032d4:	d109      	bne.n	80032ea <HAL_TIM_PWM_Start_IT+0x76>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	e015      	b.n	8003316 <HAL_TIM_PWM_Start_IT+0xa2>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d109      	bne.n	8003304 <HAL_TIM_PWM_Start_IT+0x90>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e008      	b.n	8003316 <HAL_TIM_PWM_Start_IT+0xa2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e0e7      	b.n	80034ee <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <HAL_TIM_PWM_Start_IT+0xba>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800332c:	e023      	b.n	8003376 <HAL_TIM_PWM_Start_IT+0x102>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b04      	cmp	r3, #4
 8003332:	d104      	bne.n	800333e <HAL_TIM_PWM_Start_IT+0xca>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800333c:	e01b      	b.n	8003376 <HAL_TIM_PWM_Start_IT+0x102>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Start_IT+0xda>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800334c:	e013      	b.n	8003376 <HAL_TIM_PWM_Start_IT+0x102>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	d104      	bne.n	800335e <HAL_TIM_PWM_Start_IT+0xea>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800335c:	e00b      	b.n	8003376 <HAL_TIM_PWM_Start_IT+0x102>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b10      	cmp	r3, #16
 8003362:	d104      	bne.n	800336e <HAL_TIM_PWM_Start_IT+0xfa>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800336c:	e003      	b.n	8003376 <HAL_TIM_PWM_Start_IT+0x102>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	d841      	bhi.n	8003400 <HAL_TIM_PWM_Start_IT+0x18c>
 800337c:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <HAL_TIM_PWM_Start_IT+0x110>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	080033b9 	.word	0x080033b9
 8003388:	08003401 	.word	0x08003401
 800338c:	08003401 	.word	0x08003401
 8003390:	08003401 	.word	0x08003401
 8003394:	080033cb 	.word	0x080033cb
 8003398:	08003401 	.word	0x08003401
 800339c:	08003401 	.word	0x08003401
 80033a0:	08003401 	.word	0x08003401
 80033a4:	080033dd 	.word	0x080033dd
 80033a8:	08003401 	.word	0x08003401
 80033ac:	08003401 	.word	0x08003401
 80033b0:	08003401 	.word	0x08003401
 80033b4:	080033ef 	.word	0x080033ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0202 	orr.w	r2, r2, #2
 80033c6:	60da      	str	r2, [r3, #12]
      break;
 80033c8:	e01d      	b.n	8003406 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0204 	orr.w	r2, r2, #4
 80033d8:	60da      	str	r2, [r3, #12]
      break;
 80033da:	e014      	b.n	8003406 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0208 	orr.w	r2, r2, #8
 80033ea:	60da      	str	r2, [r3, #12]
      break;
 80033ec:	e00b      	b.n	8003406 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0210 	orr.w	r2, r2, #16
 80033fc:	60da      	str	r2, [r3, #12]
      break;
 80033fe:	e002      	b.n	8003406 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      break;
 8003404:	bf00      	nop
  }

  if (status == HAL_OK)
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d16f      	bne.n	80034ec <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2201      	movs	r2, #1
 8003412:	6839      	ldr	r1, [r7, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 ff83 	bl	8004320 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a36      	ldr	r2, [pc, #216]	@ (80034f8 <HAL_TIM_PWM_Start_IT+0x284>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <HAL_TIM_PWM_Start_IT+0x1d8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a34      	ldr	r2, [pc, #208]	@ (80034fc <HAL_TIM_PWM_Start_IT+0x288>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00e      	beq.n	800344c <HAL_TIM_PWM_Start_IT+0x1d8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a33      	ldr	r2, [pc, #204]	@ (8003500 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_TIM_PWM_Start_IT+0x1d8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a31      	ldr	r2, [pc, #196]	@ (8003504 <HAL_TIM_PWM_Start_IT+0x290>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_TIM_PWM_Start_IT+0x1d8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a30      	ldr	r2, [pc, #192]	@ (8003508 <HAL_TIM_PWM_Start_IT+0x294>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_TIM_PWM_Start_IT+0x1dc>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <HAL_TIM_PWM_Start_IT+0x1de>
 8003450:	2300      	movs	r3, #0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003464:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a23      	ldr	r2, [pc, #140]	@ (80034f8 <HAL_TIM_PWM_Start_IT+0x284>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d01d      	beq.n	80034ac <HAL_TIM_PWM_Start_IT+0x238>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003478:	d018      	beq.n	80034ac <HAL_TIM_PWM_Start_IT+0x238>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a23      	ldr	r2, [pc, #140]	@ (800350c <HAL_TIM_PWM_Start_IT+0x298>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d013      	beq.n	80034ac <HAL_TIM_PWM_Start_IT+0x238>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a21      	ldr	r2, [pc, #132]	@ (8003510 <HAL_TIM_PWM_Start_IT+0x29c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00e      	beq.n	80034ac <HAL_TIM_PWM_Start_IT+0x238>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a20      	ldr	r2, [pc, #128]	@ (8003514 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d009      	beq.n	80034ac <HAL_TIM_PWM_Start_IT+0x238>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a17      	ldr	r2, [pc, #92]	@ (80034fc <HAL_TIM_PWM_Start_IT+0x288>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <HAL_TIM_PWM_Start_IT+0x238>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a16      	ldr	r2, [pc, #88]	@ (8003500 <HAL_TIM_PWM_Start_IT+0x28c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d115      	bne.n	80034d8 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	4b19      	ldr	r3, [pc, #100]	@ (8003518 <HAL_TIM_PWM_Start_IT+0x2a4>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d015      	beq.n	80034ea <HAL_TIM_PWM_Start_IT+0x276>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c4:	d011      	beq.n	80034ea <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d6:	e008      	b.n	80034ea <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e000      	b.n	80034ec <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40012c00 	.word	0x40012c00
 80034fc:	40013400 	.word	0x40013400
 8003500:	40014000 	.word	0x40014000
 8003504:	40014400 	.word	0x40014400
 8003508:	40014800 	.word	0x40014800
 800350c:	40000400 	.word	0x40000400
 8003510:	40000800 	.word	0x40000800
 8003514:	40000c00 	.word	0x40000c00
 8003518:	00010007 	.word	0x00010007

0800351c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d020      	beq.n	8003580 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01b      	beq.n	8003580 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0202 	mvn.w	r2, #2
 8003550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fa44 	bl	80039f4 <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fa36 	bl	80039e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fd f9b9 	bl	80008ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d020      	beq.n	80035cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01b      	beq.n	80035cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0204 	mvn.w	r2, #4
 800359c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fa1e 	bl	80039f4 <HAL_TIM_IC_CaptureCallback>
 80035b8:	e005      	b.n	80035c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fa10 	bl	80039e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7fd f993 	bl	80008ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d020      	beq.n	8003618 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01b      	beq.n	8003618 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0208 	mvn.w	r2, #8
 80035e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2204      	movs	r2, #4
 80035ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f9f8 	bl	80039f4 <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f9ea 	bl	80039e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7fd f96d 	bl	80008ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01b      	beq.n	8003664 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0210 	mvn.w	r2, #16
 8003634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2208      	movs	r2, #8
 800363a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f9d2 	bl	80039f4 <HAL_TIM_IC_CaptureCallback>
 8003650:	e005      	b.n	800365e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f9c4 	bl	80039e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7fd f947 	bl	80008ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00c      	beq.n	8003688 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0201 	mvn.w	r2, #1
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f9a2 	bl	80039cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00c      	beq.n	80036ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fef2 	bl	8004490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00c      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80036c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 feea 	bl	80044a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00c      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f98a 	bl	8003a08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0220 	mvn.w	r2, #32
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 feb2 	bl	800447c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800373a:	2302      	movs	r3, #2
 800373c:	e0ff      	b.n	800393e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b14      	cmp	r3, #20
 800374a:	f200 80f0 	bhi.w	800392e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800374e:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	080037a9 	.word	0x080037a9
 8003758:	0800392f 	.word	0x0800392f
 800375c:	0800392f 	.word	0x0800392f
 8003760:	0800392f 	.word	0x0800392f
 8003764:	080037e9 	.word	0x080037e9
 8003768:	0800392f 	.word	0x0800392f
 800376c:	0800392f 	.word	0x0800392f
 8003770:	0800392f 	.word	0x0800392f
 8003774:	0800382b 	.word	0x0800382b
 8003778:	0800392f 	.word	0x0800392f
 800377c:	0800392f 	.word	0x0800392f
 8003780:	0800392f 	.word	0x0800392f
 8003784:	0800386b 	.word	0x0800386b
 8003788:	0800392f 	.word	0x0800392f
 800378c:	0800392f 	.word	0x0800392f
 8003790:	0800392f 	.word	0x0800392f
 8003794:	080038ad 	.word	0x080038ad
 8003798:	0800392f 	.word	0x0800392f
 800379c:	0800392f 	.word	0x0800392f
 80037a0:	0800392f 	.word	0x0800392f
 80037a4:	080038ed 	.word	0x080038ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f9ce 	bl	8003b50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0208 	orr.w	r2, r2, #8
 80037c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0204 	bic.w	r2, r2, #4
 80037d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6999      	ldr	r1, [r3, #24]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	619a      	str	r2, [r3, #24]
      break;
 80037e6:	e0a5      	b.n	8003934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fa3e 	bl	8003c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6999      	ldr	r1, [r3, #24]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	021a      	lsls	r2, r3, #8
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	619a      	str	r2, [r3, #24]
      break;
 8003828:	e084      	b.n	8003934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	4618      	mov	r0, r3
 8003832:	f000 faa7 	bl	8003d84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0208 	orr.w	r2, r2, #8
 8003844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0204 	bic.w	r2, r2, #4
 8003854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69d9      	ldr	r1, [r3, #28]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	61da      	str	r2, [r3, #28]
      break;
 8003868:	e064      	b.n	8003934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fb0f 	bl	8003e94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69d9      	ldr	r1, [r3, #28]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	021a      	lsls	r2, r3, #8
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	61da      	str	r2, [r3, #28]
      break;
 80038aa:	e043      	b.n	8003934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fb58 	bl	8003f68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0208 	orr.w	r2, r2, #8
 80038c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0204 	bic.w	r2, r2, #4
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80038ea:	e023      	b.n	8003934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fb9c 	bl	8004030 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003906:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003916:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	021a      	lsls	r2, r3, #8
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800392c:	e002      	b.n	8003934 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	75fb      	strb	r3, [r7, #23]
      break;
 8003932:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800393c:	7dfb      	ldrb	r3, [r7, #23]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop

08003948 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_TIM_SlaveConfigSynchro+0x18>
 800395c:	2302      	movs	r3, #2
 800395e:	e031      	b.n	80039c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003970:	6839      	ldr	r1, [r7, #0]
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fbc2 	bl	80040fc <TIM_SlaveTimer_SetConfig>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e018      	b.n	80039c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039a0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80039b0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a40      	ldr	r2, [pc, #256]	@ (8003b30 <TIM_Base_SetConfig+0x114>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d013      	beq.n	8003a5c <TIM_Base_SetConfig+0x40>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3a:	d00f      	beq.n	8003a5c <TIM_Base_SetConfig+0x40>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a3d      	ldr	r2, [pc, #244]	@ (8003b34 <TIM_Base_SetConfig+0x118>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00b      	beq.n	8003a5c <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a3c      	ldr	r2, [pc, #240]	@ (8003b38 <TIM_Base_SetConfig+0x11c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d007      	beq.n	8003a5c <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a3b      	ldr	r2, [pc, #236]	@ (8003b3c <TIM_Base_SetConfig+0x120>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d003      	beq.n	8003a5c <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3a      	ldr	r2, [pc, #232]	@ (8003b40 <TIM_Base_SetConfig+0x124>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d108      	bne.n	8003a6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a2f      	ldr	r2, [pc, #188]	@ (8003b30 <TIM_Base_SetConfig+0x114>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01f      	beq.n	8003ab6 <TIM_Base_SetConfig+0x9a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a7c:	d01b      	beq.n	8003ab6 <TIM_Base_SetConfig+0x9a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2c      	ldr	r2, [pc, #176]	@ (8003b34 <TIM_Base_SetConfig+0x118>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d017      	beq.n	8003ab6 <TIM_Base_SetConfig+0x9a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2b      	ldr	r2, [pc, #172]	@ (8003b38 <TIM_Base_SetConfig+0x11c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <TIM_Base_SetConfig+0x9a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2a      	ldr	r2, [pc, #168]	@ (8003b3c <TIM_Base_SetConfig+0x120>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00f      	beq.n	8003ab6 <TIM_Base_SetConfig+0x9a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a29      	ldr	r2, [pc, #164]	@ (8003b40 <TIM_Base_SetConfig+0x124>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00b      	beq.n	8003ab6 <TIM_Base_SetConfig+0x9a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a28      	ldr	r2, [pc, #160]	@ (8003b44 <TIM_Base_SetConfig+0x128>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d007      	beq.n	8003ab6 <TIM_Base_SetConfig+0x9a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a27      	ldr	r2, [pc, #156]	@ (8003b48 <TIM_Base_SetConfig+0x12c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d003      	beq.n	8003ab6 <TIM_Base_SetConfig+0x9a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a26      	ldr	r2, [pc, #152]	@ (8003b4c <TIM_Base_SetConfig+0x130>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d108      	bne.n	8003ac8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a10      	ldr	r2, [pc, #64]	@ (8003b30 <TIM_Base_SetConfig+0x114>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00f      	beq.n	8003b14 <TIM_Base_SetConfig+0xf8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a12      	ldr	r2, [pc, #72]	@ (8003b40 <TIM_Base_SetConfig+0x124>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00b      	beq.n	8003b14 <TIM_Base_SetConfig+0xf8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a11      	ldr	r2, [pc, #68]	@ (8003b44 <TIM_Base_SetConfig+0x128>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d007      	beq.n	8003b14 <TIM_Base_SetConfig+0xf8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a10      	ldr	r2, [pc, #64]	@ (8003b48 <TIM_Base_SetConfig+0x12c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_Base_SetConfig+0xf8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8003b4c <TIM_Base_SetConfig+0x130>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d103      	bne.n	8003b1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	615a      	str	r2, [r3, #20]
}
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40012c00 	.word	0x40012c00
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40000800 	.word	0x40000800
 8003b3c:	40000c00 	.word	0x40000c00
 8003b40:	40013400 	.word	0x40013400
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40014400 	.word	0x40014400
 8003b4c:	40014800 	.word	0x40014800

08003b50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	f023 0201 	bic.w	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f023 0302 	bic.w	r3, r3, #2
 8003b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a2c      	ldr	r2, [pc, #176]	@ (8003c5c <TIM_OC1_SetConfig+0x10c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00f      	beq.n	8003bd0 <TIM_OC1_SetConfig+0x80>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8003c60 <TIM_OC1_SetConfig+0x110>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <TIM_OC1_SetConfig+0x80>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a2a      	ldr	r2, [pc, #168]	@ (8003c64 <TIM_OC1_SetConfig+0x114>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <TIM_OC1_SetConfig+0x80>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a29      	ldr	r2, [pc, #164]	@ (8003c68 <TIM_OC1_SetConfig+0x118>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_OC1_SetConfig+0x80>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a28      	ldr	r2, [pc, #160]	@ (8003c6c <TIM_OC1_SetConfig+0x11c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d10c      	bne.n	8003bea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0308 	bic.w	r3, r3, #8
 8003bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1b      	ldr	r2, [pc, #108]	@ (8003c5c <TIM_OC1_SetConfig+0x10c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00f      	beq.n	8003c12 <TIM_OC1_SetConfig+0xc2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8003c60 <TIM_OC1_SetConfig+0x110>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00b      	beq.n	8003c12 <TIM_OC1_SetConfig+0xc2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	@ (8003c64 <TIM_OC1_SetConfig+0x114>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d007      	beq.n	8003c12 <TIM_OC1_SetConfig+0xc2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a18      	ldr	r2, [pc, #96]	@ (8003c68 <TIM_OC1_SetConfig+0x118>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d003      	beq.n	8003c12 <TIM_OC1_SetConfig+0xc2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a17      	ldr	r2, [pc, #92]	@ (8003c6c <TIM_OC1_SetConfig+0x11c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d111      	bne.n	8003c36 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	621a      	str	r2, [r3, #32]
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40012c00 	.word	0x40012c00
 8003c60:	40013400 	.word	0x40013400
 8003c64:	40014000 	.word	0x40014000
 8003c68:	40014400 	.word	0x40014400
 8003c6c:	40014800 	.word	0x40014800

08003c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f023 0210 	bic.w	r2, r3, #16
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f023 0320 	bic.w	r3, r3, #32
 8003cbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a28      	ldr	r2, [pc, #160]	@ (8003d70 <TIM_OC2_SetConfig+0x100>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d003      	beq.n	8003cdc <TIM_OC2_SetConfig+0x6c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a27      	ldr	r2, [pc, #156]	@ (8003d74 <TIM_OC2_SetConfig+0x104>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10d      	bne.n	8003cf8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8003d70 <TIM_OC2_SetConfig+0x100>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00f      	beq.n	8003d20 <TIM_OC2_SetConfig+0xb0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a1c      	ldr	r2, [pc, #112]	@ (8003d74 <TIM_OC2_SetConfig+0x104>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00b      	beq.n	8003d20 <TIM_OC2_SetConfig+0xb0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8003d78 <TIM_OC2_SetConfig+0x108>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d007      	beq.n	8003d20 <TIM_OC2_SetConfig+0xb0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a1a      	ldr	r2, [pc, #104]	@ (8003d7c <TIM_OC2_SetConfig+0x10c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d003      	beq.n	8003d20 <TIM_OC2_SetConfig+0xb0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a19      	ldr	r2, [pc, #100]	@ (8003d80 <TIM_OC2_SetConfig+0x110>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d113      	bne.n	8003d48 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40012c00 	.word	0x40012c00
 8003d74:	40013400 	.word	0x40013400
 8003d78:	40014000 	.word	0x40014000
 8003d7c:	40014400 	.word	0x40014400
 8003d80:	40014800 	.word	0x40014800

08003d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0303 	bic.w	r3, r3, #3
 8003dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a27      	ldr	r2, [pc, #156]	@ (8003e80 <TIM_OC3_SetConfig+0xfc>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d003      	beq.n	8003dee <TIM_OC3_SetConfig+0x6a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a26      	ldr	r2, [pc, #152]	@ (8003e84 <TIM_OC3_SetConfig+0x100>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d10d      	bne.n	8003e0a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003df4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e80 <TIM_OC3_SetConfig+0xfc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00f      	beq.n	8003e32 <TIM_OC3_SetConfig+0xae>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a1b      	ldr	r2, [pc, #108]	@ (8003e84 <TIM_OC3_SetConfig+0x100>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00b      	beq.n	8003e32 <TIM_OC3_SetConfig+0xae>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003e88 <TIM_OC3_SetConfig+0x104>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d007      	beq.n	8003e32 <TIM_OC3_SetConfig+0xae>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a19      	ldr	r2, [pc, #100]	@ (8003e8c <TIM_OC3_SetConfig+0x108>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d003      	beq.n	8003e32 <TIM_OC3_SetConfig+0xae>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a18      	ldr	r2, [pc, #96]	@ (8003e90 <TIM_OC3_SetConfig+0x10c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d113      	bne.n	8003e5a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	621a      	str	r2, [r3, #32]
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40013400 	.word	0x40013400
 8003e88:	40014000 	.word	0x40014000
 8003e8c:	40014400 	.word	0x40014400
 8003e90:	40014800 	.word	0x40014800

08003e94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	031b      	lsls	r3, r3, #12
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a18      	ldr	r2, [pc, #96]	@ (8003f54 <TIM_OC4_SetConfig+0xc0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00f      	beq.n	8003f18 <TIM_OC4_SetConfig+0x84>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a17      	ldr	r2, [pc, #92]	@ (8003f58 <TIM_OC4_SetConfig+0xc4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00b      	beq.n	8003f18 <TIM_OC4_SetConfig+0x84>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a16      	ldr	r2, [pc, #88]	@ (8003f5c <TIM_OC4_SetConfig+0xc8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d007      	beq.n	8003f18 <TIM_OC4_SetConfig+0x84>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a15      	ldr	r2, [pc, #84]	@ (8003f60 <TIM_OC4_SetConfig+0xcc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_OC4_SetConfig+0x84>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a14      	ldr	r2, [pc, #80]	@ (8003f64 <TIM_OC4_SetConfig+0xd0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d109      	bne.n	8003f2c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	019b      	lsls	r3, r3, #6
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	621a      	str	r2, [r3, #32]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40013400 	.word	0x40013400
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800

08003f68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003fac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a17      	ldr	r2, [pc, #92]	@ (800401c <TIM_OC5_SetConfig+0xb4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00f      	beq.n	8003fe2 <TIM_OC5_SetConfig+0x7a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a16      	ldr	r2, [pc, #88]	@ (8004020 <TIM_OC5_SetConfig+0xb8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <TIM_OC5_SetConfig+0x7a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a15      	ldr	r2, [pc, #84]	@ (8004024 <TIM_OC5_SetConfig+0xbc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <TIM_OC5_SetConfig+0x7a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a14      	ldr	r2, [pc, #80]	@ (8004028 <TIM_OC5_SetConfig+0xc0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_OC5_SetConfig+0x7a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a13      	ldr	r2, [pc, #76]	@ (800402c <TIM_OC5_SetConfig+0xc4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d109      	bne.n	8003ff6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	621a      	str	r2, [r3, #32]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40013400 	.word	0x40013400
 8004024:	40014000 	.word	0x40014000
 8004028:	40014400 	.word	0x40014400
 800402c:	40014800 	.word	0x40014800

08004030 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800405e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	051b      	lsls	r3, r3, #20
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a18      	ldr	r2, [pc, #96]	@ (80040e8 <TIM_OC6_SetConfig+0xb8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00f      	beq.n	80040ac <TIM_OC6_SetConfig+0x7c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a17      	ldr	r2, [pc, #92]	@ (80040ec <TIM_OC6_SetConfig+0xbc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00b      	beq.n	80040ac <TIM_OC6_SetConfig+0x7c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a16      	ldr	r2, [pc, #88]	@ (80040f0 <TIM_OC6_SetConfig+0xc0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d007      	beq.n	80040ac <TIM_OC6_SetConfig+0x7c>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a15      	ldr	r2, [pc, #84]	@ (80040f4 <TIM_OC6_SetConfig+0xc4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <TIM_OC6_SetConfig+0x7c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a14      	ldr	r2, [pc, #80]	@ (80040f8 <TIM_OC6_SetConfig+0xc8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d109      	bne.n	80040c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	029b      	lsls	r3, r3, #10
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40013400 	.word	0x40013400
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40014400 	.word	0x40014400
 80040f8:	40014800 	.word	0x40014800

080040fc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004118:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800412a:	f023 0307 	bic.w	r3, r3, #7
 800412e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b70      	cmp	r3, #112	@ 0x70
 8004148:	d01a      	beq.n	8004180 <TIM_SlaveTimer_SetConfig+0x84>
 800414a:	2b70      	cmp	r3, #112	@ 0x70
 800414c:	d860      	bhi.n	8004210 <TIM_SlaveTimer_SetConfig+0x114>
 800414e:	2b60      	cmp	r3, #96	@ 0x60
 8004150:	d054      	beq.n	80041fc <TIM_SlaveTimer_SetConfig+0x100>
 8004152:	2b60      	cmp	r3, #96	@ 0x60
 8004154:	d85c      	bhi.n	8004210 <TIM_SlaveTimer_SetConfig+0x114>
 8004156:	2b50      	cmp	r3, #80	@ 0x50
 8004158:	d046      	beq.n	80041e8 <TIM_SlaveTimer_SetConfig+0xec>
 800415a:	2b50      	cmp	r3, #80	@ 0x50
 800415c:	d858      	bhi.n	8004210 <TIM_SlaveTimer_SetConfig+0x114>
 800415e:	2b40      	cmp	r3, #64	@ 0x40
 8004160:	d019      	beq.n	8004196 <TIM_SlaveTimer_SetConfig+0x9a>
 8004162:	2b40      	cmp	r3, #64	@ 0x40
 8004164:	d854      	bhi.n	8004210 <TIM_SlaveTimer_SetConfig+0x114>
 8004166:	2b30      	cmp	r3, #48	@ 0x30
 8004168:	d055      	beq.n	8004216 <TIM_SlaveTimer_SetConfig+0x11a>
 800416a:	2b30      	cmp	r3, #48	@ 0x30
 800416c:	d850      	bhi.n	8004210 <TIM_SlaveTimer_SetConfig+0x114>
 800416e:	2b20      	cmp	r3, #32
 8004170:	d051      	beq.n	8004216 <TIM_SlaveTimer_SetConfig+0x11a>
 8004172:	2b20      	cmp	r3, #32
 8004174:	d84c      	bhi.n	8004210 <TIM_SlaveTimer_SetConfig+0x114>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d04d      	beq.n	8004216 <TIM_SlaveTimer_SetConfig+0x11a>
 800417a:	2b10      	cmp	r3, #16
 800417c:	d04b      	beq.n	8004216 <TIM_SlaveTimer_SetConfig+0x11a>
 800417e:	e047      	b.n	8004210 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004190:	f000 f8a6 	bl	80042e0 <TIM_ETR_SetConfig>
      break;
 8004194:	e040      	b.n	8004218 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b05      	cmp	r3, #5
 800419c:	d101      	bne.n	80041a2 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e03b      	b.n	800421a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041c8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	621a      	str	r2, [r3, #32]
      break;
 80041e6:	e017      	b.n	8004218 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f4:	461a      	mov	r2, r3
 80041f6:	f000 f814 	bl	8004222 <TIM_TI1_ConfigInputStage>
      break;
 80041fa:	e00d      	b.n	8004218 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004208:	461a      	mov	r2, r3
 800420a:	f000 f839 	bl	8004280 <TIM_TI2_ConfigInputStage>
      break;
 800420e:	e003      	b.n	8004218 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	75fb      	strb	r3, [r7, #23]
      break;
 8004214:	e000      	b.n	8004218 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004216:	bf00      	nop
  }

  return status;
 8004218:	7dfb      	ldrb	r3, [r7, #23]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004222:	b480      	push	{r7}
 8004224:	b087      	sub	sp, #28
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f023 0201 	bic.w	r2, r3, #1
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800424c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f023 030a 	bic.w	r3, r3, #10
 800425e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	621a      	str	r2, [r3, #32]
}
 8004274:	bf00      	nop
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	f023 0210 	bic.w	r2, r3, #16
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	031b      	lsls	r3, r3, #12
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	621a      	str	r2, [r3, #32]
}
 80042d4:	bf00      	nop
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	021a      	lsls	r2, r3, #8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	431a      	orrs	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	609a      	str	r2, [r3, #8]
}
 8004314:	bf00      	nop
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	2201      	movs	r2, #1
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1a      	ldr	r2, [r3, #32]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	43db      	mvns	r3, r3
 8004342:	401a      	ands	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004380:	2302      	movs	r3, #2
 8004382:	e068      	b.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d108      	bne.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80043be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01d      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f6:	d018      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1b      	ldr	r2, [pc, #108]	@ (800446c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1a      	ldr	r2, [pc, #104]	@ (8004470 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a18      	ldr	r2, [pc, #96]	@ (8004474 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a13      	ldr	r2, [pc, #76]	@ (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a14      	ldr	r2, [pc, #80]	@ (8004478 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d10c      	bne.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004430:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	4313      	orrs	r3, r2
 800443a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40013400 	.word	0x40013400
 800446c:	40000400 	.word	0x40000400
 8004470:	40000800 	.word	0x40000800
 8004474:	40000c00 	.word	0x40000c00
 8004478:	40014000 	.word	0x40014000

0800447c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e040      	b.n	800454c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fc fdba 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2224      	movs	r2, #36	@ 0x24
 80044e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0201 	bic.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fb6a 	bl	8004bd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8af 	bl	8004668 <UART_SetConfig>
 800450a:	4603      	mov	r3, r0
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e01b      	b.n	800454c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fbe9 	bl	8004d1c <UART_CheckIdleState>
 800454a:	4603      	mov	r3, r0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	@ 0x28
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	4613      	mov	r3, r2
 8004562:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004568:	2b20      	cmp	r3, #32
 800456a:	d177      	bne.n	800465c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_UART_Transmit+0x24>
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e070      	b.n	800465e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2221      	movs	r2, #33	@ 0x21
 8004588:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800458a:	f7fc fe89 	bl	80012a0 <HAL_GetTick>
 800458e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	88fa      	ldrh	r2, [r7, #6]
 8004594:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	88fa      	ldrh	r2, [r7, #6]
 800459c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a8:	d108      	bne.n	80045bc <HAL_UART_Transmit+0x68>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d104      	bne.n	80045bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	e003      	b.n	80045c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045c4:	e02f      	b.n	8004626 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2200      	movs	r2, #0
 80045ce:	2180      	movs	r1, #128	@ 0x80
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fc4b 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d004      	beq.n	80045e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e03b      	b.n	800465e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	881a      	ldrh	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045f8:	b292      	uxth	r2, r2
 80045fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	3302      	adds	r3, #2
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	e007      	b.n	8004614 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3301      	adds	r3, #1
 8004612:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1c9      	bne.n	80045c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2200      	movs	r2, #0
 800463a:	2140      	movs	r1, #64	@ 0x40
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fc15 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e005      	b.n	800465e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	e000      	b.n	800465e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800465c:	2302      	movs	r3, #2
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800466c:	b08a      	sub	sp, #40	@ 0x28
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	431a      	orrs	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	431a      	orrs	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	4313      	orrs	r3, r2
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4ba4      	ldr	r3, [pc, #656]	@ (8004928 <UART_SetConfig+0x2c0>)
 8004698:	4013      	ands	r3, r2
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	6812      	ldr	r2, [r2, #0]
 800469e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046a0:	430b      	orrs	r3, r1
 80046a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a99      	ldr	r2, [pc, #612]	@ (800492c <UART_SetConfig+0x2c4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d0:	4313      	orrs	r3, r2
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e4:	430a      	orrs	r2, r1
 80046e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a90      	ldr	r2, [pc, #576]	@ (8004930 <UART_SetConfig+0x2c8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d126      	bne.n	8004740 <UART_SetConfig+0xd8>
 80046f2:	4b90      	ldr	r3, [pc, #576]	@ (8004934 <UART_SetConfig+0x2cc>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d81b      	bhi.n	8004738 <UART_SetConfig+0xd0>
 8004700:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <UART_SetConfig+0xa0>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	08004719 	.word	0x08004719
 800470c:	08004729 	.word	0x08004729
 8004710:	08004721 	.word	0x08004721
 8004714:	08004731 	.word	0x08004731
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471e:	e116      	b.n	800494e <UART_SetConfig+0x2e6>
 8004720:	2302      	movs	r3, #2
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004726:	e112      	b.n	800494e <UART_SetConfig+0x2e6>
 8004728:	2304      	movs	r3, #4
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472e:	e10e      	b.n	800494e <UART_SetConfig+0x2e6>
 8004730:	2308      	movs	r3, #8
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004736:	e10a      	b.n	800494e <UART_SetConfig+0x2e6>
 8004738:	2310      	movs	r3, #16
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473e:	e106      	b.n	800494e <UART_SetConfig+0x2e6>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a7c      	ldr	r2, [pc, #496]	@ (8004938 <UART_SetConfig+0x2d0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d138      	bne.n	80047bc <UART_SetConfig+0x154>
 800474a:	4b7a      	ldr	r3, [pc, #488]	@ (8004934 <UART_SetConfig+0x2cc>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b0c      	cmp	r3, #12
 8004756:	d82d      	bhi.n	80047b4 <UART_SetConfig+0x14c>
 8004758:	a201      	add	r2, pc, #4	@ (adr r2, 8004760 <UART_SetConfig+0xf8>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	08004795 	.word	0x08004795
 8004764:	080047b5 	.word	0x080047b5
 8004768:	080047b5 	.word	0x080047b5
 800476c:	080047b5 	.word	0x080047b5
 8004770:	080047a5 	.word	0x080047a5
 8004774:	080047b5 	.word	0x080047b5
 8004778:	080047b5 	.word	0x080047b5
 800477c:	080047b5 	.word	0x080047b5
 8004780:	0800479d 	.word	0x0800479d
 8004784:	080047b5 	.word	0x080047b5
 8004788:	080047b5 	.word	0x080047b5
 800478c:	080047b5 	.word	0x080047b5
 8004790:	080047ad 	.word	0x080047ad
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479a:	e0d8      	b.n	800494e <UART_SetConfig+0x2e6>
 800479c:	2302      	movs	r3, #2
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a2:	e0d4      	b.n	800494e <UART_SetConfig+0x2e6>
 80047a4:	2304      	movs	r3, #4
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047aa:	e0d0      	b.n	800494e <UART_SetConfig+0x2e6>
 80047ac:	2308      	movs	r3, #8
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b2:	e0cc      	b.n	800494e <UART_SetConfig+0x2e6>
 80047b4:	2310      	movs	r3, #16
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ba:	e0c8      	b.n	800494e <UART_SetConfig+0x2e6>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a5e      	ldr	r2, [pc, #376]	@ (800493c <UART_SetConfig+0x2d4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d125      	bne.n	8004812 <UART_SetConfig+0x1aa>
 80047c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004934 <UART_SetConfig+0x2cc>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047d0:	2b30      	cmp	r3, #48	@ 0x30
 80047d2:	d016      	beq.n	8004802 <UART_SetConfig+0x19a>
 80047d4:	2b30      	cmp	r3, #48	@ 0x30
 80047d6:	d818      	bhi.n	800480a <UART_SetConfig+0x1a2>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d00a      	beq.n	80047f2 <UART_SetConfig+0x18a>
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d814      	bhi.n	800480a <UART_SetConfig+0x1a2>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <UART_SetConfig+0x182>
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d008      	beq.n	80047fa <UART_SetConfig+0x192>
 80047e8:	e00f      	b.n	800480a <UART_SetConfig+0x1a2>
 80047ea:	2300      	movs	r3, #0
 80047ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f0:	e0ad      	b.n	800494e <UART_SetConfig+0x2e6>
 80047f2:	2302      	movs	r3, #2
 80047f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f8:	e0a9      	b.n	800494e <UART_SetConfig+0x2e6>
 80047fa:	2304      	movs	r3, #4
 80047fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004800:	e0a5      	b.n	800494e <UART_SetConfig+0x2e6>
 8004802:	2308      	movs	r3, #8
 8004804:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004808:	e0a1      	b.n	800494e <UART_SetConfig+0x2e6>
 800480a:	2310      	movs	r3, #16
 800480c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004810:	e09d      	b.n	800494e <UART_SetConfig+0x2e6>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a4a      	ldr	r2, [pc, #296]	@ (8004940 <UART_SetConfig+0x2d8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d125      	bne.n	8004868 <UART_SetConfig+0x200>
 800481c:	4b45      	ldr	r3, [pc, #276]	@ (8004934 <UART_SetConfig+0x2cc>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004822:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004826:	2bc0      	cmp	r3, #192	@ 0xc0
 8004828:	d016      	beq.n	8004858 <UART_SetConfig+0x1f0>
 800482a:	2bc0      	cmp	r3, #192	@ 0xc0
 800482c:	d818      	bhi.n	8004860 <UART_SetConfig+0x1f8>
 800482e:	2b80      	cmp	r3, #128	@ 0x80
 8004830:	d00a      	beq.n	8004848 <UART_SetConfig+0x1e0>
 8004832:	2b80      	cmp	r3, #128	@ 0x80
 8004834:	d814      	bhi.n	8004860 <UART_SetConfig+0x1f8>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <UART_SetConfig+0x1d8>
 800483a:	2b40      	cmp	r3, #64	@ 0x40
 800483c:	d008      	beq.n	8004850 <UART_SetConfig+0x1e8>
 800483e:	e00f      	b.n	8004860 <UART_SetConfig+0x1f8>
 8004840:	2300      	movs	r3, #0
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004846:	e082      	b.n	800494e <UART_SetConfig+0x2e6>
 8004848:	2302      	movs	r3, #2
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484e:	e07e      	b.n	800494e <UART_SetConfig+0x2e6>
 8004850:	2304      	movs	r3, #4
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004856:	e07a      	b.n	800494e <UART_SetConfig+0x2e6>
 8004858:	2308      	movs	r3, #8
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485e:	e076      	b.n	800494e <UART_SetConfig+0x2e6>
 8004860:	2310      	movs	r3, #16
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004866:	e072      	b.n	800494e <UART_SetConfig+0x2e6>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a35      	ldr	r2, [pc, #212]	@ (8004944 <UART_SetConfig+0x2dc>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d12a      	bne.n	80048c8 <UART_SetConfig+0x260>
 8004872:	4b30      	ldr	r3, [pc, #192]	@ (8004934 <UART_SetConfig+0x2cc>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004878:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800487c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004880:	d01a      	beq.n	80048b8 <UART_SetConfig+0x250>
 8004882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004886:	d81b      	bhi.n	80048c0 <UART_SetConfig+0x258>
 8004888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800488c:	d00c      	beq.n	80048a8 <UART_SetConfig+0x240>
 800488e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004892:	d815      	bhi.n	80048c0 <UART_SetConfig+0x258>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <UART_SetConfig+0x238>
 8004898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800489c:	d008      	beq.n	80048b0 <UART_SetConfig+0x248>
 800489e:	e00f      	b.n	80048c0 <UART_SetConfig+0x258>
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a6:	e052      	b.n	800494e <UART_SetConfig+0x2e6>
 80048a8:	2302      	movs	r3, #2
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ae:	e04e      	b.n	800494e <UART_SetConfig+0x2e6>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b6:	e04a      	b.n	800494e <UART_SetConfig+0x2e6>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048be:	e046      	b.n	800494e <UART_SetConfig+0x2e6>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c6:	e042      	b.n	800494e <UART_SetConfig+0x2e6>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a17      	ldr	r2, [pc, #92]	@ (800492c <UART_SetConfig+0x2c4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d13a      	bne.n	8004948 <UART_SetConfig+0x2e0>
 80048d2:	4b18      	ldr	r3, [pc, #96]	@ (8004934 <UART_SetConfig+0x2cc>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048e0:	d01a      	beq.n	8004918 <UART_SetConfig+0x2b0>
 80048e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048e6:	d81b      	bhi.n	8004920 <UART_SetConfig+0x2b8>
 80048e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ec:	d00c      	beq.n	8004908 <UART_SetConfig+0x2a0>
 80048ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048f2:	d815      	bhi.n	8004920 <UART_SetConfig+0x2b8>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <UART_SetConfig+0x298>
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fc:	d008      	beq.n	8004910 <UART_SetConfig+0x2a8>
 80048fe:	e00f      	b.n	8004920 <UART_SetConfig+0x2b8>
 8004900:	2300      	movs	r3, #0
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004906:	e022      	b.n	800494e <UART_SetConfig+0x2e6>
 8004908:	2302      	movs	r3, #2
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800490e:	e01e      	b.n	800494e <UART_SetConfig+0x2e6>
 8004910:	2304      	movs	r3, #4
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004916:	e01a      	b.n	800494e <UART_SetConfig+0x2e6>
 8004918:	2308      	movs	r3, #8
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800491e:	e016      	b.n	800494e <UART_SetConfig+0x2e6>
 8004920:	2310      	movs	r3, #16
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004926:	e012      	b.n	800494e <UART_SetConfig+0x2e6>
 8004928:	efff69f3 	.word	0xefff69f3
 800492c:	40008000 	.word	0x40008000
 8004930:	40013800 	.word	0x40013800
 8004934:	40021000 	.word	0x40021000
 8004938:	40004400 	.word	0x40004400
 800493c:	40004800 	.word	0x40004800
 8004940:	40004c00 	.word	0x40004c00
 8004944:	40005000 	.word	0x40005000
 8004948:	2310      	movs	r3, #16
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a9f      	ldr	r2, [pc, #636]	@ (8004bd0 <UART_SetConfig+0x568>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d17a      	bne.n	8004a4e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004958:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800495c:	2b08      	cmp	r3, #8
 800495e:	d824      	bhi.n	80049aa <UART_SetConfig+0x342>
 8004960:	a201      	add	r2, pc, #4	@ (adr r2, 8004968 <UART_SetConfig+0x300>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	0800498d 	.word	0x0800498d
 800496c:	080049ab 	.word	0x080049ab
 8004970:	08004995 	.word	0x08004995
 8004974:	080049ab 	.word	0x080049ab
 8004978:	0800499b 	.word	0x0800499b
 800497c:	080049ab 	.word	0x080049ab
 8004980:	080049ab 	.word	0x080049ab
 8004984:	080049ab 	.word	0x080049ab
 8004988:	080049a3 	.word	0x080049a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800498c:	f7fd fd7c 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 8004990:	61f8      	str	r0, [r7, #28]
        break;
 8004992:	e010      	b.n	80049b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004994:	4b8f      	ldr	r3, [pc, #572]	@ (8004bd4 <UART_SetConfig+0x56c>)
 8004996:	61fb      	str	r3, [r7, #28]
        break;
 8004998:	e00d      	b.n	80049b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800499a:	f7fd fcdd 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 800499e:	61f8      	str	r0, [r7, #28]
        break;
 80049a0:	e009      	b.n	80049b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a6:	61fb      	str	r3, [r7, #28]
        break;
 80049a8:	e005      	b.n	80049b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80fb 	beq.w	8004bb4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	4413      	add	r3, r2
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d305      	bcc.n	80049da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d903      	bls.n	80049e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049e0:	e0e8      	b.n	8004bb4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	2200      	movs	r2, #0
 80049e6:	461c      	mov	r4, r3
 80049e8:	4615      	mov	r5, r2
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	022b      	lsls	r3, r5, #8
 80049f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049f8:	0222      	lsls	r2, r4, #8
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	6849      	ldr	r1, [r1, #4]
 80049fe:	0849      	lsrs	r1, r1, #1
 8004a00:	2000      	movs	r0, #0
 8004a02:	4688      	mov	r8, r1
 8004a04:	4681      	mov	r9, r0
 8004a06:	eb12 0a08 	adds.w	sl, r2, r8
 8004a0a:	eb43 0b09 	adc.w	fp, r3, r9
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a1c:	4650      	mov	r0, sl
 8004a1e:	4659      	mov	r1, fp
 8004a20:	f7fb fc26 	bl	8000270 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4613      	mov	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a32:	d308      	bcc.n	8004a46 <UART_SetConfig+0x3de>
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a3a:	d204      	bcs.n	8004a46 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	60da      	str	r2, [r3, #12]
 8004a44:	e0b6      	b.n	8004bb4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a4c:	e0b2      	b.n	8004bb4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a56:	d15e      	bne.n	8004b16 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d828      	bhi.n	8004ab2 <UART_SetConfig+0x44a>
 8004a60:	a201      	add	r2, pc, #4	@ (adr r2, 8004a68 <UART_SetConfig+0x400>)
 8004a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a66:	bf00      	nop
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	08004ab3 	.word	0x08004ab3
 8004a78:	08004aa3 	.word	0x08004aa3
 8004a7c:	08004ab3 	.word	0x08004ab3
 8004a80:	08004ab3 	.word	0x08004ab3
 8004a84:	08004ab3 	.word	0x08004ab3
 8004a88:	08004aab 	.word	0x08004aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7fd fcfc 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 8004a90:	61f8      	str	r0, [r7, #28]
        break;
 8004a92:	e014      	b.n	8004abe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a94:	f7fd fd0e 	bl	80024b4 <HAL_RCC_GetPCLK2Freq>
 8004a98:	61f8      	str	r0, [r7, #28]
        break;
 8004a9a:	e010      	b.n	8004abe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8004bd4 <UART_SetConfig+0x56c>)
 8004a9e:	61fb      	str	r3, [r7, #28]
        break;
 8004aa0:	e00d      	b.n	8004abe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa2:	f7fd fc59 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8004aa6:	61f8      	str	r0, [r7, #28]
        break;
 8004aa8:	e009      	b.n	8004abe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aae:	61fb      	str	r3, [r7, #28]
        break;
 8004ab0:	e005      	b.n	8004abe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004abc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d077      	beq.n	8004bb4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	005a      	lsls	r2, r3, #1
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	085b      	lsrs	r3, r3, #1
 8004ace:	441a      	add	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b0f      	cmp	r3, #15
 8004ade:	d916      	bls.n	8004b0e <UART_SetConfig+0x4a6>
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae6:	d212      	bcs.n	8004b0e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f023 030f 	bic.w	r3, r3, #15
 8004af0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	085b      	lsrs	r3, r3, #1
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	8afb      	ldrh	r3, [r7, #22]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	8afa      	ldrh	r2, [r7, #22]
 8004b0a:	60da      	str	r2, [r3, #12]
 8004b0c:	e052      	b.n	8004bb4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b14:	e04e      	b.n	8004bb4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d827      	bhi.n	8004b6e <UART_SetConfig+0x506>
 8004b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <UART_SetConfig+0x4bc>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004b49 	.word	0x08004b49
 8004b28:	08004b51 	.word	0x08004b51
 8004b2c:	08004b59 	.word	0x08004b59
 8004b30:	08004b6f 	.word	0x08004b6f
 8004b34:	08004b5f 	.word	0x08004b5f
 8004b38:	08004b6f 	.word	0x08004b6f
 8004b3c:	08004b6f 	.word	0x08004b6f
 8004b40:	08004b6f 	.word	0x08004b6f
 8004b44:	08004b67 	.word	0x08004b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b48:	f7fd fc9e 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 8004b4c:	61f8      	str	r0, [r7, #28]
        break;
 8004b4e:	e014      	b.n	8004b7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b50:	f7fd fcb0 	bl	80024b4 <HAL_RCC_GetPCLK2Freq>
 8004b54:	61f8      	str	r0, [r7, #28]
        break;
 8004b56:	e010      	b.n	8004b7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b58:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd4 <UART_SetConfig+0x56c>)
 8004b5a:	61fb      	str	r3, [r7, #28]
        break;
 8004b5c:	e00d      	b.n	8004b7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5e:	f7fd fbfb 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8004b62:	61f8      	str	r0, [r7, #28]
        break;
 8004b64:	e009      	b.n	8004b7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6a:	61fb      	str	r3, [r7, #28]
        break;
 8004b6c:	e005      	b.n	8004b7a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b78:	bf00      	nop
    }

    if (pclk != 0U)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d019      	beq.n	8004bb4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	085a      	lsrs	r2, r3, #1
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	441a      	add	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b0f      	cmp	r3, #15
 8004b98:	d909      	bls.n	8004bae <UART_SetConfig+0x546>
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba0:	d205      	bcs.n	8004bae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60da      	str	r2, [r3, #12]
 8004bac:	e002      	b.n	8004bb4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004bc0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3728      	adds	r7, #40	@ 0x28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bce:	bf00      	nop
 8004bd0:	40008000 	.word	0x40008000
 8004bd4:	00f42400 	.word	0x00f42400

08004bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01a      	beq.n	8004cee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cd6:	d10a      	bne.n	8004cee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b098      	sub	sp, #96	@ 0x60
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d2c:	f7fc fab8 	bl	80012a0 <HAL_GetTick>
 8004d30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d12e      	bne.n	8004d9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f88c 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d021      	beq.n	8004d9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e6      	bne.n	8004d5a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e062      	b.n	8004e64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d149      	bne.n	8004e40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f856 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d03c      	beq.n	8004e40 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	623b      	str	r3, [r7, #32]
   return(result);
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004de4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004de6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e6      	bne.n	8004dc6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e18:	61fa      	str	r2, [r7, #28]
 8004e1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	69b9      	ldr	r1, [r7, #24]
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	617b      	str	r3, [r7, #20]
   return(result);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e5      	bne.n	8004df8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e011      	b.n	8004e64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3758      	adds	r7, #88	@ 0x58
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7c:	e049      	b.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d045      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e86:	f7fc fa0b 	bl	80012a0 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d302      	bcc.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e048      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d031      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d110      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f838 	bl	8004f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e029      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eec:	d111      	bne.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f81e 	bl	8004f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e00f      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	bf0c      	ite	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	2300      	movne	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d0a6      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b095      	sub	sp, #84	@ 0x54
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e6      	bne.n	8004f42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f023 0301 	bic.w	r3, r3, #1
 8004f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3308      	adds	r3, #8
 8004f92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e5      	bne.n	8004f74 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d118      	bne.n	8004fe2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f023 0310 	bic.w	r3, r3, #16
 8004fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6979      	ldr	r1, [r7, #20]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	613b      	str	r3, [r7, #16]
   return(result);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e6      	bne.n	8004fb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ff6:	bf00      	nop
 8004ff8:	3754      	adds	r7, #84	@ 0x54
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <siprintf>:
 8005004:	b40e      	push	{r1, r2, r3}
 8005006:	b500      	push	{lr}
 8005008:	b09c      	sub	sp, #112	@ 0x70
 800500a:	ab1d      	add	r3, sp, #116	@ 0x74
 800500c:	9002      	str	r0, [sp, #8]
 800500e:	9006      	str	r0, [sp, #24]
 8005010:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005014:	4809      	ldr	r0, [pc, #36]	@ (800503c <siprintf+0x38>)
 8005016:	9107      	str	r1, [sp, #28]
 8005018:	9104      	str	r1, [sp, #16]
 800501a:	4909      	ldr	r1, [pc, #36]	@ (8005040 <siprintf+0x3c>)
 800501c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005020:	9105      	str	r1, [sp, #20]
 8005022:	6800      	ldr	r0, [r0, #0]
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	a902      	add	r1, sp, #8
 8005028:	f000 f994 	bl	8005354 <_svfiprintf_r>
 800502c:	9b02      	ldr	r3, [sp, #8]
 800502e:	2200      	movs	r2, #0
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	b01c      	add	sp, #112	@ 0x70
 8005034:	f85d eb04 	ldr.w	lr, [sp], #4
 8005038:	b003      	add	sp, #12
 800503a:	4770      	bx	lr
 800503c:	2000000c 	.word	0x2000000c
 8005040:	ffff0208 	.word	0xffff0208

08005044 <memset>:
 8005044:	4402      	add	r2, r0
 8005046:	4603      	mov	r3, r0
 8005048:	4293      	cmp	r3, r2
 800504a:	d100      	bne.n	800504e <memset+0xa>
 800504c:	4770      	bx	lr
 800504e:	f803 1b01 	strb.w	r1, [r3], #1
 8005052:	e7f9      	b.n	8005048 <memset+0x4>

08005054 <__errno>:
 8005054:	4b01      	ldr	r3, [pc, #4]	@ (800505c <__errno+0x8>)
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	2000000c 	.word	0x2000000c

08005060 <__libc_init_array>:
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	4d0d      	ldr	r5, [pc, #52]	@ (8005098 <__libc_init_array+0x38>)
 8005064:	4c0d      	ldr	r4, [pc, #52]	@ (800509c <__libc_init_array+0x3c>)
 8005066:	1b64      	subs	r4, r4, r5
 8005068:	10a4      	asrs	r4, r4, #2
 800506a:	2600      	movs	r6, #0
 800506c:	42a6      	cmp	r6, r4
 800506e:	d109      	bne.n	8005084 <__libc_init_array+0x24>
 8005070:	4d0b      	ldr	r5, [pc, #44]	@ (80050a0 <__libc_init_array+0x40>)
 8005072:	4c0c      	ldr	r4, [pc, #48]	@ (80050a4 <__libc_init_array+0x44>)
 8005074:	f000 fc66 	bl	8005944 <_init>
 8005078:	1b64      	subs	r4, r4, r5
 800507a:	10a4      	asrs	r4, r4, #2
 800507c:	2600      	movs	r6, #0
 800507e:	42a6      	cmp	r6, r4
 8005080:	d105      	bne.n	800508e <__libc_init_array+0x2e>
 8005082:	bd70      	pop	{r4, r5, r6, pc}
 8005084:	f855 3b04 	ldr.w	r3, [r5], #4
 8005088:	4798      	blx	r3
 800508a:	3601      	adds	r6, #1
 800508c:	e7ee      	b.n	800506c <__libc_init_array+0xc>
 800508e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005092:	4798      	blx	r3
 8005094:	3601      	adds	r6, #1
 8005096:	e7f2      	b.n	800507e <__libc_init_array+0x1e>
 8005098:	08005a10 	.word	0x08005a10
 800509c:	08005a10 	.word	0x08005a10
 80050a0:	08005a10 	.word	0x08005a10
 80050a4:	08005a14 	.word	0x08005a14

080050a8 <__retarget_lock_acquire_recursive>:
 80050a8:	4770      	bx	lr

080050aa <__retarget_lock_release_recursive>:
 80050aa:	4770      	bx	lr

080050ac <_free_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4605      	mov	r5, r0
 80050b0:	2900      	cmp	r1, #0
 80050b2:	d041      	beq.n	8005138 <_free_r+0x8c>
 80050b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050b8:	1f0c      	subs	r4, r1, #4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bfb8      	it	lt
 80050be:	18e4      	addlt	r4, r4, r3
 80050c0:	f000 f8e0 	bl	8005284 <__malloc_lock>
 80050c4:	4a1d      	ldr	r2, [pc, #116]	@ (800513c <_free_r+0x90>)
 80050c6:	6813      	ldr	r3, [r2, #0]
 80050c8:	b933      	cbnz	r3, 80050d8 <_free_r+0x2c>
 80050ca:	6063      	str	r3, [r4, #4]
 80050cc:	6014      	str	r4, [r2, #0]
 80050ce:	4628      	mov	r0, r5
 80050d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050d4:	f000 b8dc 	b.w	8005290 <__malloc_unlock>
 80050d8:	42a3      	cmp	r3, r4
 80050da:	d908      	bls.n	80050ee <_free_r+0x42>
 80050dc:	6820      	ldr	r0, [r4, #0]
 80050de:	1821      	adds	r1, r4, r0
 80050e0:	428b      	cmp	r3, r1
 80050e2:	bf01      	itttt	eq
 80050e4:	6819      	ldreq	r1, [r3, #0]
 80050e6:	685b      	ldreq	r3, [r3, #4]
 80050e8:	1809      	addeq	r1, r1, r0
 80050ea:	6021      	streq	r1, [r4, #0]
 80050ec:	e7ed      	b.n	80050ca <_free_r+0x1e>
 80050ee:	461a      	mov	r2, r3
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	b10b      	cbz	r3, 80050f8 <_free_r+0x4c>
 80050f4:	42a3      	cmp	r3, r4
 80050f6:	d9fa      	bls.n	80050ee <_free_r+0x42>
 80050f8:	6811      	ldr	r1, [r2, #0]
 80050fa:	1850      	adds	r0, r2, r1
 80050fc:	42a0      	cmp	r0, r4
 80050fe:	d10b      	bne.n	8005118 <_free_r+0x6c>
 8005100:	6820      	ldr	r0, [r4, #0]
 8005102:	4401      	add	r1, r0
 8005104:	1850      	adds	r0, r2, r1
 8005106:	4283      	cmp	r3, r0
 8005108:	6011      	str	r1, [r2, #0]
 800510a:	d1e0      	bne.n	80050ce <_free_r+0x22>
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	6053      	str	r3, [r2, #4]
 8005112:	4408      	add	r0, r1
 8005114:	6010      	str	r0, [r2, #0]
 8005116:	e7da      	b.n	80050ce <_free_r+0x22>
 8005118:	d902      	bls.n	8005120 <_free_r+0x74>
 800511a:	230c      	movs	r3, #12
 800511c:	602b      	str	r3, [r5, #0]
 800511e:	e7d6      	b.n	80050ce <_free_r+0x22>
 8005120:	6820      	ldr	r0, [r4, #0]
 8005122:	1821      	adds	r1, r4, r0
 8005124:	428b      	cmp	r3, r1
 8005126:	bf04      	itt	eq
 8005128:	6819      	ldreq	r1, [r3, #0]
 800512a:	685b      	ldreq	r3, [r3, #4]
 800512c:	6063      	str	r3, [r4, #4]
 800512e:	bf04      	itt	eq
 8005130:	1809      	addeq	r1, r1, r0
 8005132:	6021      	streq	r1, [r4, #0]
 8005134:	6054      	str	r4, [r2, #4]
 8005136:	e7ca      	b.n	80050ce <_free_r+0x22>
 8005138:	bd38      	pop	{r3, r4, r5, pc}
 800513a:	bf00      	nop
 800513c:	20000360 	.word	0x20000360

08005140 <sbrk_aligned>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	4e0f      	ldr	r6, [pc, #60]	@ (8005180 <sbrk_aligned+0x40>)
 8005144:	460c      	mov	r4, r1
 8005146:	6831      	ldr	r1, [r6, #0]
 8005148:	4605      	mov	r5, r0
 800514a:	b911      	cbnz	r1, 8005152 <sbrk_aligned+0x12>
 800514c:	f000 fba6 	bl	800589c <_sbrk_r>
 8005150:	6030      	str	r0, [r6, #0]
 8005152:	4621      	mov	r1, r4
 8005154:	4628      	mov	r0, r5
 8005156:	f000 fba1 	bl	800589c <_sbrk_r>
 800515a:	1c43      	adds	r3, r0, #1
 800515c:	d103      	bne.n	8005166 <sbrk_aligned+0x26>
 800515e:	f04f 34ff 	mov.w	r4, #4294967295
 8005162:	4620      	mov	r0, r4
 8005164:	bd70      	pop	{r4, r5, r6, pc}
 8005166:	1cc4      	adds	r4, r0, #3
 8005168:	f024 0403 	bic.w	r4, r4, #3
 800516c:	42a0      	cmp	r0, r4
 800516e:	d0f8      	beq.n	8005162 <sbrk_aligned+0x22>
 8005170:	1a21      	subs	r1, r4, r0
 8005172:	4628      	mov	r0, r5
 8005174:	f000 fb92 	bl	800589c <_sbrk_r>
 8005178:	3001      	adds	r0, #1
 800517a:	d1f2      	bne.n	8005162 <sbrk_aligned+0x22>
 800517c:	e7ef      	b.n	800515e <sbrk_aligned+0x1e>
 800517e:	bf00      	nop
 8005180:	2000035c 	.word	0x2000035c

08005184 <_malloc_r>:
 8005184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005188:	1ccd      	adds	r5, r1, #3
 800518a:	f025 0503 	bic.w	r5, r5, #3
 800518e:	3508      	adds	r5, #8
 8005190:	2d0c      	cmp	r5, #12
 8005192:	bf38      	it	cc
 8005194:	250c      	movcc	r5, #12
 8005196:	2d00      	cmp	r5, #0
 8005198:	4606      	mov	r6, r0
 800519a:	db01      	blt.n	80051a0 <_malloc_r+0x1c>
 800519c:	42a9      	cmp	r1, r5
 800519e:	d904      	bls.n	80051aa <_malloc_r+0x26>
 80051a0:	230c      	movs	r3, #12
 80051a2:	6033      	str	r3, [r6, #0]
 80051a4:	2000      	movs	r0, #0
 80051a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005280 <_malloc_r+0xfc>
 80051ae:	f000 f869 	bl	8005284 <__malloc_lock>
 80051b2:	f8d8 3000 	ldr.w	r3, [r8]
 80051b6:	461c      	mov	r4, r3
 80051b8:	bb44      	cbnz	r4, 800520c <_malloc_r+0x88>
 80051ba:	4629      	mov	r1, r5
 80051bc:	4630      	mov	r0, r6
 80051be:	f7ff ffbf 	bl	8005140 <sbrk_aligned>
 80051c2:	1c43      	adds	r3, r0, #1
 80051c4:	4604      	mov	r4, r0
 80051c6:	d158      	bne.n	800527a <_malloc_r+0xf6>
 80051c8:	f8d8 4000 	ldr.w	r4, [r8]
 80051cc:	4627      	mov	r7, r4
 80051ce:	2f00      	cmp	r7, #0
 80051d0:	d143      	bne.n	800525a <_malloc_r+0xd6>
 80051d2:	2c00      	cmp	r4, #0
 80051d4:	d04b      	beq.n	800526e <_malloc_r+0xea>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	4639      	mov	r1, r7
 80051da:	4630      	mov	r0, r6
 80051dc:	eb04 0903 	add.w	r9, r4, r3
 80051e0:	f000 fb5c 	bl	800589c <_sbrk_r>
 80051e4:	4581      	cmp	r9, r0
 80051e6:	d142      	bne.n	800526e <_malloc_r+0xea>
 80051e8:	6821      	ldr	r1, [r4, #0]
 80051ea:	1a6d      	subs	r5, r5, r1
 80051ec:	4629      	mov	r1, r5
 80051ee:	4630      	mov	r0, r6
 80051f0:	f7ff ffa6 	bl	8005140 <sbrk_aligned>
 80051f4:	3001      	adds	r0, #1
 80051f6:	d03a      	beq.n	800526e <_malloc_r+0xea>
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	442b      	add	r3, r5
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	bb62      	cbnz	r2, 8005260 <_malloc_r+0xdc>
 8005206:	f8c8 7000 	str.w	r7, [r8]
 800520a:	e00f      	b.n	800522c <_malloc_r+0xa8>
 800520c:	6822      	ldr	r2, [r4, #0]
 800520e:	1b52      	subs	r2, r2, r5
 8005210:	d420      	bmi.n	8005254 <_malloc_r+0xd0>
 8005212:	2a0b      	cmp	r2, #11
 8005214:	d917      	bls.n	8005246 <_malloc_r+0xc2>
 8005216:	1961      	adds	r1, r4, r5
 8005218:	42a3      	cmp	r3, r4
 800521a:	6025      	str	r5, [r4, #0]
 800521c:	bf18      	it	ne
 800521e:	6059      	strne	r1, [r3, #4]
 8005220:	6863      	ldr	r3, [r4, #4]
 8005222:	bf08      	it	eq
 8005224:	f8c8 1000 	streq.w	r1, [r8]
 8005228:	5162      	str	r2, [r4, r5]
 800522a:	604b      	str	r3, [r1, #4]
 800522c:	4630      	mov	r0, r6
 800522e:	f000 f82f 	bl	8005290 <__malloc_unlock>
 8005232:	f104 000b 	add.w	r0, r4, #11
 8005236:	1d23      	adds	r3, r4, #4
 8005238:	f020 0007 	bic.w	r0, r0, #7
 800523c:	1ac2      	subs	r2, r0, r3
 800523e:	bf1c      	itt	ne
 8005240:	1a1b      	subne	r3, r3, r0
 8005242:	50a3      	strne	r3, [r4, r2]
 8005244:	e7af      	b.n	80051a6 <_malloc_r+0x22>
 8005246:	6862      	ldr	r2, [r4, #4]
 8005248:	42a3      	cmp	r3, r4
 800524a:	bf0c      	ite	eq
 800524c:	f8c8 2000 	streq.w	r2, [r8]
 8005250:	605a      	strne	r2, [r3, #4]
 8005252:	e7eb      	b.n	800522c <_malloc_r+0xa8>
 8005254:	4623      	mov	r3, r4
 8005256:	6864      	ldr	r4, [r4, #4]
 8005258:	e7ae      	b.n	80051b8 <_malloc_r+0x34>
 800525a:	463c      	mov	r4, r7
 800525c:	687f      	ldr	r7, [r7, #4]
 800525e:	e7b6      	b.n	80051ce <_malloc_r+0x4a>
 8005260:	461a      	mov	r2, r3
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	42a3      	cmp	r3, r4
 8005266:	d1fb      	bne.n	8005260 <_malloc_r+0xdc>
 8005268:	2300      	movs	r3, #0
 800526a:	6053      	str	r3, [r2, #4]
 800526c:	e7de      	b.n	800522c <_malloc_r+0xa8>
 800526e:	230c      	movs	r3, #12
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	4630      	mov	r0, r6
 8005274:	f000 f80c 	bl	8005290 <__malloc_unlock>
 8005278:	e794      	b.n	80051a4 <_malloc_r+0x20>
 800527a:	6005      	str	r5, [r0, #0]
 800527c:	e7d6      	b.n	800522c <_malloc_r+0xa8>
 800527e:	bf00      	nop
 8005280:	20000360 	.word	0x20000360

08005284 <__malloc_lock>:
 8005284:	4801      	ldr	r0, [pc, #4]	@ (800528c <__malloc_lock+0x8>)
 8005286:	f7ff bf0f 	b.w	80050a8 <__retarget_lock_acquire_recursive>
 800528a:	bf00      	nop
 800528c:	20000358 	.word	0x20000358

08005290 <__malloc_unlock>:
 8005290:	4801      	ldr	r0, [pc, #4]	@ (8005298 <__malloc_unlock+0x8>)
 8005292:	f7ff bf0a 	b.w	80050aa <__retarget_lock_release_recursive>
 8005296:	bf00      	nop
 8005298:	20000358 	.word	0x20000358

0800529c <__ssputs_r>:
 800529c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a0:	688e      	ldr	r6, [r1, #8]
 80052a2:	461f      	mov	r7, r3
 80052a4:	42be      	cmp	r6, r7
 80052a6:	680b      	ldr	r3, [r1, #0]
 80052a8:	4682      	mov	sl, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	4690      	mov	r8, r2
 80052ae:	d82d      	bhi.n	800530c <__ssputs_r+0x70>
 80052b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80052b8:	d026      	beq.n	8005308 <__ssputs_r+0x6c>
 80052ba:	6965      	ldr	r5, [r4, #20]
 80052bc:	6909      	ldr	r1, [r1, #16]
 80052be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052c2:	eba3 0901 	sub.w	r9, r3, r1
 80052c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052ca:	1c7b      	adds	r3, r7, #1
 80052cc:	444b      	add	r3, r9
 80052ce:	106d      	asrs	r5, r5, #1
 80052d0:	429d      	cmp	r5, r3
 80052d2:	bf38      	it	cc
 80052d4:	461d      	movcc	r5, r3
 80052d6:	0553      	lsls	r3, r2, #21
 80052d8:	d527      	bpl.n	800532a <__ssputs_r+0x8e>
 80052da:	4629      	mov	r1, r5
 80052dc:	f7ff ff52 	bl	8005184 <_malloc_r>
 80052e0:	4606      	mov	r6, r0
 80052e2:	b360      	cbz	r0, 800533e <__ssputs_r+0xa2>
 80052e4:	6921      	ldr	r1, [r4, #16]
 80052e6:	464a      	mov	r2, r9
 80052e8:	f000 fae8 	bl	80058bc <memcpy>
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80052f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	6126      	str	r6, [r4, #16]
 80052fa:	6165      	str	r5, [r4, #20]
 80052fc:	444e      	add	r6, r9
 80052fe:	eba5 0509 	sub.w	r5, r5, r9
 8005302:	6026      	str	r6, [r4, #0]
 8005304:	60a5      	str	r5, [r4, #8]
 8005306:	463e      	mov	r6, r7
 8005308:	42be      	cmp	r6, r7
 800530a:	d900      	bls.n	800530e <__ssputs_r+0x72>
 800530c:	463e      	mov	r6, r7
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	4632      	mov	r2, r6
 8005312:	4641      	mov	r1, r8
 8005314:	f000 faa8 	bl	8005868 <memmove>
 8005318:	68a3      	ldr	r3, [r4, #8]
 800531a:	1b9b      	subs	r3, r3, r6
 800531c:	60a3      	str	r3, [r4, #8]
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	4433      	add	r3, r6
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	2000      	movs	r0, #0
 8005326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800532a:	462a      	mov	r2, r5
 800532c:	f000 fad4 	bl	80058d8 <_realloc_r>
 8005330:	4606      	mov	r6, r0
 8005332:	2800      	cmp	r0, #0
 8005334:	d1e0      	bne.n	80052f8 <__ssputs_r+0x5c>
 8005336:	6921      	ldr	r1, [r4, #16]
 8005338:	4650      	mov	r0, sl
 800533a:	f7ff feb7 	bl	80050ac <_free_r>
 800533e:	230c      	movs	r3, #12
 8005340:	f8ca 3000 	str.w	r3, [sl]
 8005344:	89a3      	ldrh	r3, [r4, #12]
 8005346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800534a:	81a3      	strh	r3, [r4, #12]
 800534c:	f04f 30ff 	mov.w	r0, #4294967295
 8005350:	e7e9      	b.n	8005326 <__ssputs_r+0x8a>
	...

08005354 <_svfiprintf_r>:
 8005354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	4698      	mov	r8, r3
 800535a:	898b      	ldrh	r3, [r1, #12]
 800535c:	061b      	lsls	r3, r3, #24
 800535e:	b09d      	sub	sp, #116	@ 0x74
 8005360:	4607      	mov	r7, r0
 8005362:	460d      	mov	r5, r1
 8005364:	4614      	mov	r4, r2
 8005366:	d510      	bpl.n	800538a <_svfiprintf_r+0x36>
 8005368:	690b      	ldr	r3, [r1, #16]
 800536a:	b973      	cbnz	r3, 800538a <_svfiprintf_r+0x36>
 800536c:	2140      	movs	r1, #64	@ 0x40
 800536e:	f7ff ff09 	bl	8005184 <_malloc_r>
 8005372:	6028      	str	r0, [r5, #0]
 8005374:	6128      	str	r0, [r5, #16]
 8005376:	b930      	cbnz	r0, 8005386 <_svfiprintf_r+0x32>
 8005378:	230c      	movs	r3, #12
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	b01d      	add	sp, #116	@ 0x74
 8005382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005386:	2340      	movs	r3, #64	@ 0x40
 8005388:	616b      	str	r3, [r5, #20]
 800538a:	2300      	movs	r3, #0
 800538c:	9309      	str	r3, [sp, #36]	@ 0x24
 800538e:	2320      	movs	r3, #32
 8005390:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005394:	f8cd 800c 	str.w	r8, [sp, #12]
 8005398:	2330      	movs	r3, #48	@ 0x30
 800539a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005538 <_svfiprintf_r+0x1e4>
 800539e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053a2:	f04f 0901 	mov.w	r9, #1
 80053a6:	4623      	mov	r3, r4
 80053a8:	469a      	mov	sl, r3
 80053aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053ae:	b10a      	cbz	r2, 80053b4 <_svfiprintf_r+0x60>
 80053b0:	2a25      	cmp	r2, #37	@ 0x25
 80053b2:	d1f9      	bne.n	80053a8 <_svfiprintf_r+0x54>
 80053b4:	ebba 0b04 	subs.w	fp, sl, r4
 80053b8:	d00b      	beq.n	80053d2 <_svfiprintf_r+0x7e>
 80053ba:	465b      	mov	r3, fp
 80053bc:	4622      	mov	r2, r4
 80053be:	4629      	mov	r1, r5
 80053c0:	4638      	mov	r0, r7
 80053c2:	f7ff ff6b 	bl	800529c <__ssputs_r>
 80053c6:	3001      	adds	r0, #1
 80053c8:	f000 80a7 	beq.w	800551a <_svfiprintf_r+0x1c6>
 80053cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053ce:	445a      	add	r2, fp
 80053d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80053d2:	f89a 3000 	ldrb.w	r3, [sl]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 809f 	beq.w	800551a <_svfiprintf_r+0x1c6>
 80053dc:	2300      	movs	r3, #0
 80053de:	f04f 32ff 	mov.w	r2, #4294967295
 80053e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053e6:	f10a 0a01 	add.w	sl, sl, #1
 80053ea:	9304      	str	r3, [sp, #16]
 80053ec:	9307      	str	r3, [sp, #28]
 80053ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80053f4:	4654      	mov	r4, sl
 80053f6:	2205      	movs	r2, #5
 80053f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053fc:	484e      	ldr	r0, [pc, #312]	@ (8005538 <_svfiprintf_r+0x1e4>)
 80053fe:	f7fa fee7 	bl	80001d0 <memchr>
 8005402:	9a04      	ldr	r2, [sp, #16]
 8005404:	b9d8      	cbnz	r0, 800543e <_svfiprintf_r+0xea>
 8005406:	06d0      	lsls	r0, r2, #27
 8005408:	bf44      	itt	mi
 800540a:	2320      	movmi	r3, #32
 800540c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005410:	0711      	lsls	r1, r2, #28
 8005412:	bf44      	itt	mi
 8005414:	232b      	movmi	r3, #43	@ 0x2b
 8005416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800541a:	f89a 3000 	ldrb.w	r3, [sl]
 800541e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005420:	d015      	beq.n	800544e <_svfiprintf_r+0xfa>
 8005422:	9a07      	ldr	r2, [sp, #28]
 8005424:	4654      	mov	r4, sl
 8005426:	2000      	movs	r0, #0
 8005428:	f04f 0c0a 	mov.w	ip, #10
 800542c:	4621      	mov	r1, r4
 800542e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005432:	3b30      	subs	r3, #48	@ 0x30
 8005434:	2b09      	cmp	r3, #9
 8005436:	d94b      	bls.n	80054d0 <_svfiprintf_r+0x17c>
 8005438:	b1b0      	cbz	r0, 8005468 <_svfiprintf_r+0x114>
 800543a:	9207      	str	r2, [sp, #28]
 800543c:	e014      	b.n	8005468 <_svfiprintf_r+0x114>
 800543e:	eba0 0308 	sub.w	r3, r0, r8
 8005442:	fa09 f303 	lsl.w	r3, r9, r3
 8005446:	4313      	orrs	r3, r2
 8005448:	9304      	str	r3, [sp, #16]
 800544a:	46a2      	mov	sl, r4
 800544c:	e7d2      	b.n	80053f4 <_svfiprintf_r+0xa0>
 800544e:	9b03      	ldr	r3, [sp, #12]
 8005450:	1d19      	adds	r1, r3, #4
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	9103      	str	r1, [sp, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	bfbb      	ittet	lt
 800545a:	425b      	neglt	r3, r3
 800545c:	f042 0202 	orrlt.w	r2, r2, #2
 8005460:	9307      	strge	r3, [sp, #28]
 8005462:	9307      	strlt	r3, [sp, #28]
 8005464:	bfb8      	it	lt
 8005466:	9204      	strlt	r2, [sp, #16]
 8005468:	7823      	ldrb	r3, [r4, #0]
 800546a:	2b2e      	cmp	r3, #46	@ 0x2e
 800546c:	d10a      	bne.n	8005484 <_svfiprintf_r+0x130>
 800546e:	7863      	ldrb	r3, [r4, #1]
 8005470:	2b2a      	cmp	r3, #42	@ 0x2a
 8005472:	d132      	bne.n	80054da <_svfiprintf_r+0x186>
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	1d1a      	adds	r2, r3, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	9203      	str	r2, [sp, #12]
 800547c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005480:	3402      	adds	r4, #2
 8005482:	9305      	str	r3, [sp, #20]
 8005484:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005548 <_svfiprintf_r+0x1f4>
 8005488:	7821      	ldrb	r1, [r4, #0]
 800548a:	2203      	movs	r2, #3
 800548c:	4650      	mov	r0, sl
 800548e:	f7fa fe9f 	bl	80001d0 <memchr>
 8005492:	b138      	cbz	r0, 80054a4 <_svfiprintf_r+0x150>
 8005494:	9b04      	ldr	r3, [sp, #16]
 8005496:	eba0 000a 	sub.w	r0, r0, sl
 800549a:	2240      	movs	r2, #64	@ 0x40
 800549c:	4082      	lsls	r2, r0
 800549e:	4313      	orrs	r3, r2
 80054a0:	3401      	adds	r4, #1
 80054a2:	9304      	str	r3, [sp, #16]
 80054a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a8:	4824      	ldr	r0, [pc, #144]	@ (800553c <_svfiprintf_r+0x1e8>)
 80054aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054ae:	2206      	movs	r2, #6
 80054b0:	f7fa fe8e 	bl	80001d0 <memchr>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d036      	beq.n	8005526 <_svfiprintf_r+0x1d2>
 80054b8:	4b21      	ldr	r3, [pc, #132]	@ (8005540 <_svfiprintf_r+0x1ec>)
 80054ba:	bb1b      	cbnz	r3, 8005504 <_svfiprintf_r+0x1b0>
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	3307      	adds	r3, #7
 80054c0:	f023 0307 	bic.w	r3, r3, #7
 80054c4:	3308      	adds	r3, #8
 80054c6:	9303      	str	r3, [sp, #12]
 80054c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054ca:	4433      	add	r3, r6
 80054cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ce:	e76a      	b.n	80053a6 <_svfiprintf_r+0x52>
 80054d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80054d4:	460c      	mov	r4, r1
 80054d6:	2001      	movs	r0, #1
 80054d8:	e7a8      	b.n	800542c <_svfiprintf_r+0xd8>
 80054da:	2300      	movs	r3, #0
 80054dc:	3401      	adds	r4, #1
 80054de:	9305      	str	r3, [sp, #20]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f04f 0c0a 	mov.w	ip, #10
 80054e6:	4620      	mov	r0, r4
 80054e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ec:	3a30      	subs	r2, #48	@ 0x30
 80054ee:	2a09      	cmp	r2, #9
 80054f0:	d903      	bls.n	80054fa <_svfiprintf_r+0x1a6>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0c6      	beq.n	8005484 <_svfiprintf_r+0x130>
 80054f6:	9105      	str	r1, [sp, #20]
 80054f8:	e7c4      	b.n	8005484 <_svfiprintf_r+0x130>
 80054fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80054fe:	4604      	mov	r4, r0
 8005500:	2301      	movs	r3, #1
 8005502:	e7f0      	b.n	80054e6 <_svfiprintf_r+0x192>
 8005504:	ab03      	add	r3, sp, #12
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	462a      	mov	r2, r5
 800550a:	4b0e      	ldr	r3, [pc, #56]	@ (8005544 <_svfiprintf_r+0x1f0>)
 800550c:	a904      	add	r1, sp, #16
 800550e:	4638      	mov	r0, r7
 8005510:	f3af 8000 	nop.w
 8005514:	1c42      	adds	r2, r0, #1
 8005516:	4606      	mov	r6, r0
 8005518:	d1d6      	bne.n	80054c8 <_svfiprintf_r+0x174>
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	065b      	lsls	r3, r3, #25
 800551e:	f53f af2d 	bmi.w	800537c <_svfiprintf_r+0x28>
 8005522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005524:	e72c      	b.n	8005380 <_svfiprintf_r+0x2c>
 8005526:	ab03      	add	r3, sp, #12
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	462a      	mov	r2, r5
 800552c:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <_svfiprintf_r+0x1f0>)
 800552e:	a904      	add	r1, sp, #16
 8005530:	4638      	mov	r0, r7
 8005532:	f000 f879 	bl	8005628 <_printf_i>
 8005536:	e7ed      	b.n	8005514 <_svfiprintf_r+0x1c0>
 8005538:	080059d4 	.word	0x080059d4
 800553c:	080059de 	.word	0x080059de
 8005540:	00000000 	.word	0x00000000
 8005544:	0800529d 	.word	0x0800529d
 8005548:	080059da 	.word	0x080059da

0800554c <_printf_common>:
 800554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005550:	4616      	mov	r6, r2
 8005552:	4698      	mov	r8, r3
 8005554:	688a      	ldr	r2, [r1, #8]
 8005556:	690b      	ldr	r3, [r1, #16]
 8005558:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800555c:	4293      	cmp	r3, r2
 800555e:	bfb8      	it	lt
 8005560:	4613      	movlt	r3, r2
 8005562:	6033      	str	r3, [r6, #0]
 8005564:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005568:	4607      	mov	r7, r0
 800556a:	460c      	mov	r4, r1
 800556c:	b10a      	cbz	r2, 8005572 <_printf_common+0x26>
 800556e:	3301      	adds	r3, #1
 8005570:	6033      	str	r3, [r6, #0]
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	0699      	lsls	r1, r3, #26
 8005576:	bf42      	ittt	mi
 8005578:	6833      	ldrmi	r3, [r6, #0]
 800557a:	3302      	addmi	r3, #2
 800557c:	6033      	strmi	r3, [r6, #0]
 800557e:	6825      	ldr	r5, [r4, #0]
 8005580:	f015 0506 	ands.w	r5, r5, #6
 8005584:	d106      	bne.n	8005594 <_printf_common+0x48>
 8005586:	f104 0a19 	add.w	sl, r4, #25
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	6832      	ldr	r2, [r6, #0]
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	42ab      	cmp	r3, r5
 8005592:	dc26      	bgt.n	80055e2 <_printf_common+0x96>
 8005594:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005598:	6822      	ldr	r2, [r4, #0]
 800559a:	3b00      	subs	r3, #0
 800559c:	bf18      	it	ne
 800559e:	2301      	movne	r3, #1
 80055a0:	0692      	lsls	r2, r2, #26
 80055a2:	d42b      	bmi.n	80055fc <_printf_common+0xb0>
 80055a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055a8:	4641      	mov	r1, r8
 80055aa:	4638      	mov	r0, r7
 80055ac:	47c8      	blx	r9
 80055ae:	3001      	adds	r0, #1
 80055b0:	d01e      	beq.n	80055f0 <_printf_common+0xa4>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	6922      	ldr	r2, [r4, #16]
 80055b6:	f003 0306 	and.w	r3, r3, #6
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	bf02      	ittt	eq
 80055be:	68e5      	ldreq	r5, [r4, #12]
 80055c0:	6833      	ldreq	r3, [r6, #0]
 80055c2:	1aed      	subeq	r5, r5, r3
 80055c4:	68a3      	ldr	r3, [r4, #8]
 80055c6:	bf0c      	ite	eq
 80055c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055cc:	2500      	movne	r5, #0
 80055ce:	4293      	cmp	r3, r2
 80055d0:	bfc4      	itt	gt
 80055d2:	1a9b      	subgt	r3, r3, r2
 80055d4:	18ed      	addgt	r5, r5, r3
 80055d6:	2600      	movs	r6, #0
 80055d8:	341a      	adds	r4, #26
 80055da:	42b5      	cmp	r5, r6
 80055dc:	d11a      	bne.n	8005614 <_printf_common+0xc8>
 80055de:	2000      	movs	r0, #0
 80055e0:	e008      	b.n	80055f4 <_printf_common+0xa8>
 80055e2:	2301      	movs	r3, #1
 80055e4:	4652      	mov	r2, sl
 80055e6:	4641      	mov	r1, r8
 80055e8:	4638      	mov	r0, r7
 80055ea:	47c8      	blx	r9
 80055ec:	3001      	adds	r0, #1
 80055ee:	d103      	bne.n	80055f8 <_printf_common+0xac>
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295
 80055f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f8:	3501      	adds	r5, #1
 80055fa:	e7c6      	b.n	800558a <_printf_common+0x3e>
 80055fc:	18e1      	adds	r1, r4, r3
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	2030      	movs	r0, #48	@ 0x30
 8005602:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005606:	4422      	add	r2, r4
 8005608:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800560c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005610:	3302      	adds	r3, #2
 8005612:	e7c7      	b.n	80055a4 <_printf_common+0x58>
 8005614:	2301      	movs	r3, #1
 8005616:	4622      	mov	r2, r4
 8005618:	4641      	mov	r1, r8
 800561a:	4638      	mov	r0, r7
 800561c:	47c8      	blx	r9
 800561e:	3001      	adds	r0, #1
 8005620:	d0e6      	beq.n	80055f0 <_printf_common+0xa4>
 8005622:	3601      	adds	r6, #1
 8005624:	e7d9      	b.n	80055da <_printf_common+0x8e>
	...

08005628 <_printf_i>:
 8005628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800562c:	7e0f      	ldrb	r7, [r1, #24]
 800562e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005630:	2f78      	cmp	r7, #120	@ 0x78
 8005632:	4691      	mov	r9, r2
 8005634:	4680      	mov	r8, r0
 8005636:	460c      	mov	r4, r1
 8005638:	469a      	mov	sl, r3
 800563a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800563e:	d807      	bhi.n	8005650 <_printf_i+0x28>
 8005640:	2f62      	cmp	r7, #98	@ 0x62
 8005642:	d80a      	bhi.n	800565a <_printf_i+0x32>
 8005644:	2f00      	cmp	r7, #0
 8005646:	f000 80d2 	beq.w	80057ee <_printf_i+0x1c6>
 800564a:	2f58      	cmp	r7, #88	@ 0x58
 800564c:	f000 80b9 	beq.w	80057c2 <_printf_i+0x19a>
 8005650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005654:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005658:	e03a      	b.n	80056d0 <_printf_i+0xa8>
 800565a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800565e:	2b15      	cmp	r3, #21
 8005660:	d8f6      	bhi.n	8005650 <_printf_i+0x28>
 8005662:	a101      	add	r1, pc, #4	@ (adr r1, 8005668 <_printf_i+0x40>)
 8005664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056d5 	.word	0x080056d5
 8005670:	08005651 	.word	0x08005651
 8005674:	08005651 	.word	0x08005651
 8005678:	08005651 	.word	0x08005651
 800567c:	08005651 	.word	0x08005651
 8005680:	080056d5 	.word	0x080056d5
 8005684:	08005651 	.word	0x08005651
 8005688:	08005651 	.word	0x08005651
 800568c:	08005651 	.word	0x08005651
 8005690:	08005651 	.word	0x08005651
 8005694:	080057d5 	.word	0x080057d5
 8005698:	080056ff 	.word	0x080056ff
 800569c:	0800578f 	.word	0x0800578f
 80056a0:	08005651 	.word	0x08005651
 80056a4:	08005651 	.word	0x08005651
 80056a8:	080057f7 	.word	0x080057f7
 80056ac:	08005651 	.word	0x08005651
 80056b0:	080056ff 	.word	0x080056ff
 80056b4:	08005651 	.word	0x08005651
 80056b8:	08005651 	.word	0x08005651
 80056bc:	08005797 	.word	0x08005797
 80056c0:	6833      	ldr	r3, [r6, #0]
 80056c2:	1d1a      	adds	r2, r3, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6032      	str	r2, [r6, #0]
 80056c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056d0:	2301      	movs	r3, #1
 80056d2:	e09d      	b.n	8005810 <_printf_i+0x1e8>
 80056d4:	6833      	ldr	r3, [r6, #0]
 80056d6:	6820      	ldr	r0, [r4, #0]
 80056d8:	1d19      	adds	r1, r3, #4
 80056da:	6031      	str	r1, [r6, #0]
 80056dc:	0606      	lsls	r6, r0, #24
 80056de:	d501      	bpl.n	80056e4 <_printf_i+0xbc>
 80056e0:	681d      	ldr	r5, [r3, #0]
 80056e2:	e003      	b.n	80056ec <_printf_i+0xc4>
 80056e4:	0645      	lsls	r5, r0, #25
 80056e6:	d5fb      	bpl.n	80056e0 <_printf_i+0xb8>
 80056e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056ec:	2d00      	cmp	r5, #0
 80056ee:	da03      	bge.n	80056f8 <_printf_i+0xd0>
 80056f0:	232d      	movs	r3, #45	@ 0x2d
 80056f2:	426d      	negs	r5, r5
 80056f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056f8:	4859      	ldr	r0, [pc, #356]	@ (8005860 <_printf_i+0x238>)
 80056fa:	230a      	movs	r3, #10
 80056fc:	e011      	b.n	8005722 <_printf_i+0xfa>
 80056fe:	6821      	ldr	r1, [r4, #0]
 8005700:	6833      	ldr	r3, [r6, #0]
 8005702:	0608      	lsls	r0, r1, #24
 8005704:	f853 5b04 	ldr.w	r5, [r3], #4
 8005708:	d402      	bmi.n	8005710 <_printf_i+0xe8>
 800570a:	0649      	lsls	r1, r1, #25
 800570c:	bf48      	it	mi
 800570e:	b2ad      	uxthmi	r5, r5
 8005710:	2f6f      	cmp	r7, #111	@ 0x6f
 8005712:	4853      	ldr	r0, [pc, #332]	@ (8005860 <_printf_i+0x238>)
 8005714:	6033      	str	r3, [r6, #0]
 8005716:	bf14      	ite	ne
 8005718:	230a      	movne	r3, #10
 800571a:	2308      	moveq	r3, #8
 800571c:	2100      	movs	r1, #0
 800571e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005722:	6866      	ldr	r6, [r4, #4]
 8005724:	60a6      	str	r6, [r4, #8]
 8005726:	2e00      	cmp	r6, #0
 8005728:	bfa2      	ittt	ge
 800572a:	6821      	ldrge	r1, [r4, #0]
 800572c:	f021 0104 	bicge.w	r1, r1, #4
 8005730:	6021      	strge	r1, [r4, #0]
 8005732:	b90d      	cbnz	r5, 8005738 <_printf_i+0x110>
 8005734:	2e00      	cmp	r6, #0
 8005736:	d04b      	beq.n	80057d0 <_printf_i+0x1a8>
 8005738:	4616      	mov	r6, r2
 800573a:	fbb5 f1f3 	udiv	r1, r5, r3
 800573e:	fb03 5711 	mls	r7, r3, r1, r5
 8005742:	5dc7      	ldrb	r7, [r0, r7]
 8005744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005748:	462f      	mov	r7, r5
 800574a:	42bb      	cmp	r3, r7
 800574c:	460d      	mov	r5, r1
 800574e:	d9f4      	bls.n	800573a <_printf_i+0x112>
 8005750:	2b08      	cmp	r3, #8
 8005752:	d10b      	bne.n	800576c <_printf_i+0x144>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	07df      	lsls	r7, r3, #31
 8005758:	d508      	bpl.n	800576c <_printf_i+0x144>
 800575a:	6923      	ldr	r3, [r4, #16]
 800575c:	6861      	ldr	r1, [r4, #4]
 800575e:	4299      	cmp	r1, r3
 8005760:	bfde      	ittt	le
 8005762:	2330      	movle	r3, #48	@ 0x30
 8005764:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005768:	f106 36ff 	addle.w	r6, r6, #4294967295
 800576c:	1b92      	subs	r2, r2, r6
 800576e:	6122      	str	r2, [r4, #16]
 8005770:	f8cd a000 	str.w	sl, [sp]
 8005774:	464b      	mov	r3, r9
 8005776:	aa03      	add	r2, sp, #12
 8005778:	4621      	mov	r1, r4
 800577a:	4640      	mov	r0, r8
 800577c:	f7ff fee6 	bl	800554c <_printf_common>
 8005780:	3001      	adds	r0, #1
 8005782:	d14a      	bne.n	800581a <_printf_i+0x1f2>
 8005784:	f04f 30ff 	mov.w	r0, #4294967295
 8005788:	b004      	add	sp, #16
 800578a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	f043 0320 	orr.w	r3, r3, #32
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	4833      	ldr	r0, [pc, #204]	@ (8005864 <_printf_i+0x23c>)
 8005798:	2778      	movs	r7, #120	@ 0x78
 800579a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	6831      	ldr	r1, [r6, #0]
 80057a2:	061f      	lsls	r7, r3, #24
 80057a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80057a8:	d402      	bmi.n	80057b0 <_printf_i+0x188>
 80057aa:	065f      	lsls	r7, r3, #25
 80057ac:	bf48      	it	mi
 80057ae:	b2ad      	uxthmi	r5, r5
 80057b0:	6031      	str	r1, [r6, #0]
 80057b2:	07d9      	lsls	r1, r3, #31
 80057b4:	bf44      	itt	mi
 80057b6:	f043 0320 	orrmi.w	r3, r3, #32
 80057ba:	6023      	strmi	r3, [r4, #0]
 80057bc:	b11d      	cbz	r5, 80057c6 <_printf_i+0x19e>
 80057be:	2310      	movs	r3, #16
 80057c0:	e7ac      	b.n	800571c <_printf_i+0xf4>
 80057c2:	4827      	ldr	r0, [pc, #156]	@ (8005860 <_printf_i+0x238>)
 80057c4:	e7e9      	b.n	800579a <_printf_i+0x172>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	f023 0320 	bic.w	r3, r3, #32
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	e7f6      	b.n	80057be <_printf_i+0x196>
 80057d0:	4616      	mov	r6, r2
 80057d2:	e7bd      	b.n	8005750 <_printf_i+0x128>
 80057d4:	6833      	ldr	r3, [r6, #0]
 80057d6:	6825      	ldr	r5, [r4, #0]
 80057d8:	6961      	ldr	r1, [r4, #20]
 80057da:	1d18      	adds	r0, r3, #4
 80057dc:	6030      	str	r0, [r6, #0]
 80057de:	062e      	lsls	r6, r5, #24
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	d501      	bpl.n	80057e8 <_printf_i+0x1c0>
 80057e4:	6019      	str	r1, [r3, #0]
 80057e6:	e002      	b.n	80057ee <_printf_i+0x1c6>
 80057e8:	0668      	lsls	r0, r5, #25
 80057ea:	d5fb      	bpl.n	80057e4 <_printf_i+0x1bc>
 80057ec:	8019      	strh	r1, [r3, #0]
 80057ee:	2300      	movs	r3, #0
 80057f0:	6123      	str	r3, [r4, #16]
 80057f2:	4616      	mov	r6, r2
 80057f4:	e7bc      	b.n	8005770 <_printf_i+0x148>
 80057f6:	6833      	ldr	r3, [r6, #0]
 80057f8:	1d1a      	adds	r2, r3, #4
 80057fa:	6032      	str	r2, [r6, #0]
 80057fc:	681e      	ldr	r6, [r3, #0]
 80057fe:	6862      	ldr	r2, [r4, #4]
 8005800:	2100      	movs	r1, #0
 8005802:	4630      	mov	r0, r6
 8005804:	f7fa fce4 	bl	80001d0 <memchr>
 8005808:	b108      	cbz	r0, 800580e <_printf_i+0x1e6>
 800580a:	1b80      	subs	r0, r0, r6
 800580c:	6060      	str	r0, [r4, #4]
 800580e:	6863      	ldr	r3, [r4, #4]
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	2300      	movs	r3, #0
 8005814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005818:	e7aa      	b.n	8005770 <_printf_i+0x148>
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	4632      	mov	r2, r6
 800581e:	4649      	mov	r1, r9
 8005820:	4640      	mov	r0, r8
 8005822:	47d0      	blx	sl
 8005824:	3001      	adds	r0, #1
 8005826:	d0ad      	beq.n	8005784 <_printf_i+0x15c>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	079b      	lsls	r3, r3, #30
 800582c:	d413      	bmi.n	8005856 <_printf_i+0x22e>
 800582e:	68e0      	ldr	r0, [r4, #12]
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	4298      	cmp	r0, r3
 8005834:	bfb8      	it	lt
 8005836:	4618      	movlt	r0, r3
 8005838:	e7a6      	b.n	8005788 <_printf_i+0x160>
 800583a:	2301      	movs	r3, #1
 800583c:	4632      	mov	r2, r6
 800583e:	4649      	mov	r1, r9
 8005840:	4640      	mov	r0, r8
 8005842:	47d0      	blx	sl
 8005844:	3001      	adds	r0, #1
 8005846:	d09d      	beq.n	8005784 <_printf_i+0x15c>
 8005848:	3501      	adds	r5, #1
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	9903      	ldr	r1, [sp, #12]
 800584e:	1a5b      	subs	r3, r3, r1
 8005850:	42ab      	cmp	r3, r5
 8005852:	dcf2      	bgt.n	800583a <_printf_i+0x212>
 8005854:	e7eb      	b.n	800582e <_printf_i+0x206>
 8005856:	2500      	movs	r5, #0
 8005858:	f104 0619 	add.w	r6, r4, #25
 800585c:	e7f5      	b.n	800584a <_printf_i+0x222>
 800585e:	bf00      	nop
 8005860:	080059e5 	.word	0x080059e5
 8005864:	080059f6 	.word	0x080059f6

08005868 <memmove>:
 8005868:	4288      	cmp	r0, r1
 800586a:	b510      	push	{r4, lr}
 800586c:	eb01 0402 	add.w	r4, r1, r2
 8005870:	d902      	bls.n	8005878 <memmove+0x10>
 8005872:	4284      	cmp	r4, r0
 8005874:	4623      	mov	r3, r4
 8005876:	d807      	bhi.n	8005888 <memmove+0x20>
 8005878:	1e43      	subs	r3, r0, #1
 800587a:	42a1      	cmp	r1, r4
 800587c:	d008      	beq.n	8005890 <memmove+0x28>
 800587e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005882:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005886:	e7f8      	b.n	800587a <memmove+0x12>
 8005888:	4402      	add	r2, r0
 800588a:	4601      	mov	r1, r0
 800588c:	428a      	cmp	r2, r1
 800588e:	d100      	bne.n	8005892 <memmove+0x2a>
 8005890:	bd10      	pop	{r4, pc}
 8005892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800589a:	e7f7      	b.n	800588c <memmove+0x24>

0800589c <_sbrk_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4d06      	ldr	r5, [pc, #24]	@ (80058b8 <_sbrk_r+0x1c>)
 80058a0:	2300      	movs	r3, #0
 80058a2:	4604      	mov	r4, r0
 80058a4:	4608      	mov	r0, r1
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	f7fb f9e0 	bl	8000c6c <_sbrk>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	d102      	bne.n	80058b6 <_sbrk_r+0x1a>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	b103      	cbz	r3, 80058b6 <_sbrk_r+0x1a>
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	20000354 	.word	0x20000354

080058bc <memcpy>:
 80058bc:	440a      	add	r2, r1
 80058be:	4291      	cmp	r1, r2
 80058c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80058c4:	d100      	bne.n	80058c8 <memcpy+0xc>
 80058c6:	4770      	bx	lr
 80058c8:	b510      	push	{r4, lr}
 80058ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d2:	4291      	cmp	r1, r2
 80058d4:	d1f9      	bne.n	80058ca <memcpy+0xe>
 80058d6:	bd10      	pop	{r4, pc}

080058d8 <_realloc_r>:
 80058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	4680      	mov	r8, r0
 80058de:	4615      	mov	r5, r2
 80058e0:	460c      	mov	r4, r1
 80058e2:	b921      	cbnz	r1, 80058ee <_realloc_r+0x16>
 80058e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058e8:	4611      	mov	r1, r2
 80058ea:	f7ff bc4b 	b.w	8005184 <_malloc_r>
 80058ee:	b92a      	cbnz	r2, 80058fc <_realloc_r+0x24>
 80058f0:	f7ff fbdc 	bl	80050ac <_free_r>
 80058f4:	2400      	movs	r4, #0
 80058f6:	4620      	mov	r0, r4
 80058f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058fc:	f000 f81a 	bl	8005934 <_malloc_usable_size_r>
 8005900:	4285      	cmp	r5, r0
 8005902:	4606      	mov	r6, r0
 8005904:	d802      	bhi.n	800590c <_realloc_r+0x34>
 8005906:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800590a:	d8f4      	bhi.n	80058f6 <_realloc_r+0x1e>
 800590c:	4629      	mov	r1, r5
 800590e:	4640      	mov	r0, r8
 8005910:	f7ff fc38 	bl	8005184 <_malloc_r>
 8005914:	4607      	mov	r7, r0
 8005916:	2800      	cmp	r0, #0
 8005918:	d0ec      	beq.n	80058f4 <_realloc_r+0x1c>
 800591a:	42b5      	cmp	r5, r6
 800591c:	462a      	mov	r2, r5
 800591e:	4621      	mov	r1, r4
 8005920:	bf28      	it	cs
 8005922:	4632      	movcs	r2, r6
 8005924:	f7ff ffca 	bl	80058bc <memcpy>
 8005928:	4621      	mov	r1, r4
 800592a:	4640      	mov	r0, r8
 800592c:	f7ff fbbe 	bl	80050ac <_free_r>
 8005930:	463c      	mov	r4, r7
 8005932:	e7e0      	b.n	80058f6 <_realloc_r+0x1e>

08005934 <_malloc_usable_size_r>:
 8005934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005938:	1f18      	subs	r0, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	bfbc      	itt	lt
 800593e:	580b      	ldrlt	r3, [r1, r0]
 8005940:	18c0      	addlt	r0, r0, r3
 8005942:	4770      	bx	lr

08005944 <_init>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	bf00      	nop
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr

08005950 <_fini>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr
