
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c54  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004ddc  08004ddc  00005ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e38  08004e38  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e38  08004e38  00005e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e40  08004e40  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e40  08004e40  00005e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e44  08004e44  00005e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e48  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  08004e54  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08004e54  000061bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fbe  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002604  00000000  00000000  00016ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00019600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb6  00000000  00000000  0001a510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026763  00000000  00000000  0001b0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c23  00000000  00000000  00041829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eebbe  00000000  00000000  0005444c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014300a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e20  00000000  00000000  00143050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00146e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004dc4 	.word	0x08004dc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004dc4 	.word	0x08004dc4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <delay_us>:
#include "tim.h"
#include "stm32l4xx_hal.h"
#include "gpio.h"

void delay_us(uint16_t time) //funkcja opóźnienia czasowego
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7,0); // załącznie timera
 80004c2:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <delay_us+0x30>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7)<time); // wyłaczenie timera po upływie zadanego czasu
 80004ca:	bf00      	nop
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <delay_us+0x30>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d3f9      	bcc.n	80004cc <delay_us+0x14>
}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	200000e4 	.word	0x200000e4

080004ec <Sensor_trigger>:
uint32_t distance = 0;
uint32_t start;
uint32_t stop;

void Sensor_trigger() //funkcja wysyłania pulsu trigger
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, 1); // załączenie pulsu trigger
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fa:	f001 f913 	bl	8001724 <HAL_GPIO_WritePin>
	delay_us(10); // oczekiwanie 10us
 80004fe:	200a      	movs	r0, #10
 8000500:	f7ff ffda 	bl	80004b8 <delay_us>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, 0); // wyłączenie pulsu trigger
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800050a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050e:	f001 f909 	bl	8001724 <HAL_GPIO_WritePin>
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <Sensor_get_distance>:

int Sensor_get_distance() // funckja pomiaru odległości
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	Sensor_trigger();
 800051c:	f7ff ffe6 	bl	80004ec <Sensor_trigger>

	while( !(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin ))); // czekanie na stan wysoki
 8000520:	bf00      	nop
 8000522:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f001 f8e3 	bl	80016f4 <HAL_GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d0f6      	beq.n	8000522 <Sensor_get_distance+0xa>
	time1 = __HAL_TIM_GET_COUNTER(&htim7); // czas dla początku impulsu echo
 8000534:	4b13      	ldr	r3, [pc, #76]	@ (8000584 <Sensor_get_distance+0x6c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800053a:	4a13      	ldr	r2, [pc, #76]	@ (8000588 <Sensor_get_distance+0x70>)
 800053c:	6013      	str	r3, [r2, #0]

	while( HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin )); // czekanie na stan niski
 800053e:	bf00      	nop
 8000540:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000548:	f001 f8d4 	bl	80016f4 <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1f6      	bne.n	8000540 <Sensor_get_distance+0x28>
	time2 = __HAL_TIM_GET_COUNTER(&htim7);  // czas dla końca pusu echo
 8000552:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <Sensor_get_distance+0x6c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000558:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <Sensor_get_distance+0x74>)
 800055a:	6013      	str	r3, [r2, #0]

	diff = time2 - time1; // pomiar długości pulsu echo
 800055c:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <Sensor_get_distance+0x74>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <Sensor_get_distance+0x70>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	4a0a      	ldr	r2, [pc, #40]	@ (8000590 <Sensor_get_distance+0x78>)
 8000568:	6013      	str	r3, [r2, #0]
	distance = diff/58; // pomiar odległości według wzoru producenta
 800056a:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <Sensor_get_distance+0x78>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a09      	ldr	r2, [pc, #36]	@ (8000594 <Sensor_get_distance+0x7c>)
 8000570:	fba2 2303 	umull	r2, r3, r2, r3
 8000574:	095b      	lsrs	r3, r3, #5
 8000576:	4a08      	ldr	r2, [pc, #32]	@ (8000598 <Sensor_get_distance+0x80>)
 8000578:	6013      	str	r3, [r2, #0]

	return distance;
 800057a:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <Sensor_get_distance+0x80>)
 800057c:	681b      	ldr	r3, [r3, #0]
}
 800057e:	4618      	mov	r0, r3
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000e4 	.word	0x200000e4
 8000588:	20000028 	.word	0x20000028
 800058c:	2000002c 	.word	0x2000002c
 8000590:	20000030 	.word	0x20000030
 8000594:	8d3dcb09 	.word	0x8d3dcb09
 8000598:	20000034 	.word	0x20000034

0800059c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	@ 0x28
 80005a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	4b3d      	ldr	r3, [pc, #244]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a3c      	ldr	r2, [pc, #240]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005be:	4b3a      	ldr	r3, [pc, #232]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	4b37      	ldr	r3, [pc, #220]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	4a36      	ldr	r2, [pc, #216]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d6:	4b34      	ldr	r3, [pc, #208]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b31      	ldr	r3, [pc, #196]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	4a30      	ldr	r2, [pc, #192]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ee:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b2b      	ldr	r3, [pc, #172]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	4a2a      	ldr	r2, [pc, #168]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000606:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Trigger_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061c:	f001 f882 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2120      	movs	r1, #32
 8000624:	4821      	ldr	r0, [pc, #132]	@ (80006ac <MX_GPIO_Init+0x110>)
 8000626:	f001 f87d 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800062a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000630:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	481b      	ldr	r0, [pc, #108]	@ (80006b0 <MX_GPIO_Init+0x114>)
 8000642:	f000 fead 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Trigger_Pin;
 8000646:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f000 fe9d 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8000666:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067e:	f000 fe8f 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000682:	2320      	movs	r3, #32
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <MX_GPIO_Init+0x110>)
 800069a:	f000 fe81 	bl	80013a0 <HAL_GPIO_Init>

}
 800069e:	bf00      	nop
 80006a0:	3728      	adds	r7, #40	@ 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	48000400 	.word	0x48000400
 80006b0:	48000800 	.word	0x48000800

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b5b0      	push	{r4, r5, r7, lr}
 80006b6:	b08c      	sub	sp, #48	@ 0x30
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fcbf 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f867 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f7ff ff6b 	bl	800059c <MX_GPIO_Init>
  HAL_Init();
 80006c6:	f000 fcb9 	bl	800103c <HAL_Init>
  SystemClock_Config();
 80006ca:	f000 f861 	bl	8000790 <SystemClock_Config>
  MX_USART2_UART_Init();
 80006ce:	f000 fbff 	bl	8000ed0 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80006d2:	f000 fb31 	bl	8000d38 <MX_TIM7_Init>
  MX_TIM1_Init();
 80006d6:	f000 fa7f 	bl	8000bd8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006da:	f000 fad3 	bl	8000c84 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7);
 80006de:	4827      	ldr	r0, [pc, #156]	@ (800077c <main+0xc8>)
 80006e0:	f002 fbb0 	bl	8002e44 <HAL_TIM_Base_Start>
#if STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_SLAVE_TIM
  stepper_init(&stepper, &htim2, TIM_CHANNEL_3, &htim1);

#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
  stepper_init(&stepper, &htim2, TIM_CHANNEL_3);
 80006e4:	2208      	movs	r2, #8
 80006e6:	4926      	ldr	r1, [pc, #152]	@ (8000780 <main+0xcc>)
 80006e8:	4826      	ldr	r0, [pc, #152]	@ (8000784 <main+0xd0>)
 80006ea:	f000 f8c9 	bl	8000880 <stepper_init>

//  int32_t speed_table[SET_TABLE_SIZE] = {30, 20, -20, 10, 50};
  // int32_t angle_table[SET_TABLE_SIZE] = {-10, -5, 0, 5, 10};
int32_t angle_table[SET_TABLE_SIZE] = {-10, -5, 0, 5, 10}; // Zakres 180 stopni
 80006ee:	4b26      	ldr	r3, [pc, #152]	@ (8000788 <main+0xd4>)
 80006f0:	1d3c      	adds	r4, r7, #4
 80006f2:	461d      	mov	r5, r3
 80006f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f8:	682b      	ldr	r3, [r5, #0]
 80006fa:	6023      	str	r3, [r4, #0]
  int i = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t time_tick = HAL_GetTick();
 8000700:	f000 fd0c 	bl	800111c <HAL_GetTick>
 8000704:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t max_time = 2000;
 8000706:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t angle = 40; //speed = 0;
 800070c:	2328      	movs	r3, #40	@ 0x28
 800070e:	623b      	str	r3, [r7, #32]
  direction dir = CW;
 8000710:	2301      	movs	r3, #1
 8000712:	77fb      	strb	r3, [r7, #31]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if ((HAL_GetTick() - time_tick) > max_time)
 8000714:	f000 fd02 	bl	800111c <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000720:	429a      	cmp	r2, r3
 8000722:	d2f7      	bcs.n	8000714 <main+0x60>
    {
        time_tick = HAL_GetTick();
 8000724:	f000 fcfa 	bl	800111c <HAL_GetTick>
 8000728:	62b8      	str	r0, [r7, #40]	@ 0x28

        int32_t angle = angle_table[i];
 800072a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	3330      	adds	r3, #48	@ 0x30
 8000730:	443b      	add	r3, r7
 8000732:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000736:	61bb      	str	r3, [r7, #24]
        dir = (angle >= 0) ? CW : CCW;
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	43db      	mvns	r3, r3
 800073c:	0fdb      	lsrs	r3, r3, #31
 800073e:	b2db      	uxtb	r3, r3
 8000740:	77fb      	strb	r3, [r7, #31]

        stepper_set_angle(&stepper, dir, 2, abs(angle)); // Ustawienie kąta bezwzględnego
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	2b00      	cmp	r3, #0
 8000746:	bfb8      	it	lt
 8000748:	425b      	neglt	r3, r3
 800074a:	7ff9      	ldrb	r1, [r7, #31]
 800074c:	2202      	movs	r2, #2
 800074e:	480d      	ldr	r0, [pc, #52]	@ (8000784 <main+0xd0>)
 8000750:	f000 f8a8 	bl	80008a4 <stepper_set_angle>

        Sensor_get_distance();
 8000754:	f7ff fee0 	bl	8000518 <Sensor_get_distance>
        HAL_Delay(300); // Poczekaj przed wykonaniem następnego kroku
 8000758:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800075c:	f000 fcea 	bl	8001134 <HAL_Delay>
        i = (i + 1) % SET_TABLE_SIZE; // Zapętlenie indeksu w tabeli kątów
 8000760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <main+0xd8>)
 8000766:	fb83 1302 	smull	r1, r3, r3, r2
 800076a:	1059      	asrs	r1, r3, #1
 800076c:	17d3      	asrs	r3, r2, #31
 800076e:	1ac9      	subs	r1, r1, r3
 8000770:	460b      	mov	r3, r1
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	440b      	add	r3, r1
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((HAL_GetTick() - time_tick) > max_time)
 800077a:	e7cb      	b.n	8000714 <main+0x60>
 800077c:	200000e4 	.word	0x200000e4
 8000780:	20000098 	.word	0x20000098
 8000784:	20000038 	.word	0x20000038
 8000788:	08004ddc 	.word	0x08004ddc
 800078c:	66666667 	.word	0x66666667

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b096      	sub	sp, #88	@ 0x58
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2244      	movs	r2, #68	@ 0x44
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f004 fae3 	bl	8004d6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007b6:	f000 ffdb 	bl	8001770 <HAL_PWREx_ControlVoltageScaling>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007c0:	f000 f858 	bl	8000874 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ce:	2310      	movs	r3, #16
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d6:	2302      	movs	r3, #2
 80007d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007de:	230a      	movs	r3, #10
 80007e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e2:	2307      	movs	r3, #7
 80007e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 f812 	bl	800181c <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007fe:	f000 f839 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	2104      	movs	r1, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fbda 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000826:	f000 f825 	bl	8000874 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3758      	adds	r7, #88	@ 0x58
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <HAL_TIM_PWM_PulseFinishedCallback>:
	}
}
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)

{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stepper.timer.htim->Instance)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	429a      	cmp	r2, r3
 8000848:	d10d      	bne.n	8000866 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
	{
		stepper.step_counter++;
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	3301      	adds	r3, #1
 8000850:	4a07      	ldr	r2, [pc, #28]	@ (8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000852:	60d3      	str	r3, [r2, #12]

		if(stepper.step_counter >= stepper.steps_to_count)
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000856:	68da      	ldr	r2, [r3, #12]
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	429a      	cmp	r2, r3
 800085e:	d302      	bcc.n	8000866 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		{
			stepper_stop(&stepper);
 8000860:	4803      	ldr	r0, [pc, #12]	@ (8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000862:	f000 f857 	bl	8000914 <stepper_stop>
		}
	}
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000038 	.word	0x20000038

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <Error_Handler+0x8>

08000880 <stepper_init>:
	_stepper->timer.channel = _channel;
	_stepper->slave_timer.htim = _slave_timer;
}
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
void stepper_init(struct stepper_s *_stepper, TIM_HandleTypeDef *_htim, uint32_t _channel)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	_stepper->timer.htim = _htim;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	601a      	str	r2, [r3, #0]
	_stepper->timer.channel = _channel;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	605a      	str	r2, [r3, #4]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <stepper_set_angle>:

	HAL_TIM_PWM_Start(_stepper->timer.htim, _stepper->timer.channel);
}

void stepper_set_angle(struct stepper_s *_stepper, direction _dir, uint32_t _speed, uint32_t _angle)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	460b      	mov	r3, r1
 80008b2:	72fb      	strb	r3, [r7, #11]
	_stepper->mode = angle;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2201      	movs	r2, #1
 80008b8:	721a      	strb	r2, [r3, #8]

	stepper_set_direction(_stepper, _dir);
 80008ba:	7afb      	ldrb	r3, [r7, #11]
 80008bc:	4619      	mov	r1, r3
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f000 f872 	bl	80009a8 <stepper_set_direction>
	stepper_set_speed(_stepper, _speed);
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f000 f88c 	bl	80009e4 <stepper_set_speed>

	_stepper->step_counter = 0;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
	_stepper->steps_to_count = _angle * (STEP_PER_REVOLUTION * MICRO_STEP) / 360;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 80008d8:	fb02 f303 	mul.w	r3, r2, r3
 80008dc:	08db      	lsrs	r3, r3, #3
 80008de:	4a0c      	ldr	r2, [pc, #48]	@ (8000910 <stepper_set_angle+0x6c>)
 80008e0:	fba2 2303 	umull	r2, r3, r2, r3
 80008e4:	089a      	lsrs	r2, r3, #2
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	611a      	str	r2, [r3, #16]

	if(0 == _stepper->steps_to_count)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d102      	bne.n	80008f8 <stepper_set_angle+0x54>
	{
		stepper_stop(_stepper);
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f000 f80e 	bl	8000914 <stepper_stop>
	__HAL_TIM_SET_AUTORELOAD(_stepper->slave_timer.htim, _stepper->steps_to_count - 1);
	HAL_TIM_Base_Start_IT(_stepper->slave_timer.htim);

	HAL_TIM_PWM_Start(_stepper->timer.htim, _stepper->timer.channel);
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
	HAL_TIM_PWM_Start_IT(_stepper->timer.htim, _stepper->timer.channel);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	4619      	mov	r1, r3
 8000902:	4610      	mov	r0, r2
 8000904:	f002 fbf4 	bl	80030f0 <HAL_TIM_PWM_Start_IT>
#endif
}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	16c16c17 	.word	0x16c16c17

08000914 <stepper_stop>:

void stepper_stop(struct stepper_s *_stepper)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	_stepper->mode = idle;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	721a      	strb	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, 0);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d105      	bne.n	8000936 <stepper_stop+0x22>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	635a      	str	r2, [r3, #52]	@ 0x34
 8000934:	e02c      	b.n	8000990 <stepper_stop+0x7c>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d105      	bne.n	800094a <stepper_stop+0x36>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	2300      	movs	r3, #0
 8000946:	6393      	str	r3, [r2, #56]	@ 0x38
 8000948:	e022      	b.n	8000990 <stepper_stop+0x7c>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b08      	cmp	r3, #8
 8000950:	d105      	bne.n	800095e <stepper_stop+0x4a>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	2300      	movs	r3, #0
 800095a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800095c:	e018      	b.n	8000990 <stepper_stop+0x7c>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b0c      	cmp	r3, #12
 8000964:	d105      	bne.n	8000972 <stepper_stop+0x5e>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	2300      	movs	r3, #0
 800096e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000970:	e00e      	b.n	8000990 <stepper_stop+0x7c>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2b10      	cmp	r3, #16
 8000978:	d105      	bne.n	8000986 <stepper_stop+0x72>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	2300      	movs	r3, #0
 8000982:	6593      	str	r3, [r2, #88]	@ 0x58
 8000984:	e004      	b.n	8000990 <stepper_stop+0x7c>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2300      	movs	r3, #0
 800098e:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Stop(_stepper->timer.htim, _stepper->timer.channel);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	4619      	mov	r1, r3
 800099a:	4610      	mov	r0, r2
 800099c:	f002 fb12 	bl	8002fc4 <HAL_TIM_PWM_Stop>

#if STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_SLAVE_TIM
	HAL_TIM_Base_Stop_IT(_stepper->slave_timer.htim);
#endif
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <stepper_set_direction>:

void stepper_set_direction(struct stepper_s *_stepper, direction _dir)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	if(_dir == CCW)
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d105      	bne.n	80009c6 <stepper_set_direction+0x1e>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CCW);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2120      	movs	r1, #32
 80009be:	4808      	ldr	r0, [pc, #32]	@ (80009e0 <stepper_set_direction+0x38>)
 80009c0:	f000 feb0 	bl	8001724 <HAL_GPIO_WritePin>
	else if(_dir == CW)
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
}
 80009c4:	e007      	b.n	80009d6 <stepper_set_direction+0x2e>
	else if(_dir == CW)
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d104      	bne.n	80009d6 <stepper_set_direction+0x2e>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2120      	movs	r1, #32
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <stepper_set_direction+0x38>)
 80009d2:	f000 fea7 	bl	8001724 <HAL_GPIO_WritePin>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	48000400 	.word	0x48000400

080009e4 <stepper_set_speed>:

void stepper_set_speed(struct stepper_s *_stepper, uint32_t _speed)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	uint32_t counter, freq;

	if(_speed > 100)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	2b64      	cmp	r3, #100	@ 0x64
 80009f2:	d902      	bls.n	80009fa <stepper_set_speed+0x16>
	{
		_speed = 100;
 80009f4:	2364      	movs	r3, #100	@ 0x64
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	e006      	b.n	8000a08 <stepper_set_speed+0x24>
	}
	else if(_speed == 0)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d103      	bne.n	8000a08 <stepper_set_speed+0x24>
	{
		stepper_stop(_stepper);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff87 	bl	8000914 <stepper_stop>
		return;
 8000a06:	e068      	b.n	8000ada <stepper_set_speed+0xf6>
	}

	freq = (_speed * (STEPPER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ))/STEPPER_MOTOR_MAX_SPEED;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000a0e:	fb02 f303 	mul.w	r3, r2, r3
 8000a12:	4a33      	ldr	r2, [pc, #204]	@ (8000ae0 <stepper_set_speed+0xfc>)
 8000a14:	fba2 2303 	umull	r2, r3, r2, r3
 8000a18:	095b      	lsrs	r3, r3, #5
 8000a1a:	60fb      	str	r3, [r7, #12]
	counter = HAL_RCC_GetPCLK1Freq() / (_stepper->timer.htim->Init.Prescaler * freq);
 8000a1c:	f001 fc72 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8000a20:	4601      	mov	r1, r0
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	fb02 f303 	mul.w	r3, r2, r3
 8000a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a32:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(_stepper->timer.htim, 0);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_AUTORELOAD(_stepper->timer.htim, counter - 1);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	3a01      	subs	r2, #1
 8000a48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	3a01      	subs	r2, #1
 8000a52:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, (counter/2) - 1);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d107      	bne.n	8000a6c <stepper_set_speed+0x88>
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	085a      	lsrs	r2, r3, #1
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	3a01      	subs	r2, #1
 8000a68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a6a:	e036      	b.n	8000ada <stepper_set_speed+0xf6>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d107      	bne.n	8000a84 <stepper_set_speed+0xa0>
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	085b      	lsrs	r3, r3, #1
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	6812      	ldr	r2, [r2, #0]
 8000a7c:	6812      	ldr	r2, [r2, #0]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a82:	e02a      	b.n	8000ada <stepper_set_speed+0xf6>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	2b08      	cmp	r3, #8
 8000a8a:	d107      	bne.n	8000a9c <stepper_set_speed+0xb8>
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	085b      	lsrs	r3, r3, #1
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000a9a:	e01e      	b.n	8000ada <stepper_set_speed+0xf6>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b0c      	cmp	r3, #12
 8000aa2:	d107      	bne.n	8000ab4 <stepper_set_speed+0xd0>
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	085b      	lsrs	r3, r3, #1
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	6812      	ldr	r2, [r2, #0]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab2:	e012      	b.n	8000ada <stepper_set_speed+0xf6>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b10      	cmp	r3, #16
 8000aba:	d107      	bne.n	8000acc <stepper_set_speed+0xe8>
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	085b      	lsrs	r3, r3, #1
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	6812      	ldr	r2, [r2, #0]
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aca:	e006      	b.n	8000ada <stepper_set_speed+0xf6>
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	085b      	lsrs	r3, r3, #1
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	6812      	ldr	r2, [r2, #0]
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	51eb851f 	.word	0x51eb851f

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aee:	4a0e      	ldr	r2, [pc, #56]	@ (8000b28 <HAL_MspInit+0x44>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <HAL_MspInit+0x44>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b06:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <NMI_Handler+0x4>

08000b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <MemManage_Handler+0x4>

08000b44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b82:	f000 fab7 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b90:	4802      	ldr	r0, [pc, #8]	@ (8000b9c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b92:	f002 fc01 	bl	8003398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000004c 	.word	0x2000004c

08000ba0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ba4:	4802      	ldr	r0, [pc, #8]	@ (8000bb0 <TIM7_IRQHandler+0x10>)
 8000ba6:	f002 fbf7 	bl	8003398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000e4 	.word	0x200000e4

08000bb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bf8:	4b20      	ldr	r3, [pc, #128]	@ (8000c7c <MX_TIM1_Init+0xa4>)
 8000bfa:	4a21      	ldr	r2, [pc, #132]	@ (8000c80 <MX_TIM1_Init+0xa8>)
 8000bfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <MX_TIM1_Init+0xa4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	@ (8000c7c <MX_TIM1_Init+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <MX_TIM1_Init+0xa4>)
 8000c0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <MX_TIM1_Init+0xa4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <MX_TIM1_Init+0xa4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <MX_TIM1_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c24:	4815      	ldr	r0, [pc, #84]	@ (8000c7c <MX_TIM1_Init+0xa4>)
 8000c26:	f002 f8b5 	bl	8002d94 <HAL_TIM_Base_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000c30:	f7ff fe20 	bl	8000874 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000c34:	2307      	movs	r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	4619      	mov	r1, r3
 8000c42:	480e      	ldr	r0, [pc, #56]	@ (8000c7c <MX_TIM1_Init+0xa4>)
 8000c44:	f002 fdbe 	bl	80037c4 <HAL_TIM_SlaveConfigSynchro>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c4e:	f7ff fe11 	bl	8000874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <MX_TIM1_Init+0xa4>)
 8000c64:	f003 fac0 	bl	80041e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000c6e:	f7ff fe01 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000004c 	.word	0x2000004c
 8000c80:	40012c00 	.word	0x40012c00

08000c84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	@ 0x28
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c96:	463b      	mov	r3, r7
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ca8:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <MX_TIM2_Init+0xb0>)
 8000caa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40-1;
 8000cb0:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <MX_TIM2_Init+0xb0>)
 8000cb2:	2227      	movs	r2, #39	@ 0x27
 8000cb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <MX_TIM2_Init+0xb0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <MX_TIM2_Init+0xb0>)
 8000cbe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <MX_TIM2_Init+0xb0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <MX_TIM2_Init+0xb0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cd0:	4818      	ldr	r0, [pc, #96]	@ (8000d34 <MX_TIM2_Init+0xb0>)
 8000cd2:	f002 f91f 	bl	8002f14 <HAL_TIM_PWM_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000cdc:	f7ff fdca 	bl	8000874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000ce0:	2360      	movs	r3, #96	@ 0x60
 8000ce2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000ce4:	2380      	movs	r3, #128	@ 0x80
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4811      	ldr	r0, [pc, #68]	@ (8000d34 <MX_TIM2_Init+0xb0>)
 8000cf0:	f003 fa7a 	bl	80041e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000cfa:	f7ff fdbb 	bl	8000874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfe:	2360      	movs	r3, #96	@ 0x60
 8000d00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000d02:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	2208      	movs	r2, #8
 8000d14:	4619      	mov	r1, r3
 8000d16:	4807      	ldr	r0, [pc, #28]	@ (8000d34 <MX_TIM2_Init+0xb0>)
 8000d18:	f002 fc40 	bl	800359c <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000d22:	f7ff fda7 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d26:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <MX_TIM2_Init+0xb0>)
 8000d28:	f000 f89c 	bl	8000e64 <HAL_TIM_MspPostInit>

}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	@ 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000098 	.word	0x20000098

08000d38 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d48:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_TIM7_Init+0x64>)
 8000d4a:	4a15      	ldr	r2, [pc, #84]	@ (8000da0 <MX_TIM7_Init+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <MX_TIM7_Init+0x64>)
 8000d50:	224f      	movs	r2, #79	@ 0x4f
 8000d52:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_TIM7_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <MX_TIM7_Init+0x64>)
 8000d5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d60:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_TIM7_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <MX_TIM7_Init+0x64>)
 8000d6a:	f002 f813 	bl	8002d94 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000d74:	f7ff fd7e 	bl	8000874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_TIM7_Init+0x64>)
 8000d86:	f003 fa2f 	bl	80041e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000d90:	f7ff fd70 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000e4 	.word	0x200000e4
 8000da0:	40001400 	.word	0x40001400

08000da4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e1c <HAL_TIM_Base_MspInit+0x78>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d114      	bne.n	8000de0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <HAL_TIM_Base_MspInit+0x7c>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dba:	4a19      	ldr	r2, [pc, #100]	@ (8000e20 <HAL_TIM_Base_MspInit+0x7c>)
 8000dbc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dc2:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <HAL_TIM_Base_MspInit+0x7c>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2019      	movs	r0, #25
 8000dd4:	f000 faad 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000dd8:	2019      	movs	r0, #25
 8000dda:	f000 fac6 	bl	800136a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000dde:	e018      	b.n	8000e12 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0f      	ldr	r2, [pc, #60]	@ (8000e24 <HAL_TIM_Base_MspInit+0x80>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d113      	bne.n	8000e12 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <HAL_TIM_Base_MspInit+0x7c>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dee:	4a0c      	ldr	r2, [pc, #48]	@ (8000e20 <HAL_TIM_Base_MspInit+0x7c>)
 8000df0:	f043 0320 	orr.w	r3, r3, #32
 8000df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <HAL_TIM_Base_MspInit+0x7c>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfa:	f003 0320 	and.w	r3, r3, #32
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2037      	movs	r0, #55	@ 0x37
 8000e08:	f000 fa93 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e0c:	2037      	movs	r0, #55	@ 0x37
 8000e0e:	f000 faac 	bl	800136a <HAL_NVIC_EnableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40012c00 	.word	0x40012c00
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40001400 	.word	0x40001400

08000e28 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e38:	d10b      	bne.n	8000e52 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <HAL_TIM_PWM_MspInit+0x38>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3e:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <HAL_TIM_PWM_MspInit+0x38>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_TIM_PWM_MspInit+0x38>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e84:	d11c      	bne.n	8000ec0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <HAL_TIM_MspPostInit+0x64>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec8 <HAL_TIM_MspPostInit+0x64>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <HAL_TIM_MspPostInit+0x64>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin;
 8000e9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ea2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <HAL_TIM_MspPostInit+0x68>)
 8000ebc:	f000 fa70 	bl	80013a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	48000400 	.word	0x48000400

08000ed0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ed6:	4a15      	ldr	r2, [pc, #84]	@ (8000f2c <MX_USART2_UART_Init+0x5c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eda:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <MX_USART2_UART_Init+0x58>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <MX_USART2_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f14:	f003 fa0e 	bl	8004334 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f7ff fca9 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000130 	.word	0x20000130
 8000f2c:	40004400 	.word	0x40004400

08000f30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0ac      	sub	sp, #176	@ 0xb0
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2288      	movs	r2, #136	@ 0x88
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 ff0a 	bl	8004d6a <memset>
  if(uartHandle->Instance==USART2)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a21      	ldr	r2, [pc, #132]	@ (8000fe0 <HAL_UART_MspInit+0xb0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d13b      	bne.n	8000fd8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fa55 	bl	800241c <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f78:	f7ff fc7c 	bl	8000874 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f7c:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <HAL_UART_MspInit+0xb4>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f80:	4a18      	ldr	r2, [pc, #96]	@ (8000fe4 <HAL_UART_MspInit+0xb4>)
 8000f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f88:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <HAL_UART_MspInit+0xb4>)
 8000f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <HAL_UART_MspInit+0xb4>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f98:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <HAL_UART_MspInit+0xb4>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa0:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <HAL_UART_MspInit+0xb4>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fac:	230c      	movs	r3, #12
 8000fae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd4:	f000 f9e4 	bl	80013a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fd8:	bf00      	nop
 8000fda:	37b0      	adds	r7, #176	@ 0xb0
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40004400 	.word	0x40004400
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001020 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fec:	f7ff fde2 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	@ (8001028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <LoopForever+0xe>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	@ (8001034 <LoopForever+0x16>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001016:	f003 feb1 	bl	8004d7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800101a:	f7ff fb4b 	bl	80006b4 <main>

0800101e <LoopForever>:

LoopForever:
    b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001020:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800102c:	08004e48 	.word	0x08004e48
  ldr r2, =_sbss
 8001030:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001034:	200001bc 	.word	0x200001bc

08001038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_2_IRQHandler>
	...

0800103c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <HAL_Init+0x3c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <HAL_Init+0x3c>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001050:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001052:	2003      	movs	r0, #3
 8001054:	f000 f962 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001058:	2000      	movs	r0, #0
 800105a:	f000 f80f 	bl	800107c <HAL_InitTick>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	e001      	b.n	800106e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800106a:	f7ff fd3b 	bl	8000ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800106e:	79fb      	ldrb	r3, [r7, #7]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40022000 	.word	0x40022000

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <HAL_InitTick+0x6c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d023      	beq.n	80010d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001090:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <HAL_InitTick+0x70>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <HAL_InitTick+0x6c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f96d 	bl	8001386 <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10f      	bne.n	80010d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d809      	bhi.n	80010cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 f937 	bl	8001332 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c4:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <HAL_InitTick+0x74>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e007      	b.n	80010dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	e004      	b.n	80010dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e001      	b.n	80010dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	200001b8 	.word	0x200001b8

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200001b8 	.word	0x200001b8

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	@ (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	@ (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	@ (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	@ 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	@ 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff3e 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff31 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa2 	bl	80012d8 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ae:	e17f      	b.n	80016b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2101      	movs	r1, #1
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	4013      	ands	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8171 	beq.w	80016aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d005      	beq.n	80013e0 <HAL_GPIO_Init+0x40>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d130      	bne.n	8001442 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2203      	movs	r2, #3
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001416:	2201      	movs	r2, #1
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	f003 0201 	and.w	r2, r3, #1
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b03      	cmp	r3, #3
 800144c:	d118      	bne.n	8001480 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001454:	2201      	movs	r2, #1
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	08db      	lsrs	r3, r3, #3
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b03      	cmp	r3, #3
 800148a:	d017      	beq.n	80014bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	6939      	ldr	r1, [r7, #16]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80ac 	beq.w	80016aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	4b5f      	ldr	r3, [pc, #380]	@ (80016d0 <HAL_GPIO_Init+0x330>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001556:	4a5e      	ldr	r2, [pc, #376]	@ (80016d0 <HAL_GPIO_Init+0x330>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6613      	str	r3, [r2, #96]	@ 0x60
 800155e:	4b5c      	ldr	r3, [pc, #368]	@ (80016d0 <HAL_GPIO_Init+0x330>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800156a:	4a5a      	ldr	r2, [pc, #360]	@ (80016d4 <HAL_GPIO_Init+0x334>)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001594:	d025      	beq.n	80015e2 <HAL_GPIO_Init+0x242>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4f      	ldr	r2, [pc, #316]	@ (80016d8 <HAL_GPIO_Init+0x338>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01f      	beq.n	80015de <HAL_GPIO_Init+0x23e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4e      	ldr	r2, [pc, #312]	@ (80016dc <HAL_GPIO_Init+0x33c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_GPIO_Init+0x23a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4d      	ldr	r2, [pc, #308]	@ (80016e0 <HAL_GPIO_Init+0x340>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x236>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4c      	ldr	r2, [pc, #304]	@ (80016e4 <HAL_GPIO_Init+0x344>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x232>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4b      	ldr	r2, [pc, #300]	@ (80016e8 <HAL_GPIO_Init+0x348>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x22e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4a      	ldr	r2, [pc, #296]	@ (80016ec <HAL_GPIO_Init+0x34c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x22a>
 80015c6:	2306      	movs	r3, #6
 80015c8:	e00c      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015ca:	2307      	movs	r3, #7
 80015cc:	e00a      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015ce:	2305      	movs	r3, #5
 80015d0:	e008      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e004      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x244>
 80015e2:	2300      	movs	r3, #0
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	4093      	lsls	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015f4:	4937      	ldr	r1, [pc, #220]	@ (80016d4 <HAL_GPIO_Init+0x334>)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001602:	4b3b      	ldr	r3, [pc, #236]	@ (80016f0 <HAL_GPIO_Init+0x350>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001626:	4a32      	ldr	r2, [pc, #200]	@ (80016f0 <HAL_GPIO_Init+0x350>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800162c:	4b30      	ldr	r3, [pc, #192]	@ (80016f0 <HAL_GPIO_Init+0x350>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001650:	4a27      	ldr	r2, [pc, #156]	@ (80016f0 <HAL_GPIO_Init+0x350>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001656:	4b26      	ldr	r3, [pc, #152]	@ (80016f0 <HAL_GPIO_Init+0x350>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800167a:	4a1d      	ldr	r2, [pc, #116]	@ (80016f0 <HAL_GPIO_Init+0x350>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001680:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <HAL_GPIO_Init+0x350>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016a4:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <HAL_GPIO_Init+0x350>)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f47f ae78 	bne.w	80013b0 <HAL_GPIO_Init+0x10>
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000
 80016d8:	48000400 	.word	0x48000400
 80016dc:	48000800 	.word	0x48000800
 80016e0:	48000c00 	.word	0x48000c00
 80016e4:	48001000 	.word	0x48001000
 80016e8:	48001400 	.word	0x48001400
 80016ec:	48001800 	.word	0x48001800
 80016f0:	40010400 	.word	0x40010400

080016f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	887b      	ldrh	r3, [r7, #2]
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e001      	b.n	8001716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
 8001730:	4613      	mov	r3, r2
 8001732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001734:	787b      	ldrb	r3, [r7, #1]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001740:	e002      	b.n	8001748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001742:	887a      	ldrh	r2, [r7, #2]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001758:	4b04      	ldr	r3, [pc, #16]	@ (800176c <HAL_PWREx_GetVoltageRange+0x18>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40007000 	.word	0x40007000

08001770 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800177e:	d130      	bne.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001780:	4b23      	ldr	r3, [pc, #140]	@ (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800178c:	d038      	beq.n	8001800 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800178e:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001796:	4a1e      	ldr	r2, [pc, #120]	@ (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001798:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800179c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800179e:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2232      	movs	r2, #50	@ 0x32
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0c9b      	lsrs	r3, r3, #18
 80017b0:	3301      	adds	r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017b4:	e002      	b.n	80017bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017bc:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017c8:	d102      	bne.n	80017d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f2      	bne.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017dc:	d110      	bne.n	8001800 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e00f      	b.n	8001802 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ee:	d007      	beq.n	8001800 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017f0:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017f8:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40007000 	.word	0x40007000
 8001814:	20000000 	.word	0x20000000
 8001818:	431bde83 	.word	0x431bde83

0800181c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e3ca      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182e:	4b97      	ldr	r3, [pc, #604]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001838:	4b94      	ldr	r3, [pc, #592]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 80e4 	beq.w	8001a18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <HAL_RCC_OscConfig+0x4a>
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b0c      	cmp	r3, #12
 800185a:	f040 808b 	bne.w	8001974 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b01      	cmp	r3, #1
 8001862:	f040 8087 	bne.w	8001974 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001866:	4b89      	ldr	r3, [pc, #548]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x62>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e3a2      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1a      	ldr	r2, [r3, #32]
 8001882:	4b82      	ldr	r3, [pc, #520]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d004      	beq.n	8001898 <HAL_RCC_OscConfig+0x7c>
 800188e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001896:	e005      	b.n	80018a4 <HAL_RCC_OscConfig+0x88>
 8001898:	4b7c      	ldr	r3, [pc, #496]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 800189a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d223      	bcs.n	80018f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 fd55 	bl	800235c <RCC_SetFlashLatencyFromMSIRange>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e383      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018bc:	4b73      	ldr	r3, [pc, #460]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a72      	ldr	r2, [pc, #456]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018c2:	f043 0308 	orr.w	r3, r3, #8
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b70      	ldr	r3, [pc, #448]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	496d      	ldr	r1, [pc, #436]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018da:	4b6c      	ldr	r3, [pc, #432]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	4968      	ldr	r1, [pc, #416]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
 80018ee:	e025      	b.n	800193c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f0:	4b66      	ldr	r3, [pc, #408]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a65      	ldr	r2, [pc, #404]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b63      	ldr	r3, [pc, #396]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4960      	ldr	r1, [pc, #384]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800190e:	4b5f      	ldr	r3, [pc, #380]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	495b      	ldr	r1, [pc, #364]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fd15 	bl	800235c <RCC_SetFlashLatencyFromMSIRange>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e343      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800193c:	f000 fc4a 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b52      	ldr	r3, [pc, #328]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	4950      	ldr	r1, [pc, #320]	@ (8001a90 <HAL_RCC_OscConfig+0x274>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
 8001958:	4a4e      	ldr	r2, [pc, #312]	@ (8001a94 <HAL_RCC_OscConfig+0x278>)
 800195a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800195c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a98 <HAL_RCC_OscConfig+0x27c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fb8b 	bl	800107c <HAL_InitTick>
 8001966:	4603      	mov	r3, r0
 8001968:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d052      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	e327      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d032      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800197c:	4b43      	ldr	r3, [pc, #268]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a42      	ldr	r2, [pc, #264]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001988:	f7ff fbc8 	bl	800111c <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001990:	f7ff fbc4 	bl	800111c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e310      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019a2:	4b3a      	ldr	r3, [pc, #232]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ae:	4b37      	ldr	r3, [pc, #220]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a36      	ldr	r2, [pc, #216]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4931      	ldr	r1, [pc, #196]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019cc:	4b2f      	ldr	r3, [pc, #188]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	492c      	ldr	r1, [pc, #176]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e01a      	b.n	8001a18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019e2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a29      	ldr	r2, [pc, #164]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fb95 	bl	800111c <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019f6:	f7ff fb91 	bl	800111c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e2dd      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a08:	4b20      	ldr	r3, [pc, #128]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f0      	bne.n	80019f6 <HAL_RCC_OscConfig+0x1da>
 8001a14:	e000      	b.n	8001a18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d074      	beq.n	8001b0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d005      	beq.n	8001a36 <HAL_RCC_OscConfig+0x21a>
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b0c      	cmp	r3, #12
 8001a2e:	d10e      	bne.n	8001a4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d10b      	bne.n	8001a4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a36:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d064      	beq.n	8001b0c <HAL_RCC_OscConfig+0x2f0>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d160      	bne.n	8001b0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e2ba      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x24a>
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e026      	b.n	8001ab4 <HAL_RCC_OscConfig+0x298>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a6e:	d115      	bne.n	8001a9c <HAL_RCC_OscConfig+0x280>
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b03      	ldr	r3, [pc, #12]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a02      	ldr	r2, [pc, #8]	@ (8001a8c <HAL_RCC_OscConfig+0x270>)
 8001a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e014      	b.n	8001ab4 <HAL_RCC_OscConfig+0x298>
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	08004df0 	.word	0x08004df0
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000004 	.word	0x20000004
 8001a9c:	4ba0      	ldr	r3, [pc, #640]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a9f      	ldr	r2, [pc, #636]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b9d      	ldr	r3, [pc, #628]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a9c      	ldr	r2, [pc, #624]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d013      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff fb2e 	bl	800111c <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fb2a 	bl	800111c <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	@ 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e276      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad6:	4b92      	ldr	r3, [pc, #584]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x2a8>
 8001ae2:	e014      	b.n	8001b0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fb1a 	bl	800111c <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff fb16 	bl	800111c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	@ 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e262      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001afe:	4b88      	ldr	r3, [pc, #544]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x2d0>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d060      	beq.n	8001bdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_OscConfig+0x310>
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2b0c      	cmp	r3, #12
 8001b24:	d119      	bne.n	8001b5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d116      	bne.n	8001b5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b2c:	4b7c      	ldr	r3, [pc, #496]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_OscConfig+0x328>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e23f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	4b76      	ldr	r3, [pc, #472]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	4973      	ldr	r1, [pc, #460]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b58:	e040      	b.n	8001bdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d023      	beq.n	8001baa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b62:	4b6f      	ldr	r3, [pc, #444]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6e      	ldr	r2, [pc, #440]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6e:	f7ff fad5 	bl	800111c <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b76:	f7ff fad1 	bl	800111c <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e21d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b88:	4b65      	ldr	r3, [pc, #404]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b94:	4b62      	ldr	r3, [pc, #392]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	061b      	lsls	r3, r3, #24
 8001ba2:	495f      	ldr	r1, [pc, #380]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
 8001ba8:	e018      	b.n	8001bdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001baa:	4b5d      	ldr	r3, [pc, #372]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a5c      	ldr	r2, [pc, #368]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fab1 	bl	800111c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff faad 	bl	800111c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e1f9      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bd0:	4b53      	ldr	r3, [pc, #332]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d03c      	beq.n	8001c62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bf6:	4a4a      	ldr	r2, [pc, #296]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff fa8c 	bl	800111c <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff fa88 	bl	800111c <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1d4      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c1a:	4b41      	ldr	r3, [pc, #260]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0ef      	beq.n	8001c08 <HAL_RCC_OscConfig+0x3ec>
 8001c28:	e01b      	b.n	8001c62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c30:	4a3b      	ldr	r2, [pc, #236]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3a:	f7ff fa6f 	bl	800111c <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c42:	f7ff fa6b 	bl	800111c <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e1b7      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c54:	4b32      	ldr	r3, [pc, #200]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1ef      	bne.n	8001c42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80a6 	beq.w	8001dbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c74:	4b2a      	ldr	r3, [pc, #168]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10d      	bne.n	8001c9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c80:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c84:	4a26      	ldr	r2, [pc, #152]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c8c:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9c:	4b21      	ldr	r3, [pc, #132]	@ (8001d24 <HAL_RCC_OscConfig+0x508>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d118      	bne.n	8001cda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d24 <HAL_RCC_OscConfig+0x508>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1d      	ldr	r2, [pc, #116]	@ (8001d24 <HAL_RCC_OscConfig+0x508>)
 8001cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fa32 	bl	800111c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbc:	f7ff fa2e 	bl	800111c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e17a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <HAL_RCC_OscConfig+0x508>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d108      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x4d8>
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cf2:	e029      	b.n	8001d48 <HAL_RCC_OscConfig+0x52c>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d115      	bne.n	8001d28 <HAL_RCC_OscConfig+0x50c>
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d02:	4a07      	ldr	r2, [pc, #28]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d0c:	4b04      	ldr	r3, [pc, #16]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d12:	4a03      	ldr	r2, [pc, #12]	@ (8001d20 <HAL_RCC_OscConfig+0x504>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d1c:	e014      	b.n	8001d48 <HAL_RCC_OscConfig+0x52c>
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40007000 	.word	0x40007000
 8001d28:	4b9c      	ldr	r3, [pc, #624]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2e:	4a9b      	ldr	r2, [pc, #620]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d38:	4b98      	ldr	r3, [pc, #608]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3e:	4a97      	ldr	r2, [pc, #604]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001d40:	f023 0304 	bic.w	r3, r3, #4
 8001d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d016      	beq.n	8001d7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7ff f9e4 	bl	800111c <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d58:	f7ff f9e0 	bl	800111c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e12a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d6e:	4b8b      	ldr	r3, [pc, #556]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0ed      	beq.n	8001d58 <HAL_RCC_OscConfig+0x53c>
 8001d7c:	e015      	b.n	8001daa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7e:	f7ff f9cd 	bl	800111c <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d84:	e00a      	b.n	8001d9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d86:	f7ff f9c9 	bl	800111c <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e113      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d9c:	4b7f      	ldr	r3, [pc, #508]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1ed      	bne.n	8001d86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001daa:	7ffb      	ldrb	r3, [r7, #31]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d105      	bne.n	8001dbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db0:	4b7a      	ldr	r3, [pc, #488]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db4:	4a79      	ldr	r2, [pc, #484]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80fe 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	f040 80d0 	bne.w	8001f70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dd0:	4b72      	ldr	r3, [pc, #456]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d130      	bne.n	8001e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	3b01      	subs	r3, #1
 8001df0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d127      	bne.n	8001e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d11f      	bne.n	8001e46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e10:	2a07      	cmp	r2, #7
 8001e12:	bf14      	ite	ne
 8001e14:	2201      	movne	r2, #1
 8001e16:	2200      	moveq	r2, #0
 8001e18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d113      	bne.n	8001e46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e28:	085b      	lsrs	r3, r3, #1
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d109      	bne.n	8001e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	085b      	lsrs	r3, r3, #1
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d06e      	beq.n	8001f24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	d069      	beq.n	8001f20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e4c:	4b53      	ldr	r3, [pc, #332]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d105      	bne.n	8001e64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e58:	4b50      	ldr	r3, [pc, #320]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0ad      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e68:	4b4c      	ldr	r3, [pc, #304]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e74:	f7ff f952 	bl	800111c <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f94e 	bl	800111c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e09a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8e:	4b43      	ldr	r3, [pc, #268]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9a:	4b40      	ldr	r3, [pc, #256]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	4b40      	ldr	r3, [pc, #256]	@ (8001fa0 <HAL_RCC_OscConfig+0x784>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001eaa:	3a01      	subs	r2, #1
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	4311      	orrs	r1, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	4311      	orrs	r1, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ebc:	0852      	lsrs	r2, r2, #1
 8001ebe:	3a01      	subs	r2, #1
 8001ec0:	0552      	lsls	r2, r2, #21
 8001ec2:	4311      	orrs	r1, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ec8:	0852      	lsrs	r2, r2, #1
 8001eca:	3a01      	subs	r2, #1
 8001ecc:	0652      	lsls	r2, r2, #25
 8001ece:	4311      	orrs	r1, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ed4:	0912      	lsrs	r2, r2, #4
 8001ed6:	0452      	lsls	r2, r2, #17
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	4930      	ldr	r1, [pc, #192]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eec:	4b2b      	ldr	r3, [pc, #172]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ef6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ef8:	f7ff f910 	bl	800111c <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff f90c 	bl	800111c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e058      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	4b22      	ldr	r3, [pc, #136]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f1e:	e050      	b.n	8001fc2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e04f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f24:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d148      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f3c:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a16      	ldr	r2, [pc, #88]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f48:	f7ff f8e8 	bl	800111c <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff f8e4 	bl	800111c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e030      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x734>
 8001f6e:	e028      	b.n	8001fc2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d023      	beq.n	8001fbe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a08      	ldr	r2, [pc, #32]	@ (8001f9c <HAL_RCC_OscConfig+0x780>)
 8001f7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff f8cb 	bl	800111c <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f88:	e00c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7ff f8c7 	bl	800111c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d905      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e013      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <HAL_RCC_OscConfig+0x7b0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ec      	bne.n	8001f8a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_RCC_OscConfig+0x7b0>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4905      	ldr	r1, [pc, #20]	@ (8001fcc <HAL_RCC_OscConfig+0x7b0>)
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_RCC_OscConfig+0x7b4>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
 8001fbc:	e001      	b.n	8001fc2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	feeefffc 	.word	0xfeeefffc

08001fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0e7      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b75      	ldr	r3, [pc, #468]	@ (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d910      	bls.n	8002018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b72      	ldr	r3, [pc, #456]	@ (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 0207 	bic.w	r2, r3, #7
 8001ffe:	4970      	ldr	r1, [pc, #448]	@ (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b6e      	ldr	r3, [pc, #440]	@ (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0cf      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d010      	beq.n	8002046 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4b66      	ldr	r3, [pc, #408]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002030:	429a      	cmp	r2, r3
 8002032:	d908      	bls.n	8002046 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b63      	ldr	r3, [pc, #396]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4960      	ldr	r1, [pc, #384]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d04c      	beq.n	80020ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205a:	4b5a      	ldr	r3, [pc, #360]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d121      	bne.n	80020aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0a6      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002072:	4b54      	ldr	r3, [pc, #336]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d115      	bne.n	80020aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e09a      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800208a:	4b4e      	ldr	r3, [pc, #312]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e08e      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209a:	4b4a      	ldr	r3, [pc, #296]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e086      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020aa:	4b46      	ldr	r3, [pc, #280]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4943      	ldr	r1, [pc, #268]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020bc:	f7ff f82e 	bl	800111c <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7ff f82a 	bl	800111c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e06e      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b3a      	ldr	r3, [pc, #232]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 020c 	and.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1eb      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d010      	beq.n	800211a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	4b31      	ldr	r3, [pc, #196]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002104:	429a      	cmp	r2, r3
 8002106:	d208      	bcs.n	800211a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b2e      	ldr	r3, [pc, #184]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	492b      	ldr	r1, [pc, #172]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800211a:	4b29      	ldr	r3, [pc, #164]	@ (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d210      	bcs.n	800214a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002128:	4b25      	ldr	r3, [pc, #148]	@ (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 0207 	bic.w	r2, r3, #7
 8002130:	4923      	ldr	r1, [pc, #140]	@ (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002138:	4b21      	ldr	r3, [pc, #132]	@ (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e036      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002156:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	4918      	ldr	r1, [pc, #96]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002164:	4313      	orrs	r3, r2
 8002166:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d009      	beq.n	8002188 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4910      	ldr	r1, [pc, #64]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002188:	f000 f824 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	490b      	ldr	r1, [pc, #44]	@ (80021c8 <HAL_RCC_ClockConfig+0x1f4>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
 80021a4:	4a09      	ldr	r2, [pc, #36]	@ (80021cc <HAL_RCC_ClockConfig+0x1f8>)
 80021a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021a8:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <HAL_RCC_ClockConfig+0x1fc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe ff65 	bl	800107c <HAL_InitTick>
 80021b2:	4603      	mov	r3, r0
 80021b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80021b6:	7afb      	ldrb	r3, [r7, #11]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08004df0 	.word	0x08004df0
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20000004 	.word	0x20000004

080021d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	@ 0x24
 80021d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e2:	4b3e      	ldr	r3, [pc, #248]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ec:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x34>
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	d121      	bne.n	8002246 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d11e      	bne.n	8002246 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002208:	4b34      	ldr	r3, [pc, #208]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d107      	bne.n	8002224 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002214:	4b31      	ldr	r3, [pc, #196]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e005      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002224:	4b2d      	ldr	r3, [pc, #180]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002230:	4a2b      	ldr	r2, [pc, #172]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10d      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002244:	e00a      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b04      	cmp	r3, #4
 800224a:	d102      	bne.n	8002252 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800224c:	4b25      	ldr	r3, [pc, #148]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800224e:	61bb      	str	r3, [r7, #24]
 8002250:	e004      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b08      	cmp	r3, #8
 8002256:	d101      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002258:	4b23      	ldr	r3, [pc, #140]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800225a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b0c      	cmp	r3, #12
 8002260:	d134      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002262:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0xa6>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d003      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0xac>
 8002278:	e005      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800227a:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800227c:	617b      	str	r3, [r7, #20]
      break;
 800227e:	e005      	b.n	800228c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002280:	4b19      	ldr	r3, [pc, #100]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002282:	617b      	str	r3, [r7, #20]
      break;
 8002284:	e002      	b.n	800228c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	617b      	str	r3, [r7, #20]
      break;
 800228a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800228c:	4b13      	ldr	r3, [pc, #76]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	3301      	adds	r3, #1
 8002298:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800229a:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	fb03 f202 	mul.w	r2, r3, r2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022b2:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	0e5b      	lsrs	r3, r3, #25
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	3301      	adds	r3, #1
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022cc:	69bb      	ldr	r3, [r7, #24]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	@ 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08004e08 	.word	0x08004e08
 80022e4:	00f42400 	.word	0x00f42400
 80022e8:	007a1200 	.word	0x007a1200

080022ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f0:	4b03      	ldr	r3, [pc, #12]	@ (8002300 <HAL_RCC_GetHCLKFreq+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000000 	.word	0x20000000

08002304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002308:	f7ff fff0 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4904      	ldr	r1, [pc, #16]	@ (800232c <HAL_RCC_GetPCLK1Freq+0x28>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	08004e00 	.word	0x08004e00

08002330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002334:	f7ff ffda 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_RCC_GetPCLK2Freq+0x24>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	0adb      	lsrs	r3, r3, #11
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4904      	ldr	r1, [pc, #16]	@ (8002358 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	08004e00 	.word	0x08004e00

0800235c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002368:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002374:	f7ff f9ee 	bl	8001754 <HAL_PWREx_GetVoltageRange>
 8002378:	6178      	str	r0, [r7, #20]
 800237a:	e014      	b.n	80023a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b25      	ldr	r3, [pc, #148]	@ (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002380:	4a24      	ldr	r2, [pc, #144]	@ (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002386:	6593      	str	r3, [r2, #88]	@ 0x58
 8002388:	4b22      	ldr	r3, [pc, #136]	@ (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002394:	f7ff f9de 	bl	8001754 <HAL_PWREx_GetVoltageRange>
 8002398:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	4a1d      	ldr	r2, [pc, #116]	@ (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023ac:	d10b      	bne.n	80023c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b80      	cmp	r3, #128	@ 0x80
 80023b2:	d919      	bls.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80023b8:	d902      	bls.n	80023c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ba:	2302      	movs	r3, #2
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e013      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023c0:	2301      	movs	r3, #1
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	e010      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b80      	cmp	r3, #128	@ 0x80
 80023ca:	d902      	bls.n	80023d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023cc:	2303      	movs	r3, #3
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	e00a      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b80      	cmp	r3, #128	@ 0x80
 80023d6:	d102      	bne.n	80023de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023d8:	2302      	movs	r3, #2
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	e004      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b70      	cmp	r3, #112	@ 0x70
 80023e2:	d101      	bne.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023e4:	2301      	movs	r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 0207 	bic.w	r2, r3, #7
 80023f0:	4909      	ldr	r1, [pc, #36]	@ (8002418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023f8:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	40022000 	.word	0x40022000

0800241c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002424:	2300      	movs	r3, #0
 8002426:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002428:	2300      	movs	r3, #0
 800242a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002434:	2b00      	cmp	r3, #0
 8002436:	d041      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800243c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002440:	d02a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002442:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002446:	d824      	bhi.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002448:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800244c:	d008      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800244e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002452:	d81e      	bhi.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002458:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800245c:	d010      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800245e:	e018      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002460:	4b86      	ldr	r3, [pc, #536]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a85      	ldr	r2, [pc, #532]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800246c:	e015      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3304      	adds	r3, #4
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fabb 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 800247a:	4603      	mov	r3, r0
 800247c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800247e:	e00c      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3320      	adds	r3, #32
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fba6 	bl	8002bd8 <RCCEx_PLLSAI2_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002490:	e003      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	74fb      	strb	r3, [r7, #19]
      break;
 8002496:	e000      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10b      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024a0:	4b76      	ldr	r3, [pc, #472]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024ae:	4973      	ldr	r1, [pc, #460]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024b6:	e001      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d041      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024d0:	d02a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024d6:	d824      	bhi.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024dc:	d008      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024e2:	d81e      	bhi.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024ec:	d010      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024ee:	e018      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024f0:	4b62      	ldr	r3, [pc, #392]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a61      	ldr	r2, [pc, #388]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024fc:	e015      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3304      	adds	r3, #4
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fa73 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 800250a:	4603      	mov	r3, r0
 800250c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800250e:	e00c      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3320      	adds	r3, #32
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fb5e 	bl	8002bd8 <RCCEx_PLLSAI2_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002520:	e003      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	74fb      	strb	r3, [r7, #19]
      break;
 8002526:	e000      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002530:	4b52      	ldr	r3, [pc, #328]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002536:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800253e:	494f      	ldr	r1, [pc, #316]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002546:	e001      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80a0 	beq.w	800269a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800255e:	4b47      	ldr	r3, [pc, #284]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800256e:	2300      	movs	r3, #0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00d      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	4b41      	ldr	r3, [pc, #260]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002578:	4a40      	ldr	r2, [pc, #256]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002580:	4b3e      	ldr	r3, [pc, #248]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258c:	2301      	movs	r3, #1
 800258e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002590:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3a      	ldr	r2, [pc, #232]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800259a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800259c:	f7fe fdbe 	bl	800111c <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025a2:	e009      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a4:	f7fe fdba 	bl	800111c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d902      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	74fb      	strb	r3, [r7, #19]
        break;
 80025b6:	e005      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025b8:	4b31      	ldr	r3, [pc, #196]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ef      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d15c      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025ca:	4b2c      	ldr	r3, [pc, #176]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01f      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d019      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025e8:	4b24      	ldr	r3, [pc, #144]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025f4:	4b21      	ldr	r3, [pc, #132]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fa:	4a20      	ldr	r2, [pc, #128]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002604:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260a:	4a1c      	ldr	r2, [pc, #112]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002614:	4a19      	ldr	r2, [pc, #100]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe fd79 	bl	800111c <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262c:	e00b      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe fd75 	bl	800111c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d902      	bls.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	74fb      	strb	r3, [r7, #19]
            break;
 8002644:	e006      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002646:	4b0d      	ldr	r3, [pc, #52]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ec      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800265a:	4b08      	ldr	r3, [pc, #32]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002660:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800266a:	4904      	ldr	r1, [pc, #16]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002672:	e009      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	74bb      	strb	r3, [r7, #18]
 8002678:	e006      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002688:	7c7b      	ldrb	r3, [r7, #17]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d105      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268e:	4b9e      	ldr	r3, [pc, #632]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002692:	4a9d      	ldr	r2, [pc, #628]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002698:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026a6:	4b98      	ldr	r3, [pc, #608]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ac:	f023 0203 	bic.w	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b4:	4994      	ldr	r1, [pc, #592]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ce:	f023 020c 	bic.w	r2, r3, #12
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d6:	498c      	ldr	r1, [pc, #560]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ea:	4b87      	ldr	r3, [pc, #540]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	4983      	ldr	r1, [pc, #524]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800270c:	4b7e      	ldr	r3, [pc, #504]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002712:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271a:	497b      	ldr	r1, [pc, #492]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800272e:	4b76      	ldr	r3, [pc, #472]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273c:	4972      	ldr	r1, [pc, #456]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002750:	4b6d      	ldr	r3, [pc, #436]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002756:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275e:	496a      	ldr	r1, [pc, #424]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002772:	4b65      	ldr	r3, [pc, #404]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002778:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002780:	4961      	ldr	r1, [pc, #388]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002794:	4b5c      	ldr	r3, [pc, #368]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a2:	4959      	ldr	r1, [pc, #356]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027b6:	4b54      	ldr	r3, [pc, #336]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c4:	4950      	ldr	r1, [pc, #320]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e6:	4948      	ldr	r1, [pc, #288]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027fa:	4b43      	ldr	r3, [pc, #268]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002800:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	493f      	ldr	r1, [pc, #252]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d028      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800281c:	4b3a      	ldr	r3, [pc, #232]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002822:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800282a:	4937      	ldr	r1, [pc, #220]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800283a:	d106      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283c:	4b32      	ldr	r3, [pc, #200]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a31      	ldr	r2, [pc, #196]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002846:	60d3      	str	r3, [r2, #12]
 8002848:	e011      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800284e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002852:	d10c      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	2101      	movs	r1, #1
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f8c8 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d028      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800287a:	4b23      	ldr	r3, [pc, #140]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002880:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002888:	491f      	ldr	r1, [pc, #124]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002898:	d106      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800289a:	4b1b      	ldr	r3, [pc, #108]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	4a1a      	ldr	r2, [pc, #104]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028a4:	60d3      	str	r3, [r2, #12]
 80028a6:	e011      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028b0:	d10c      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2101      	movs	r1, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 f899 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d02b      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028e6:	4908      	ldr	r1, [pc, #32]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028f6:	d109      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f8:	4b03      	ldr	r3, [pc, #12]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a02      	ldr	r2, [pc, #8]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002902:	60d3      	str	r3, [r2, #12]
 8002904:	e014      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002910:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002914:	d10c      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3304      	adds	r3, #4
 800291a:	2101      	movs	r1, #1
 800291c:	4618      	mov	r0, r3
 800291e:	f000 f867 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 8002922:	4603      	mov	r3, r0
 8002924:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002926:	7cfb      	ldrb	r3, [r7, #19]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d02f      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800293c:	4b2b      	ldr	r3, [pc, #172]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002942:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800294a:	4928      	ldr	r1, [pc, #160]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800295a:	d10d      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	2102      	movs	r1, #2
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f844 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d014      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002972:	7cfb      	ldrb	r3, [r7, #19]
 8002974:	74bb      	strb	r3, [r7, #18]
 8002976:	e011      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800297c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002980:	d10c      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3320      	adds	r3, #32
 8002986:	2102      	movs	r1, #2
 8002988:	4618      	mov	r0, r3
 800298a:	f000 f925 	bl	8002bd8 <RCCEx_PLLSAI2_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029a8:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029b6:	490d      	ldr	r1, [pc, #52]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029ca:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029da:	4904      	ldr	r1, [pc, #16]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000

080029f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029fe:	4b75      	ldr	r3, [pc, #468]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d018      	beq.n	8002a3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a0a:	4b72      	ldr	r3, [pc, #456]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0203 	and.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d10d      	bne.n	8002a36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a22:	4b6c      	ldr	r3, [pc, #432]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
       ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d047      	beq.n	8002ac6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	e044      	b.n	8002ac6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d018      	beq.n	8002a76 <RCCEx_PLLSAI1_Config+0x86>
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d825      	bhi.n	8002a94 <RCCEx_PLLSAI1_Config+0xa4>
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d002      	beq.n	8002a52 <RCCEx_PLLSAI1_Config+0x62>
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d009      	beq.n	8002a64 <RCCEx_PLLSAI1_Config+0x74>
 8002a50:	e020      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a52:	4b60      	ldr	r3, [pc, #384]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d11d      	bne.n	8002a9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a62:	e01a      	b.n	8002a9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a64:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d116      	bne.n	8002a9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a74:	e013      	b.n	8002a9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a76:	4b57      	ldr	r3, [pc, #348]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a82:	4b54      	ldr	r3, [pc, #336]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a92:	e006      	b.n	8002aa2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      break;
 8002a98:	e004      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a9a:	bf00      	nop
 8002a9c:	e002      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e000      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aa2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10d      	bne.n	8002ac6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6819      	ldr	r1, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	4944      	ldr	r1, [pc, #272]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d17d      	bne.n	8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002acc:	4b41      	ldr	r3, [pc, #260]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a40      	ldr	r2, [pc, #256]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fb20 	bl	800111c <HAL_GetTick>
 8002adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ade:	e009      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ae0:	f7fe fb1c 	bl	800111c <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d902      	bls.n	8002af4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	73fb      	strb	r3, [r7, #15]
        break;
 8002af2:	e005      	b.n	8002b00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002af4:	4b37      	ldr	r3, [pc, #220]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ef      	bne.n	8002ae0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d160      	bne.n	8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d111      	bne.n	8002b30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b0c:	4b31      	ldr	r3, [pc, #196]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6892      	ldr	r2, [r2, #8]
 8002b1c:	0211      	lsls	r1, r2, #8
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68d2      	ldr	r2, [r2, #12]
 8002b22:	0912      	lsrs	r2, r2, #4
 8002b24:	0452      	lsls	r2, r2, #17
 8002b26:	430a      	orrs	r2, r1
 8002b28:	492a      	ldr	r1, [pc, #168]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	610b      	str	r3, [r1, #16]
 8002b2e:	e027      	b.n	8002b80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d112      	bne.n	8002b5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b36:	4b27      	ldr	r3, [pc, #156]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b3e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6892      	ldr	r2, [r2, #8]
 8002b46:	0211      	lsls	r1, r2, #8
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6912      	ldr	r2, [r2, #16]
 8002b4c:	0852      	lsrs	r2, r2, #1
 8002b4e:	3a01      	subs	r2, #1
 8002b50:	0552      	lsls	r2, r2, #21
 8002b52:	430a      	orrs	r2, r1
 8002b54:	491f      	ldr	r1, [pc, #124]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	610b      	str	r3, [r1, #16]
 8002b5a:	e011      	b.n	8002b80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6892      	ldr	r2, [r2, #8]
 8002b6c:	0211      	lsls	r1, r2, #8
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6952      	ldr	r2, [r2, #20]
 8002b72:	0852      	lsrs	r2, r2, #1
 8002b74:	3a01      	subs	r2, #1
 8002b76:	0652      	lsls	r2, r2, #25
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	4916      	ldr	r1, [pc, #88]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b80:	4b14      	ldr	r3, [pc, #80]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a13      	ldr	r2, [pc, #76]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fac6 	bl	800111c <HAL_GetTick>
 8002b90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b92:	e009      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b94:	f7fe fac2 	bl	800111c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d902      	bls.n	8002ba8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ba6:	e005      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ef      	beq.n	8002b94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bba:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	4904      	ldr	r1, [pc, #16]	@ (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002be6:	4b6a      	ldr	r3, [pc, #424]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d018      	beq.n	8002c24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bf2:	4b67      	ldr	r3, [pc, #412]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0203 	and.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d10d      	bne.n	8002c1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
       ||
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c0a:	4b61      	ldr	r3, [pc, #388]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
       ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d047      	beq.n	8002cae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	e044      	b.n	8002cae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d018      	beq.n	8002c5e <RCCEx_PLLSAI2_Config+0x86>
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d825      	bhi.n	8002c7c <RCCEx_PLLSAI2_Config+0xa4>
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d002      	beq.n	8002c3a <RCCEx_PLLSAI2_Config+0x62>
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d009      	beq.n	8002c4c <RCCEx_PLLSAI2_Config+0x74>
 8002c38:	e020      	b.n	8002c7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c3a:	4b55      	ldr	r3, [pc, #340]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d11d      	bne.n	8002c82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4a:	e01a      	b.n	8002c82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c4c:	4b50      	ldr	r3, [pc, #320]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d116      	bne.n	8002c86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c5c:	e013      	b.n	8002c86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c6a:	4b49      	ldr	r3, [pc, #292]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c7a:	e006      	b.n	8002c8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c80:	e004      	b.n	8002c8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c82:	bf00      	nop
 8002c84:	e002      	b.n	8002c8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c86:	bf00      	nop
 8002c88:	e000      	b.n	8002c8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10d      	bne.n	8002cae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c92:	4b3f      	ldr	r3, [pc, #252]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	430b      	orrs	r3, r1
 8002ca8:	4939      	ldr	r1, [pc, #228]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d167      	bne.n	8002d84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cb4:	4b36      	ldr	r3, [pc, #216]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a35      	ldr	r2, [pc, #212]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc0:	f7fe fa2c 	bl	800111c <HAL_GetTick>
 8002cc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cc6:	e009      	b.n	8002cdc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cc8:	f7fe fa28 	bl	800111c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d902      	bls.n	8002cdc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	73fb      	strb	r3, [r7, #15]
        break;
 8002cda:	e005      	b.n	8002ce8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ef      	bne.n	8002cc8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d14a      	bne.n	8002d84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d111      	bne.n	8002d18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cf4:	4b26      	ldr	r3, [pc, #152]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6892      	ldr	r2, [r2, #8]
 8002d04:	0211      	lsls	r1, r2, #8
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68d2      	ldr	r2, [r2, #12]
 8002d0a:	0912      	lsrs	r2, r2, #4
 8002d0c:	0452      	lsls	r2, r2, #17
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	491f      	ldr	r1, [pc, #124]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	614b      	str	r3, [r1, #20]
 8002d16:	e011      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d18:	4b1d      	ldr	r3, [pc, #116]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6892      	ldr	r2, [r2, #8]
 8002d28:	0211      	lsls	r1, r2, #8
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6912      	ldr	r2, [r2, #16]
 8002d2e:	0852      	lsrs	r2, r2, #1
 8002d30:	3a01      	subs	r2, #1
 8002d32:	0652      	lsls	r2, r2, #25
 8002d34:	430a      	orrs	r2, r1
 8002d36:	4916      	ldr	r1, [pc, #88]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a13      	ldr	r2, [pc, #76]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7fe f9e8 	bl	800111c <HAL_GetTick>
 8002d4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d4e:	e009      	b.n	8002d64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d50:	f7fe f9e4 	bl	800111c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d902      	bls.n	8002d64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	73fb      	strb	r3, [r7, #15]
          break;
 8002d62:	e005      	b.n	8002d70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d64:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ef      	beq.n	8002d50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d76:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	4904      	ldr	r1, [pc, #16]	@ (8002d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000

08002d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e049      	b.n	8002e3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd fff2 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f000 fd60 	bl	8003898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d001      	beq.n	8002e5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e047      	b.n	8002eec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a23      	ldr	r2, [pc, #140]	@ (8002ef8 <HAL_TIM_Base_Start+0xb4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01d      	beq.n	8002eaa <HAL_TIM_Base_Start+0x66>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e76:	d018      	beq.n	8002eaa <HAL_TIM_Base_Start+0x66>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002efc <HAL_TIM_Base_Start+0xb8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_TIM_Base_Start+0x66>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a1e      	ldr	r2, [pc, #120]	@ (8002f00 <HAL_TIM_Base_Start+0xbc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00e      	beq.n	8002eaa <HAL_TIM_Base_Start+0x66>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1c      	ldr	r2, [pc, #112]	@ (8002f04 <HAL_TIM_Base_Start+0xc0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_TIM_Base_Start+0x66>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002f08 <HAL_TIM_Base_Start+0xc4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d004      	beq.n	8002eaa <HAL_TIM_Base_Start+0x66>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a19      	ldr	r2, [pc, #100]	@ (8002f0c <HAL_TIM_Base_Start+0xc8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d115      	bne.n	8002ed6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	4b17      	ldr	r3, [pc, #92]	@ (8002f10 <HAL_TIM_Base_Start+0xcc>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d015      	beq.n	8002ee8 <HAL_TIM_Base_Start+0xa4>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ec2:	d011      	beq.n	8002ee8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed4:	e008      	b.n	8002ee8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e000      	b.n	8002eea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40000400 	.word	0x40000400
 8002f00:	40000800 	.word	0x40000800
 8002f04:	40000c00 	.word	0x40000c00
 8002f08:	40013400 	.word	0x40013400
 8002f0c:	40014000 	.word	0x40014000
 8002f10:	00010007 	.word	0x00010007

08002f14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e049      	b.n	8002fba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fd ff74 	bl	8000e28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f000 fca0 	bl	8003898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	6839      	ldr	r1, [r7, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 f8e0 	bl	800419c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a3e      	ldr	r2, [pc, #248]	@ (80030dc <HAL_TIM_PWM_Stop+0x118>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_TIM_PWM_Stop+0x4a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a3d      	ldr	r2, [pc, #244]	@ (80030e0 <HAL_TIM_PWM_Stop+0x11c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00e      	beq.n	800300e <HAL_TIM_PWM_Stop+0x4a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80030e4 <HAL_TIM_PWM_Stop+0x120>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d009      	beq.n	800300e <HAL_TIM_PWM_Stop+0x4a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a3a      	ldr	r2, [pc, #232]	@ (80030e8 <HAL_TIM_PWM_Stop+0x124>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d004      	beq.n	800300e <HAL_TIM_PWM_Stop+0x4a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a38      	ldr	r2, [pc, #224]	@ (80030ec <HAL_TIM_PWM_Stop+0x128>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_TIM_PWM_Stop+0x4e>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_TIM_PWM_Stop+0x50>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d017      	beq.n	8003048 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a1a      	ldr	r2, [r3, #32]
 800301e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10f      	bne.n	8003048 <HAL_TIM_PWM_Stop+0x84>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6a1a      	ldr	r2, [r3, #32]
 800302e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <HAL_TIM_PWM_Stop+0x84>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003046:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10f      	bne.n	8003078 <HAL_TIM_PWM_Stop+0xb4>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6a1a      	ldr	r2, [r3, #32]
 800305e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <HAL_TIM_PWM_Stop+0xb4>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d104      	bne.n	8003088 <HAL_TIM_PWM_Stop+0xc4>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003086:	e023      	b.n	80030d0 <HAL_TIM_PWM_Stop+0x10c>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b04      	cmp	r3, #4
 800308c:	d104      	bne.n	8003098 <HAL_TIM_PWM_Stop+0xd4>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003096:	e01b      	b.n	80030d0 <HAL_TIM_PWM_Stop+0x10c>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b08      	cmp	r3, #8
 800309c:	d104      	bne.n	80030a8 <HAL_TIM_PWM_Stop+0xe4>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030a6:	e013      	b.n	80030d0 <HAL_TIM_PWM_Stop+0x10c>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d104      	bne.n	80030b8 <HAL_TIM_PWM_Stop+0xf4>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030b6:	e00b      	b.n	80030d0 <HAL_TIM_PWM_Stop+0x10c>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b10      	cmp	r3, #16
 80030bc:	d104      	bne.n	80030c8 <HAL_TIM_PWM_Stop+0x104>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030c6:	e003      	b.n	80030d0 <HAL_TIM_PWM_Stop+0x10c>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40012c00 	.word	0x40012c00
 80030e0:	40013400 	.word	0x40013400
 80030e4:	40014000 	.word	0x40014000
 80030e8:	40014400 	.word	0x40014400
 80030ec:	40014800 	.word	0x40014800

080030f0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <HAL_TIM_PWM_Start_IT+0x28>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e03c      	b.n	8003192 <HAL_TIM_PWM_Start_IT+0xa2>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b04      	cmp	r3, #4
 800311c:	d109      	bne.n	8003132 <HAL_TIM_PWM_Start_IT+0x42>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e02f      	b.n	8003192 <HAL_TIM_PWM_Start_IT+0xa2>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d109      	bne.n	800314c <HAL_TIM_PWM_Start_IT+0x5c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e022      	b.n	8003192 <HAL_TIM_PWM_Start_IT+0xa2>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d109      	bne.n	8003166 <HAL_TIM_PWM_Start_IT+0x76>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	e015      	b.n	8003192 <HAL_TIM_PWM_Start_IT+0xa2>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b10      	cmp	r3, #16
 800316a:	d109      	bne.n	8003180 <HAL_TIM_PWM_Start_IT+0x90>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e008      	b.n	8003192 <HAL_TIM_PWM_Start_IT+0xa2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0e7      	b.n	800336a <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d104      	bne.n	80031aa <HAL_TIM_PWM_Start_IT+0xba>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031a8:	e023      	b.n	80031f2 <HAL_TIM_PWM_Start_IT+0x102>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_PWM_Start_IT+0xca>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031b8:	e01b      	b.n	80031f2 <HAL_TIM_PWM_Start_IT+0x102>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d104      	bne.n	80031ca <HAL_TIM_PWM_Start_IT+0xda>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c8:	e013      	b.n	80031f2 <HAL_TIM_PWM_Start_IT+0x102>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	d104      	bne.n	80031da <HAL_TIM_PWM_Start_IT+0xea>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031d8:	e00b      	b.n	80031f2 <HAL_TIM_PWM_Start_IT+0x102>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d104      	bne.n	80031ea <HAL_TIM_PWM_Start_IT+0xfa>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031e8:	e003      	b.n	80031f2 <HAL_TIM_PWM_Start_IT+0x102>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b0c      	cmp	r3, #12
 80031f6:	d841      	bhi.n	800327c <HAL_TIM_PWM_Start_IT+0x18c>
 80031f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003200 <HAL_TIM_PWM_Start_IT+0x110>)
 80031fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fe:	bf00      	nop
 8003200:	08003235 	.word	0x08003235
 8003204:	0800327d 	.word	0x0800327d
 8003208:	0800327d 	.word	0x0800327d
 800320c:	0800327d 	.word	0x0800327d
 8003210:	08003247 	.word	0x08003247
 8003214:	0800327d 	.word	0x0800327d
 8003218:	0800327d 	.word	0x0800327d
 800321c:	0800327d 	.word	0x0800327d
 8003220:	08003259 	.word	0x08003259
 8003224:	0800327d 	.word	0x0800327d
 8003228:	0800327d 	.word	0x0800327d
 800322c:	0800327d 	.word	0x0800327d
 8003230:	0800326b 	.word	0x0800326b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0202 	orr.w	r2, r2, #2
 8003242:	60da      	str	r2, [r3, #12]
      break;
 8003244:	e01d      	b.n	8003282 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0204 	orr.w	r2, r2, #4
 8003254:	60da      	str	r2, [r3, #12]
      break;
 8003256:	e014      	b.n	8003282 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0208 	orr.w	r2, r2, #8
 8003266:	60da      	str	r2, [r3, #12]
      break;
 8003268:	e00b      	b.n	8003282 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0210 	orr.w	r2, r2, #16
 8003278:	60da      	str	r2, [r3, #12]
      break;
 800327a:	e002      	b.n	8003282 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
      break;
 8003280:	bf00      	nop
  }

  if (status == HAL_OK)
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d16f      	bne.n	8003368 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2201      	movs	r2, #1
 800328e:	6839      	ldr	r1, [r7, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 ff83 	bl	800419c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a36      	ldr	r2, [pc, #216]	@ (8003374 <HAL_TIM_PWM_Start_IT+0x284>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d013      	beq.n	80032c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a34      	ldr	r2, [pc, #208]	@ (8003378 <HAL_TIM_PWM_Start_IT+0x288>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00e      	beq.n	80032c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a33      	ldr	r2, [pc, #204]	@ (800337c <HAL_TIM_PWM_Start_IT+0x28c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a31      	ldr	r2, [pc, #196]	@ (8003380 <HAL_TIM_PWM_Start_IT+0x290>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a30      	ldr	r2, [pc, #192]	@ (8003384 <HAL_TIM_PWM_Start_IT+0x294>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_TIM_PWM_Start_IT+0x1dc>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_TIM_PWM_Start_IT+0x1de>
 80032cc:	2300      	movs	r3, #0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a23      	ldr	r2, [pc, #140]	@ (8003374 <HAL_TIM_PWM_Start_IT+0x284>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d01d      	beq.n	8003328 <HAL_TIM_PWM_Start_IT+0x238>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f4:	d018      	beq.n	8003328 <HAL_TIM_PWM_Start_IT+0x238>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a23      	ldr	r2, [pc, #140]	@ (8003388 <HAL_TIM_PWM_Start_IT+0x298>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d013      	beq.n	8003328 <HAL_TIM_PWM_Start_IT+0x238>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a21      	ldr	r2, [pc, #132]	@ (800338c <HAL_TIM_PWM_Start_IT+0x29c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00e      	beq.n	8003328 <HAL_TIM_PWM_Start_IT+0x238>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a20      	ldr	r2, [pc, #128]	@ (8003390 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d009      	beq.n	8003328 <HAL_TIM_PWM_Start_IT+0x238>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a17      	ldr	r2, [pc, #92]	@ (8003378 <HAL_TIM_PWM_Start_IT+0x288>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <HAL_TIM_PWM_Start_IT+0x238>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a16      	ldr	r2, [pc, #88]	@ (800337c <HAL_TIM_PWM_Start_IT+0x28c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d115      	bne.n	8003354 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b06      	cmp	r3, #6
 8003338:	d015      	beq.n	8003366 <HAL_TIM_PWM_Start_IT+0x276>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003340:	d011      	beq.n	8003366 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003352:	e008      	b.n	8003366 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e000      	b.n	8003368 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003366:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40013400 	.word	0x40013400
 800337c:	40014000 	.word	0x40014000
 8003380:	40014400 	.word	0x40014400
 8003384:	40014800 	.word	0x40014800
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800
 8003390:	40000c00 	.word	0x40000c00
 8003394:	00010007 	.word	0x00010007

08003398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d020      	beq.n	80033fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01b      	beq.n	80033fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0202 	mvn.w	r2, #2
 80033cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fa44 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 80033e8:	e005      	b.n	80033f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fa36 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fd fa1f 	bl	8000834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b00      	cmp	r3, #0
 8003404:	d020      	beq.n	8003448 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01b      	beq.n	8003448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0204 	mvn.w	r2, #4
 8003418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fa1e 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 8003434:	e005      	b.n	8003442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fa10 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fd f9f9 	bl	8000834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d020      	beq.n	8003494 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01b      	beq.n	8003494 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0208 	mvn.w	r2, #8
 8003464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2204      	movs	r2, #4
 800346a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f9f8 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f9ea 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7fd f9d3 	bl	8000834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	d020      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0210 	mvn.w	r2, #16
 80034b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2208      	movs	r2, #8
 80034b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f9d2 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 80034cc:	e005      	b.n	80034da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f9c4 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7fd f9ad 	bl	8000834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00c      	beq.n	8003504 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0201 	mvn.w	r2, #1
 80034fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f9a2 	bl	8003848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00c      	beq.n	8003528 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fef2 	bl	800430c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00c      	beq.n	800354c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003538:	2b00      	cmp	r3, #0
 800353a:	d007      	beq.n	800354c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 feea 	bl	8004320 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00c      	beq.n	8003570 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d007      	beq.n	8003570 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f98a 	bl	8003884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00c      	beq.n	8003594 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0220 	mvn.w	r2, #32
 800358c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 feb2 	bl	80042f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e0ff      	b.n	80037ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b14      	cmp	r3, #20
 80035c6:	f200 80f0 	bhi.w	80037aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80035ca:	a201      	add	r2, pc, #4	@ (adr r2, 80035d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d0:	08003625 	.word	0x08003625
 80035d4:	080037ab 	.word	0x080037ab
 80035d8:	080037ab 	.word	0x080037ab
 80035dc:	080037ab 	.word	0x080037ab
 80035e0:	08003665 	.word	0x08003665
 80035e4:	080037ab 	.word	0x080037ab
 80035e8:	080037ab 	.word	0x080037ab
 80035ec:	080037ab 	.word	0x080037ab
 80035f0:	080036a7 	.word	0x080036a7
 80035f4:	080037ab 	.word	0x080037ab
 80035f8:	080037ab 	.word	0x080037ab
 80035fc:	080037ab 	.word	0x080037ab
 8003600:	080036e7 	.word	0x080036e7
 8003604:	080037ab 	.word	0x080037ab
 8003608:	080037ab 	.word	0x080037ab
 800360c:	080037ab 	.word	0x080037ab
 8003610:	08003729 	.word	0x08003729
 8003614:	080037ab 	.word	0x080037ab
 8003618:	080037ab 	.word	0x080037ab
 800361c:	080037ab 	.word	0x080037ab
 8003620:	08003769 	.word	0x08003769
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f9ce 	bl	80039cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0208 	orr.w	r2, r2, #8
 800363e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0204 	bic.w	r2, r2, #4
 800364e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6999      	ldr	r1, [r3, #24]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	619a      	str	r2, [r3, #24]
      break;
 8003662:	e0a5      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fa3e 	bl	8003aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800367e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800368e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6999      	ldr	r1, [r3, #24]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	021a      	lsls	r2, r3, #8
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	619a      	str	r2, [r3, #24]
      break;
 80036a4:	e084      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 faa7 	bl	8003c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0208 	orr.w	r2, r2, #8
 80036c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0204 	bic.w	r2, r2, #4
 80036d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69d9      	ldr	r1, [r3, #28]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	61da      	str	r2, [r3, #28]
      break;
 80036e4:	e064      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fb0f 	bl	8003d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69d9      	ldr	r1, [r3, #28]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	021a      	lsls	r2, r3, #8
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	61da      	str	r2, [r3, #28]
      break;
 8003726:	e043      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fb58 	bl	8003de4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0208 	orr.w	r2, r2, #8
 8003742:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0204 	bic.w	r2, r2, #4
 8003752:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003766:	e023      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fb9c 	bl	8003eac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003782:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003792:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	021a      	lsls	r2, r3, #8
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037a8:	e002      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
      break;
 80037ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop

080037c4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_TIM_SlaveConfigSynchro+0x18>
 80037d8:	2302      	movs	r3, #2
 80037da:	e031      	b.n	8003840 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80037ec:	6839      	ldr	r1, [r7, #0]
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fbc2 	bl	8003f78 <TIM_SlaveTimer_SetConfig>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e018      	b.n	8003840 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800381c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800382c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a40      	ldr	r2, [pc, #256]	@ (80039ac <TIM_Base_SetConfig+0x114>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d013      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b6:	d00f      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a3d      	ldr	r2, [pc, #244]	@ (80039b0 <TIM_Base_SetConfig+0x118>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00b      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a3c      	ldr	r2, [pc, #240]	@ (80039b4 <TIM_Base_SetConfig+0x11c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d007      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a3b      	ldr	r2, [pc, #236]	@ (80039b8 <TIM_Base_SetConfig+0x120>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d003      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a3a      	ldr	r2, [pc, #232]	@ (80039bc <TIM_Base_SetConfig+0x124>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d108      	bne.n	80038ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2f      	ldr	r2, [pc, #188]	@ (80039ac <TIM_Base_SetConfig+0x114>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01f      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f8:	d01b      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a2c      	ldr	r2, [pc, #176]	@ (80039b0 <TIM_Base_SetConfig+0x118>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d017      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a2b      	ldr	r2, [pc, #172]	@ (80039b4 <TIM_Base_SetConfig+0x11c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2a      	ldr	r2, [pc, #168]	@ (80039b8 <TIM_Base_SetConfig+0x120>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00f      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a29      	ldr	r2, [pc, #164]	@ (80039bc <TIM_Base_SetConfig+0x124>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00b      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a28      	ldr	r2, [pc, #160]	@ (80039c0 <TIM_Base_SetConfig+0x128>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d007      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a27      	ldr	r2, [pc, #156]	@ (80039c4 <TIM_Base_SetConfig+0x12c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d003      	beq.n	8003932 <TIM_Base_SetConfig+0x9a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a26      	ldr	r2, [pc, #152]	@ (80039c8 <TIM_Base_SetConfig+0x130>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d108      	bne.n	8003944 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a10      	ldr	r2, [pc, #64]	@ (80039ac <TIM_Base_SetConfig+0x114>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00f      	beq.n	8003990 <TIM_Base_SetConfig+0xf8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a12      	ldr	r2, [pc, #72]	@ (80039bc <TIM_Base_SetConfig+0x124>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00b      	beq.n	8003990 <TIM_Base_SetConfig+0xf8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a11      	ldr	r2, [pc, #68]	@ (80039c0 <TIM_Base_SetConfig+0x128>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_Base_SetConfig+0xf8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a10      	ldr	r2, [pc, #64]	@ (80039c4 <TIM_Base_SetConfig+0x12c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_Base_SetConfig+0xf8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a0f      	ldr	r2, [pc, #60]	@ (80039c8 <TIM_Base_SetConfig+0x130>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d103      	bne.n	8003998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	615a      	str	r2, [r3, #20]
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40000c00 	.word	0x40000c00
 80039bc:	40013400 	.word	0x40013400
 80039c0:	40014000 	.word	0x40014000
 80039c4:	40014400 	.word	0x40014400
 80039c8:	40014800 	.word	0x40014800

080039cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f023 0201 	bic.w	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0303 	bic.w	r3, r3, #3
 8003a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f023 0302 	bic.w	r3, r3, #2
 8003a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad8 <TIM_OC1_SetConfig+0x10c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00f      	beq.n	8003a4c <TIM_OC1_SetConfig+0x80>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8003adc <TIM_OC1_SetConfig+0x110>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <TIM_OC1_SetConfig+0x80>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae0 <TIM_OC1_SetConfig+0x114>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_OC1_SetConfig+0x80>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a29      	ldr	r2, [pc, #164]	@ (8003ae4 <TIM_OC1_SetConfig+0x118>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_OC1_SetConfig+0x80>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a28      	ldr	r2, [pc, #160]	@ (8003ae8 <TIM_OC1_SetConfig+0x11c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d10c      	bne.n	8003a66 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 0308 	bic.w	r3, r3, #8
 8003a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad8 <TIM_OC1_SetConfig+0x10c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00f      	beq.n	8003a8e <TIM_OC1_SetConfig+0xc2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1a      	ldr	r2, [pc, #104]	@ (8003adc <TIM_OC1_SetConfig+0x110>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00b      	beq.n	8003a8e <TIM_OC1_SetConfig+0xc2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a19      	ldr	r2, [pc, #100]	@ (8003ae0 <TIM_OC1_SetConfig+0x114>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <TIM_OC1_SetConfig+0xc2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a18      	ldr	r2, [pc, #96]	@ (8003ae4 <TIM_OC1_SetConfig+0x118>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d003      	beq.n	8003a8e <TIM_OC1_SetConfig+0xc2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a17      	ldr	r2, [pc, #92]	@ (8003ae8 <TIM_OC1_SetConfig+0x11c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d111      	bne.n	8003ab2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	621a      	str	r2, [r3, #32]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40012c00 	.word	0x40012c00
 8003adc:	40013400 	.word	0x40013400
 8003ae0:	40014000 	.word	0x40014000
 8003ae4:	40014400 	.word	0x40014400
 8003ae8:	40014800 	.word	0x40014800

08003aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f023 0210 	bic.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0320 	bic.w	r3, r3, #32
 8003b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a28      	ldr	r2, [pc, #160]	@ (8003bec <TIM_OC2_SetConfig+0x100>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_OC2_SetConfig+0x6c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a27      	ldr	r2, [pc, #156]	@ (8003bf0 <TIM_OC2_SetConfig+0x104>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d10d      	bne.n	8003b74 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a1d      	ldr	r2, [pc, #116]	@ (8003bec <TIM_OC2_SetConfig+0x100>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00f      	beq.n	8003b9c <TIM_OC2_SetConfig+0xb0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf0 <TIM_OC2_SetConfig+0x104>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <TIM_OC2_SetConfig+0xb0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf4 <TIM_OC2_SetConfig+0x108>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <TIM_OC2_SetConfig+0xb0>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf8 <TIM_OC2_SetConfig+0x10c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_OC2_SetConfig+0xb0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a19      	ldr	r2, [pc, #100]	@ (8003bfc <TIM_OC2_SetConfig+0x110>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d113      	bne.n	8003bc4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40013400 	.word	0x40013400
 8003bf4:	40014000 	.word	0x40014000
 8003bf8:	40014400 	.word	0x40014400
 8003bfc:	40014800 	.word	0x40014800

08003c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0303 	bic.w	r3, r3, #3
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a27      	ldr	r2, [pc, #156]	@ (8003cfc <TIM_OC3_SetConfig+0xfc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <TIM_OC3_SetConfig+0x6a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a26      	ldr	r2, [pc, #152]	@ (8003d00 <TIM_OC3_SetConfig+0x100>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10d      	bne.n	8003c86 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a1c      	ldr	r2, [pc, #112]	@ (8003cfc <TIM_OC3_SetConfig+0xfc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00f      	beq.n	8003cae <TIM_OC3_SetConfig+0xae>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1b      	ldr	r2, [pc, #108]	@ (8003d00 <TIM_OC3_SetConfig+0x100>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00b      	beq.n	8003cae <TIM_OC3_SetConfig+0xae>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a1a      	ldr	r2, [pc, #104]	@ (8003d04 <TIM_OC3_SetConfig+0x104>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d007      	beq.n	8003cae <TIM_OC3_SetConfig+0xae>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	@ (8003d08 <TIM_OC3_SetConfig+0x108>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_OC3_SetConfig+0xae>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a18      	ldr	r2, [pc, #96]	@ (8003d0c <TIM_OC3_SetConfig+0x10c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d113      	bne.n	8003cd6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	621a      	str	r2, [r3, #32]
}
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40013400 	.word	0x40013400
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40014400 	.word	0x40014400
 8003d0c:	40014800 	.word	0x40014800

08003d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	031b      	lsls	r3, r3, #12
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a18      	ldr	r2, [pc, #96]	@ (8003dd0 <TIM_OC4_SetConfig+0xc0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00f      	beq.n	8003d94 <TIM_OC4_SetConfig+0x84>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a17      	ldr	r2, [pc, #92]	@ (8003dd4 <TIM_OC4_SetConfig+0xc4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00b      	beq.n	8003d94 <TIM_OC4_SetConfig+0x84>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a16      	ldr	r2, [pc, #88]	@ (8003dd8 <TIM_OC4_SetConfig+0xc8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d007      	beq.n	8003d94 <TIM_OC4_SetConfig+0x84>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a15      	ldr	r2, [pc, #84]	@ (8003ddc <TIM_OC4_SetConfig+0xcc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <TIM_OC4_SetConfig+0x84>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a14      	ldr	r2, [pc, #80]	@ (8003de0 <TIM_OC4_SetConfig+0xd0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d109      	bne.n	8003da8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	019b      	lsls	r3, r3, #6
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40013400 	.word	0x40013400
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40014400 	.word	0x40014400
 8003de0:	40014800 	.word	0x40014800

08003de4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003e28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a17      	ldr	r2, [pc, #92]	@ (8003e98 <TIM_OC5_SetConfig+0xb4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00f      	beq.n	8003e5e <TIM_OC5_SetConfig+0x7a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a16      	ldr	r2, [pc, #88]	@ (8003e9c <TIM_OC5_SetConfig+0xb8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00b      	beq.n	8003e5e <TIM_OC5_SetConfig+0x7a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a15      	ldr	r2, [pc, #84]	@ (8003ea0 <TIM_OC5_SetConfig+0xbc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <TIM_OC5_SetConfig+0x7a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a14      	ldr	r2, [pc, #80]	@ (8003ea4 <TIM_OC5_SetConfig+0xc0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_OC5_SetConfig+0x7a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a13      	ldr	r2, [pc, #76]	@ (8003ea8 <TIM_OC5_SetConfig+0xc4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d109      	bne.n	8003e72 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	621a      	str	r2, [r3, #32]
}
 8003e8c:	bf00      	nop
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40013400 	.word	0x40013400
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40014400 	.word	0x40014400
 8003ea8:	40014800 	.word	0x40014800

08003eac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	051b      	lsls	r3, r3, #20
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a18      	ldr	r2, [pc, #96]	@ (8003f64 <TIM_OC6_SetConfig+0xb8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00f      	beq.n	8003f28 <TIM_OC6_SetConfig+0x7c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a17      	ldr	r2, [pc, #92]	@ (8003f68 <TIM_OC6_SetConfig+0xbc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00b      	beq.n	8003f28 <TIM_OC6_SetConfig+0x7c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a16      	ldr	r2, [pc, #88]	@ (8003f6c <TIM_OC6_SetConfig+0xc0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <TIM_OC6_SetConfig+0x7c>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a15      	ldr	r2, [pc, #84]	@ (8003f70 <TIM_OC6_SetConfig+0xc4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_OC6_SetConfig+0x7c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a14      	ldr	r2, [pc, #80]	@ (8003f74 <TIM_OC6_SetConfig+0xc8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d109      	bne.n	8003f3c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	029b      	lsls	r3, r3, #10
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40012c00 	.word	0x40012c00
 8003f68:	40013400 	.word	0x40013400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800

08003f78 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f94:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fa6:	f023 0307 	bic.w	r3, r3, #7
 8003faa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b70      	cmp	r3, #112	@ 0x70
 8003fc4:	d01a      	beq.n	8003ffc <TIM_SlaveTimer_SetConfig+0x84>
 8003fc6:	2b70      	cmp	r3, #112	@ 0x70
 8003fc8:	d860      	bhi.n	800408c <TIM_SlaveTimer_SetConfig+0x114>
 8003fca:	2b60      	cmp	r3, #96	@ 0x60
 8003fcc:	d054      	beq.n	8004078 <TIM_SlaveTimer_SetConfig+0x100>
 8003fce:	2b60      	cmp	r3, #96	@ 0x60
 8003fd0:	d85c      	bhi.n	800408c <TIM_SlaveTimer_SetConfig+0x114>
 8003fd2:	2b50      	cmp	r3, #80	@ 0x50
 8003fd4:	d046      	beq.n	8004064 <TIM_SlaveTimer_SetConfig+0xec>
 8003fd6:	2b50      	cmp	r3, #80	@ 0x50
 8003fd8:	d858      	bhi.n	800408c <TIM_SlaveTimer_SetConfig+0x114>
 8003fda:	2b40      	cmp	r3, #64	@ 0x40
 8003fdc:	d019      	beq.n	8004012 <TIM_SlaveTimer_SetConfig+0x9a>
 8003fde:	2b40      	cmp	r3, #64	@ 0x40
 8003fe0:	d854      	bhi.n	800408c <TIM_SlaveTimer_SetConfig+0x114>
 8003fe2:	2b30      	cmp	r3, #48	@ 0x30
 8003fe4:	d055      	beq.n	8004092 <TIM_SlaveTimer_SetConfig+0x11a>
 8003fe6:	2b30      	cmp	r3, #48	@ 0x30
 8003fe8:	d850      	bhi.n	800408c <TIM_SlaveTimer_SetConfig+0x114>
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d051      	beq.n	8004092 <TIM_SlaveTimer_SetConfig+0x11a>
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d84c      	bhi.n	800408c <TIM_SlaveTimer_SetConfig+0x114>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d04d      	beq.n	8004092 <TIM_SlaveTimer_SetConfig+0x11a>
 8003ff6:	2b10      	cmp	r3, #16
 8003ff8:	d04b      	beq.n	8004092 <TIM_SlaveTimer_SetConfig+0x11a>
 8003ffa:	e047      	b.n	800408c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800400c:	f000 f8a6 	bl	800415c <TIM_ETR_SetConfig>
      break;
 8004010:	e040      	b.n	8004094 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b05      	cmp	r3, #5
 8004018:	d101      	bne.n	800401e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e03b      	b.n	8004096 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a1a      	ldr	r2, [r3, #32]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004044:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	4313      	orrs	r3, r2
 8004050:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]
      break;
 8004062:	e017      	b.n	8004094 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004070:	461a      	mov	r2, r3
 8004072:	f000 f814 	bl	800409e <TIM_TI1_ConfigInputStage>
      break;
 8004076:	e00d      	b.n	8004094 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004084:	461a      	mov	r2, r3
 8004086:	f000 f839 	bl	80040fc <TIM_TI2_ConfigInputStage>
      break;
 800408a:	e003      	b.n	8004094 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	75fb      	strb	r3, [r7, #23]
      break;
 8004090:	e000      	b.n	8004094 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004092:	bf00      	nop
  }

  return status;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800409e:	b480      	push	{r7}
 80040a0:	b087      	sub	sp, #28
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f023 0201 	bic.w	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 030a 	bic.w	r3, r3, #10
 80040da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	621a      	str	r2, [r3, #32]
}
 80040f0:	bf00      	nop
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f023 0210 	bic.w	r2, r3, #16
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	031b      	lsls	r3, r3, #12
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004138:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	621a      	str	r2, [r3, #32]
}
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	021a      	lsls	r2, r3, #8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	431a      	orrs	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4313      	orrs	r3, r2
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	609a      	str	r2, [r3, #8]
}
 8004190:	bf00      	nop
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2201      	movs	r2, #1
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a1a      	ldr	r2, [r3, #32]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	43db      	mvns	r3, r3
 80041be:	401a      	ands	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1a      	ldr	r2, [r3, #32]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	fa01 f303 	lsl.w	r3, r1, r3
 80041d4:	431a      	orrs	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	621a      	str	r2, [r3, #32]
}
 80041da:	bf00      	nop
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e068      	b.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2e      	ldr	r2, [pc, #184]	@ (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2d      	ldr	r2, [pc, #180]	@ (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d108      	bne.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800423a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800424c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1e      	ldr	r2, [pc, #120]	@ (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01d      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004272:	d018      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1b      	ldr	r2, [pc, #108]	@ (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d013      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1a      	ldr	r2, [pc, #104]	@ (80042ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00e      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a18      	ldr	r2, [pc, #96]	@ (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d009      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a13      	ldr	r2, [pc, #76]	@ (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d004      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a14      	ldr	r2, [pc, #80]	@ (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d10c      	bne.n	80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40013400 	.word	0x40013400
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800
 80042f0:	40000c00 	.word	0x40000c00
 80042f4:	40014000 	.word	0x40014000

080042f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e040      	b.n	80043c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fc fdea 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2224      	movs	r2, #36	@ 0x24
 8004360:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fae0 	bl	8004940 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f825 	bl	80043d0 <UART_SetConfig>
 8004386:	4603      	mov	r3, r0
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e01b      	b.n	80043c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800439e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fb5f 	bl	8004a84 <UART_CheckIdleState>
 80043c6:	4603      	mov	r3, r0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d4:	b08a      	sub	sp, #40	@ 0x28
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4ba4      	ldr	r3, [pc, #656]	@ (8004690 <UART_SetConfig+0x2c0>)
 8004400:	4013      	ands	r3, r2
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004408:	430b      	orrs	r3, r1
 800440a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a99      	ldr	r2, [pc, #612]	@ (8004694 <UART_SetConfig+0x2c4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d004      	beq.n	800443c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004438:	4313      	orrs	r3, r2
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444c:	430a      	orrs	r2, r1
 800444e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a90      	ldr	r2, [pc, #576]	@ (8004698 <UART_SetConfig+0x2c8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d126      	bne.n	80044a8 <UART_SetConfig+0xd8>
 800445a:	4b90      	ldr	r3, [pc, #576]	@ (800469c <UART_SetConfig+0x2cc>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b03      	cmp	r3, #3
 8004466:	d81b      	bhi.n	80044a0 <UART_SetConfig+0xd0>
 8004468:	a201      	add	r2, pc, #4	@ (adr r2, 8004470 <UART_SetConfig+0xa0>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	08004481 	.word	0x08004481
 8004474:	08004491 	.word	0x08004491
 8004478:	08004489 	.word	0x08004489
 800447c:	08004499 	.word	0x08004499
 8004480:	2301      	movs	r3, #1
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004486:	e116      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004488:	2302      	movs	r3, #2
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800448e:	e112      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004490:	2304      	movs	r3, #4
 8004492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004496:	e10e      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004498:	2308      	movs	r3, #8
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800449e:	e10a      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80044a0:	2310      	movs	r3, #16
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a6:	e106      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a7c      	ldr	r2, [pc, #496]	@ (80046a0 <UART_SetConfig+0x2d0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d138      	bne.n	8004524 <UART_SetConfig+0x154>
 80044b2:	4b7a      	ldr	r3, [pc, #488]	@ (800469c <UART_SetConfig+0x2cc>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b0c      	cmp	r3, #12
 80044be:	d82d      	bhi.n	800451c <UART_SetConfig+0x14c>
 80044c0:	a201      	add	r2, pc, #4	@ (adr r2, 80044c8 <UART_SetConfig+0xf8>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044fd 	.word	0x080044fd
 80044cc:	0800451d 	.word	0x0800451d
 80044d0:	0800451d 	.word	0x0800451d
 80044d4:	0800451d 	.word	0x0800451d
 80044d8:	0800450d 	.word	0x0800450d
 80044dc:	0800451d 	.word	0x0800451d
 80044e0:	0800451d 	.word	0x0800451d
 80044e4:	0800451d 	.word	0x0800451d
 80044e8:	08004505 	.word	0x08004505
 80044ec:	0800451d 	.word	0x0800451d
 80044f0:	0800451d 	.word	0x0800451d
 80044f4:	0800451d 	.word	0x0800451d
 80044f8:	08004515 	.word	0x08004515
 80044fc:	2300      	movs	r3, #0
 80044fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004502:	e0d8      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004504:	2302      	movs	r3, #2
 8004506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800450a:	e0d4      	b.n	80046b6 <UART_SetConfig+0x2e6>
 800450c:	2304      	movs	r3, #4
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004512:	e0d0      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004514:	2308      	movs	r3, #8
 8004516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800451a:	e0cc      	b.n	80046b6 <UART_SetConfig+0x2e6>
 800451c:	2310      	movs	r3, #16
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004522:	e0c8      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a5e      	ldr	r2, [pc, #376]	@ (80046a4 <UART_SetConfig+0x2d4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d125      	bne.n	800457a <UART_SetConfig+0x1aa>
 800452e:	4b5b      	ldr	r3, [pc, #364]	@ (800469c <UART_SetConfig+0x2cc>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004534:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004538:	2b30      	cmp	r3, #48	@ 0x30
 800453a:	d016      	beq.n	800456a <UART_SetConfig+0x19a>
 800453c:	2b30      	cmp	r3, #48	@ 0x30
 800453e:	d818      	bhi.n	8004572 <UART_SetConfig+0x1a2>
 8004540:	2b20      	cmp	r3, #32
 8004542:	d00a      	beq.n	800455a <UART_SetConfig+0x18a>
 8004544:	2b20      	cmp	r3, #32
 8004546:	d814      	bhi.n	8004572 <UART_SetConfig+0x1a2>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <UART_SetConfig+0x182>
 800454c:	2b10      	cmp	r3, #16
 800454e:	d008      	beq.n	8004562 <UART_SetConfig+0x192>
 8004550:	e00f      	b.n	8004572 <UART_SetConfig+0x1a2>
 8004552:	2300      	movs	r3, #0
 8004554:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004558:	e0ad      	b.n	80046b6 <UART_SetConfig+0x2e6>
 800455a:	2302      	movs	r3, #2
 800455c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004560:	e0a9      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004562:	2304      	movs	r3, #4
 8004564:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004568:	e0a5      	b.n	80046b6 <UART_SetConfig+0x2e6>
 800456a:	2308      	movs	r3, #8
 800456c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004570:	e0a1      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004572:	2310      	movs	r3, #16
 8004574:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004578:	e09d      	b.n	80046b6 <UART_SetConfig+0x2e6>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a4a      	ldr	r2, [pc, #296]	@ (80046a8 <UART_SetConfig+0x2d8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d125      	bne.n	80045d0 <UART_SetConfig+0x200>
 8004584:	4b45      	ldr	r3, [pc, #276]	@ (800469c <UART_SetConfig+0x2cc>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800458e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004590:	d016      	beq.n	80045c0 <UART_SetConfig+0x1f0>
 8004592:	2bc0      	cmp	r3, #192	@ 0xc0
 8004594:	d818      	bhi.n	80045c8 <UART_SetConfig+0x1f8>
 8004596:	2b80      	cmp	r3, #128	@ 0x80
 8004598:	d00a      	beq.n	80045b0 <UART_SetConfig+0x1e0>
 800459a:	2b80      	cmp	r3, #128	@ 0x80
 800459c:	d814      	bhi.n	80045c8 <UART_SetConfig+0x1f8>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <UART_SetConfig+0x1d8>
 80045a2:	2b40      	cmp	r3, #64	@ 0x40
 80045a4:	d008      	beq.n	80045b8 <UART_SetConfig+0x1e8>
 80045a6:	e00f      	b.n	80045c8 <UART_SetConfig+0x1f8>
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ae:	e082      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80045b0:	2302      	movs	r3, #2
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b6:	e07e      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80045b8:	2304      	movs	r3, #4
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045be:	e07a      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80045c0:	2308      	movs	r3, #8
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c6:	e076      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80045c8:	2310      	movs	r3, #16
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ce:	e072      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a35      	ldr	r2, [pc, #212]	@ (80046ac <UART_SetConfig+0x2dc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d12a      	bne.n	8004630 <UART_SetConfig+0x260>
 80045da:	4b30      	ldr	r3, [pc, #192]	@ (800469c <UART_SetConfig+0x2cc>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045e8:	d01a      	beq.n	8004620 <UART_SetConfig+0x250>
 80045ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045ee:	d81b      	bhi.n	8004628 <UART_SetConfig+0x258>
 80045f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045f4:	d00c      	beq.n	8004610 <UART_SetConfig+0x240>
 80045f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045fa:	d815      	bhi.n	8004628 <UART_SetConfig+0x258>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <UART_SetConfig+0x238>
 8004600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004604:	d008      	beq.n	8004618 <UART_SetConfig+0x248>
 8004606:	e00f      	b.n	8004628 <UART_SetConfig+0x258>
 8004608:	2300      	movs	r3, #0
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460e:	e052      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004610:	2302      	movs	r3, #2
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004616:	e04e      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004618:	2304      	movs	r3, #4
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461e:	e04a      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004620:	2308      	movs	r3, #8
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004626:	e046      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004628:	2310      	movs	r3, #16
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462e:	e042      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a17      	ldr	r2, [pc, #92]	@ (8004694 <UART_SetConfig+0x2c4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d13a      	bne.n	80046b0 <UART_SetConfig+0x2e0>
 800463a:	4b18      	ldr	r3, [pc, #96]	@ (800469c <UART_SetConfig+0x2cc>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004640:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004644:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004648:	d01a      	beq.n	8004680 <UART_SetConfig+0x2b0>
 800464a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800464e:	d81b      	bhi.n	8004688 <UART_SetConfig+0x2b8>
 8004650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004654:	d00c      	beq.n	8004670 <UART_SetConfig+0x2a0>
 8004656:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800465a:	d815      	bhi.n	8004688 <UART_SetConfig+0x2b8>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <UART_SetConfig+0x298>
 8004660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004664:	d008      	beq.n	8004678 <UART_SetConfig+0x2a8>
 8004666:	e00f      	b.n	8004688 <UART_SetConfig+0x2b8>
 8004668:	2300      	movs	r3, #0
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466e:	e022      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004670:	2302      	movs	r3, #2
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004676:	e01e      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004678:	2304      	movs	r3, #4
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467e:	e01a      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004680:	2308      	movs	r3, #8
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004686:	e016      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004688:	2310      	movs	r3, #16
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468e:	e012      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004690:	efff69f3 	.word	0xefff69f3
 8004694:	40008000 	.word	0x40008000
 8004698:	40013800 	.word	0x40013800
 800469c:	40021000 	.word	0x40021000
 80046a0:	40004400 	.word	0x40004400
 80046a4:	40004800 	.word	0x40004800
 80046a8:	40004c00 	.word	0x40004c00
 80046ac:	40005000 	.word	0x40005000
 80046b0:	2310      	movs	r3, #16
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a9f      	ldr	r2, [pc, #636]	@ (8004938 <UART_SetConfig+0x568>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d17a      	bne.n	80047b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d824      	bhi.n	8004712 <UART_SetConfig+0x342>
 80046c8:	a201      	add	r2, pc, #4	@ (adr r2, 80046d0 <UART_SetConfig+0x300>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	080046f5 	.word	0x080046f5
 80046d4:	08004713 	.word	0x08004713
 80046d8:	080046fd 	.word	0x080046fd
 80046dc:	08004713 	.word	0x08004713
 80046e0:	08004703 	.word	0x08004703
 80046e4:	08004713 	.word	0x08004713
 80046e8:	08004713 	.word	0x08004713
 80046ec:	08004713 	.word	0x08004713
 80046f0:	0800470b 	.word	0x0800470b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f4:	f7fd fe06 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 80046f8:	61f8      	str	r0, [r7, #28]
        break;
 80046fa:	e010      	b.n	800471e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046fc:	4b8f      	ldr	r3, [pc, #572]	@ (800493c <UART_SetConfig+0x56c>)
 80046fe:	61fb      	str	r3, [r7, #28]
        break;
 8004700:	e00d      	b.n	800471e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004702:	f7fd fd67 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8004706:	61f8      	str	r0, [r7, #28]
        break;
 8004708:	e009      	b.n	800471e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800470e:	61fb      	str	r3, [r7, #28]
        break;
 8004710:	e005      	b.n	800471e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800471c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80fb 	beq.w	800491c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	429a      	cmp	r2, r3
 8004734:	d305      	bcc.n	8004742 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	429a      	cmp	r2, r3
 8004740:	d903      	bls.n	800474a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004748:	e0e8      	b.n	800491c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2200      	movs	r2, #0
 800474e:	461c      	mov	r4, r3
 8004750:	4615      	mov	r5, r2
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	022b      	lsls	r3, r5, #8
 800475c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004760:	0222      	lsls	r2, r4, #8
 8004762:	68f9      	ldr	r1, [r7, #12]
 8004764:	6849      	ldr	r1, [r1, #4]
 8004766:	0849      	lsrs	r1, r1, #1
 8004768:	2000      	movs	r0, #0
 800476a:	4688      	mov	r8, r1
 800476c:	4681      	mov	r9, r0
 800476e:	eb12 0a08 	adds.w	sl, r2, r8
 8004772:	eb43 0b09 	adc.w	fp, r3, r9
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004784:	4650      	mov	r0, sl
 8004786:	4659      	mov	r1, fp
 8004788:	f7fb fd1e 	bl	80001c8 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4613      	mov	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800479a:	d308      	bcc.n	80047ae <UART_SetConfig+0x3de>
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047a2:	d204      	bcs.n	80047ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	60da      	str	r2, [r3, #12]
 80047ac:	e0b6      	b.n	800491c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047b4:	e0b2      	b.n	800491c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047be:	d15e      	bne.n	800487e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80047c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d828      	bhi.n	800481a <UART_SetConfig+0x44a>
 80047c8:	a201      	add	r2, pc, #4	@ (adr r2, 80047d0 <UART_SetConfig+0x400>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	08004805 	.word	0x08004805
 80047dc:	0800481b 	.word	0x0800481b
 80047e0:	0800480b 	.word	0x0800480b
 80047e4:	0800481b 	.word	0x0800481b
 80047e8:	0800481b 	.word	0x0800481b
 80047ec:	0800481b 	.word	0x0800481b
 80047f0:	08004813 	.word	0x08004813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fd fd86 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 80047f8:	61f8      	str	r0, [r7, #28]
        break;
 80047fa:	e014      	b.n	8004826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047fc:	f7fd fd98 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8004800:	61f8      	str	r0, [r7, #28]
        break;
 8004802:	e010      	b.n	8004826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004804:	4b4d      	ldr	r3, [pc, #308]	@ (800493c <UART_SetConfig+0x56c>)
 8004806:	61fb      	str	r3, [r7, #28]
        break;
 8004808:	e00d      	b.n	8004826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7fd fce3 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 800480e:	61f8      	str	r0, [r7, #28]
        break;
 8004810:	e009      	b.n	8004826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004816:	61fb      	str	r3, [r7, #28]
        break;
 8004818:	e005      	b.n	8004826 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004824:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d077      	beq.n	800491c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	005a      	lsls	r2, r3, #1
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	441a      	add	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b0f      	cmp	r3, #15
 8004846:	d916      	bls.n	8004876 <UART_SetConfig+0x4a6>
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800484e:	d212      	bcs.n	8004876 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f023 030f 	bic.w	r3, r3, #15
 8004858:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	b29b      	uxth	r3, r3
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	b29a      	uxth	r2, r3
 8004866:	8afb      	ldrh	r3, [r7, #22]
 8004868:	4313      	orrs	r3, r2
 800486a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	8afa      	ldrh	r2, [r7, #22]
 8004872:	60da      	str	r2, [r3, #12]
 8004874:	e052      	b.n	800491c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800487c:	e04e      	b.n	800491c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800487e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004882:	2b08      	cmp	r3, #8
 8004884:	d827      	bhi.n	80048d6 <UART_SetConfig+0x506>
 8004886:	a201      	add	r2, pc, #4	@ (adr r2, 800488c <UART_SetConfig+0x4bc>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048c1 	.word	0x080048c1
 8004898:	080048d7 	.word	0x080048d7
 800489c:	080048c7 	.word	0x080048c7
 80048a0:	080048d7 	.word	0x080048d7
 80048a4:	080048d7 	.word	0x080048d7
 80048a8:	080048d7 	.word	0x080048d7
 80048ac:	080048cf 	.word	0x080048cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7fd fd28 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 80048b4:	61f8      	str	r0, [r7, #28]
        break;
 80048b6:	e014      	b.n	80048e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b8:	f7fd fd3a 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 80048bc:	61f8      	str	r0, [r7, #28]
        break;
 80048be:	e010      	b.n	80048e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c0:	4b1e      	ldr	r3, [pc, #120]	@ (800493c <UART_SetConfig+0x56c>)
 80048c2:	61fb      	str	r3, [r7, #28]
        break;
 80048c4:	e00d      	b.n	80048e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c6:	f7fd fc85 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 80048ca:	61f8      	str	r0, [r7, #28]
        break;
 80048cc:	e009      	b.n	80048e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048d2:	61fb      	str	r3, [r7, #28]
        break;
 80048d4:	e005      	b.n	80048e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048e0:	bf00      	nop
    }

    if (pclk != 0U)
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d019      	beq.n	800491c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	085a      	lsrs	r2, r3, #1
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	441a      	add	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	d909      	bls.n	8004916 <UART_SetConfig+0x546>
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004908:	d205      	bcs.n	8004916 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60da      	str	r2, [r3, #12]
 8004914:	e002      	b.n	800491c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004928:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800492c:	4618      	mov	r0, r3
 800492e:	3728      	adds	r7, #40	@ 0x28
 8004930:	46bd      	mov	sp, r7
 8004932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004936:	bf00      	nop
 8004938:	40008000 	.word	0x40008000
 800493c:	00f42400 	.word	0x00f42400

08004940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01a      	beq.n	8004a56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a3e:	d10a      	bne.n	8004a56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]
  }
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b098      	sub	sp, #96	@ 0x60
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a94:	f7fc fb42 	bl	800111c <HAL_GetTick>
 8004a98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d12e      	bne.n	8004b06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f88c 	bl	8004bd4 <UART_WaitOnFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d021      	beq.n	8004b06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ad6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ae2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ae6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e6      	bne.n	8004ac2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e062      	b.n	8004bcc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d149      	bne.n	8004ba8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f856 	bl	8004bd4 <UART_WaitOnFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d03c      	beq.n	8004ba8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e6      	bne.n	8004b2e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3308      	adds	r3, #8
 8004b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b80:	61fa      	str	r2, [r7, #28]
 8004b82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	69b9      	ldr	r1, [r7, #24]
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e5      	bne.n	8004b60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e011      	b.n	8004bcc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3758      	adds	r7, #88	@ 0x58
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	4613      	mov	r3, r2
 8004be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be4:	e049      	b.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d045      	beq.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bee:	f7fc fa95 	bl	800111c <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e048      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d031      	beq.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d110      	bne.n	8004c46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f838 	bl	8004ca2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2208      	movs	r2, #8
 8004c36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e029      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c54:	d111      	bne.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f81e 	bl	8004ca2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e00f      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4013      	ands	r3, r2
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	bf0c      	ite	eq
 8004c8a:	2301      	moveq	r3, #1
 8004c8c:	2300      	movne	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d0a6      	beq.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b095      	sub	sp, #84	@ 0x54
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e6      	bne.n	8004caa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e5      	bne.n	8004cdc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d118      	bne.n	8004d4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f023 0310 	bic.w	r3, r3, #16
 8004d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d36:	61bb      	str	r3, [r7, #24]
 8004d38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6979      	ldr	r1, [r7, #20]
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	613b      	str	r3, [r7, #16]
   return(result);
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e6      	bne.n	8004d18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d5e:	bf00      	nop
 8004d60:	3754      	adds	r7, #84	@ 0x54
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <memset>:
 8004d6a:	4402      	add	r2, r0
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d100      	bne.n	8004d74 <memset+0xa>
 8004d72:	4770      	bx	lr
 8004d74:	f803 1b01 	strb.w	r1, [r3], #1
 8004d78:	e7f9      	b.n	8004d6e <memset+0x4>
	...

08004d7c <__libc_init_array>:
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8004db4 <__libc_init_array+0x38>)
 8004d80:	4c0d      	ldr	r4, [pc, #52]	@ (8004db8 <__libc_init_array+0x3c>)
 8004d82:	1b64      	subs	r4, r4, r5
 8004d84:	10a4      	asrs	r4, r4, #2
 8004d86:	2600      	movs	r6, #0
 8004d88:	42a6      	cmp	r6, r4
 8004d8a:	d109      	bne.n	8004da0 <__libc_init_array+0x24>
 8004d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8004dbc <__libc_init_array+0x40>)
 8004d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8004dc0 <__libc_init_array+0x44>)
 8004d90:	f000 f818 	bl	8004dc4 <_init>
 8004d94:	1b64      	subs	r4, r4, r5
 8004d96:	10a4      	asrs	r4, r4, #2
 8004d98:	2600      	movs	r6, #0
 8004d9a:	42a6      	cmp	r6, r4
 8004d9c:	d105      	bne.n	8004daa <__libc_init_array+0x2e>
 8004d9e:	bd70      	pop	{r4, r5, r6, pc}
 8004da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da4:	4798      	blx	r3
 8004da6:	3601      	adds	r6, #1
 8004da8:	e7ee      	b.n	8004d88 <__libc_init_array+0xc>
 8004daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dae:	4798      	blx	r3
 8004db0:	3601      	adds	r6, #1
 8004db2:	e7f2      	b.n	8004d9a <__libc_init_array+0x1e>
 8004db4:	08004e40 	.word	0x08004e40
 8004db8:	08004e40 	.word	0x08004e40
 8004dbc:	08004e40 	.word	0x08004e40
 8004dc0:	08004e44 	.word	0x08004e44

08004dc4 <_init>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr

08004dd0 <_fini>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	bf00      	nop
 8004dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd6:	bc08      	pop	{r3}
 8004dd8:	469e      	mov	lr, r3
 8004dda:	4770      	bx	lr
