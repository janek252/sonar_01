
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004f4c  08004f4c  00005f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc0  08004fc0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fc0  08004fc0  00005fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fc8  08004fc8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc8  08004fc8  00005fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fcc  08004fcc  00005fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004fd0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  08004fdc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08004fdc  000061bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011069  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002603  00000000  00000000  000170a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  000196a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbc  00000000  00000000  0001a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026763  00000000  00000000  0001b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c50  00000000  00000000  000418df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eebea  00000000  00000000  0005452f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143119  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e44  00000000  00000000  0014315c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00146fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f34 	.word	0x08004f34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004f34 	.word	0x08004f34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <delay_us>:
#include "tim.h"
#include "stm32l4xx_hal.h"
#include "gpio.h"

void delay_us(uint16_t time) //funkcja opóźnienia czasowego
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7,0); // załącznie timera
 80004c2:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <delay_us+0x30>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7)<time); // wyłaczenie timera po upływie zadanego czasu
 80004ca:	bf00      	nop
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <delay_us+0x30>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d3f9      	bcc.n	80004cc <delay_us+0x14>
}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	200000e4 	.word	0x200000e4

080004ec <Sensor_trigger>:
uint32_t distance = 0;
uint32_t start;
uint32_t stop;

void Sensor_trigger() //funkcja wysyłania pulsu trigger
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, 1); // załączenie pulsu trigger
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fa:	f001 f941 	bl	8001780 <HAL_GPIO_WritePin>
	delay_us(10); // oczekiwanie 10us
 80004fe:	200a      	movs	r0, #10
 8000500:	f7ff ffda 	bl	80004b8 <delay_us>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, 0); // wyłączenie pulsu trigger
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800050a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050e:	f001 f937 	bl	8001780 <HAL_GPIO_WritePin>
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <Sensor_get_distance>:

int Sensor_get_distance() // funckja pomiaru odległości
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	Sensor_trigger();
 800051c:	f7ff ffe6 	bl	80004ec <Sensor_trigger>

	while( !(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin ))); // czekanie na stan wysoki
 8000520:	bf00      	nop
 8000522:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f001 f911 	bl	8001750 <HAL_GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d0f6      	beq.n	8000522 <Sensor_get_distance+0xa>
	time1 = __HAL_TIM_GET_COUNTER(&htim7); // czas dla początku impulsu echo
 8000534:	4b13      	ldr	r3, [pc, #76]	@ (8000584 <Sensor_get_distance+0x6c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800053a:	4a13      	ldr	r2, [pc, #76]	@ (8000588 <Sensor_get_distance+0x70>)
 800053c:	6013      	str	r3, [r2, #0]

	while( HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin )); // czekanie na stan niski
 800053e:	bf00      	nop
 8000540:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000548:	f001 f902 	bl	8001750 <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1f6      	bne.n	8000540 <Sensor_get_distance+0x28>
	time2 = __HAL_TIM_GET_COUNTER(&htim7);  // czas dla końca pusu echo
 8000552:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <Sensor_get_distance+0x6c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000558:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <Sensor_get_distance+0x74>)
 800055a:	6013      	str	r3, [r2, #0]

	diff = time2 - time1; // pomiar długości pulsu echo
 800055c:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <Sensor_get_distance+0x74>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <Sensor_get_distance+0x70>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	4a0a      	ldr	r2, [pc, #40]	@ (8000590 <Sensor_get_distance+0x78>)
 8000568:	6013      	str	r3, [r2, #0]
	distance = diff/58; // pomiar odległości według wzoru producenta
 800056a:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <Sensor_get_distance+0x78>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a09      	ldr	r2, [pc, #36]	@ (8000594 <Sensor_get_distance+0x7c>)
 8000570:	fba2 2303 	umull	r2, r3, r2, r3
 8000574:	095b      	lsrs	r3, r3, #5
 8000576:	4a08      	ldr	r2, [pc, #32]	@ (8000598 <Sensor_get_distance+0x80>)
 8000578:	6013      	str	r3, [r2, #0]

	return distance;
 800057a:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <Sensor_get_distance+0x80>)
 800057c:	681b      	ldr	r3, [r3, #0]
}
 800057e:	4618      	mov	r0, r3
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000e4 	.word	0x200000e4
 8000588:	20000028 	.word	0x20000028
 800058c:	2000002c 	.word	0x2000002c
 8000590:	20000030 	.word	0x20000030
 8000594:	8d3dcb09 	.word	0x8d3dcb09
 8000598:	20000034 	.word	0x20000034

0800059c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	@ 0x28
 80005a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	4b3d      	ldr	r3, [pc, #244]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a3c      	ldr	r2, [pc, #240]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005be:	4b3a      	ldr	r3, [pc, #232]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	4b37      	ldr	r3, [pc, #220]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	4a36      	ldr	r2, [pc, #216]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d6:	4b34      	ldr	r3, [pc, #208]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b31      	ldr	r3, [pc, #196]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	4a30      	ldr	r2, [pc, #192]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ee:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b2b      	ldr	r3, [pc, #172]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	4a2a      	ldr	r2, [pc, #168]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000606:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <MX_GPIO_Init+0x10c>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Trigger_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061c:	f001 f8b0 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2120      	movs	r1, #32
 8000624:	4821      	ldr	r0, [pc, #132]	@ (80006ac <MX_GPIO_Init+0x110>)
 8000626:	f001 f8ab 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800062a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000630:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	481b      	ldr	r0, [pc, #108]	@ (80006b0 <MX_GPIO_Init+0x114>)
 8000642:	f000 fedb 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Trigger_Pin;
 8000646:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f000 fecb 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8000666:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067e:	f000 febd 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000682:	2320      	movs	r3, #32
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <MX_GPIO_Init+0x110>)
 800069a:	f000 feaf 	bl	80013fc <HAL_GPIO_Init>

}
 800069e:	bf00      	nop
 80006a0:	3728      	adds	r7, #40	@ 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	48000400 	.word	0x48000400
 80006b0:	48000800 	.word	0x48000800

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b5b0      	push	{r4, r5, r7, lr}
 80006b6:	b092      	sub	sp, #72	@ 0x48
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fced 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f873 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f7ff ff6b 	bl	800059c <MX_GPIO_Init>
  HAL_Init();
 80006c6:	f000 fce7 	bl	8001098 <HAL_Init>
  SystemClock_Config();
 80006ca:	f000 f86d 	bl	80007a8 <SystemClock_Config>
  MX_USART2_UART_Init();
 80006ce:	f000 fc0b 	bl	8000ee8 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80006d2:	f000 fb3d 	bl	8000d50 <MX_TIM7_Init>
  MX_TIM1_Init();
 80006d6:	f000 fa8b 	bl	8000bf0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006da:	f000 fadf 	bl	8000c9c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7);
 80006de:	482d      	ldr	r0, [pc, #180]	@ (8000794 <main+0xe0>)
 80006e0:	f002 fbde 	bl	8002ea0 <HAL_TIM_Base_Start>
#if STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_SLAVE_TIM
  stepper_init(&stepper, &htim2, TIM_CHANNEL_3, &htim1);

#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
  stepper_init(&stepper, &htim2, TIM_CHANNEL_3);
 80006e4:	2208      	movs	r2, #8
 80006e6:	492c      	ldr	r1, [pc, #176]	@ (8000798 <main+0xe4>)
 80006e8:	482c      	ldr	r0, [pc, #176]	@ (800079c <main+0xe8>)
 80006ea:	f000 f8d5 	bl	8000898 <stepper_init>

//  int32_t speed_table[SET_TABLE_SIZE] = {30, 20, -20, 10, 50};
  // int32_t angle_table[SET_TABLE_SIZE] = {-10, -5, 0, 5, 10};
  int32_t angle_table[SET_TABLE_SIZE] = {-25 ,-20, -15 , -10, -5, 0, 5, 10, 15, 20, 25}; // Zakres 180 stopni
 80006ee:	4b2c      	ldr	r3, [pc, #176]	@ (80007a0 <main+0xec>)
 80006f0:	1d3c      	adds	r4, r7, #4
 80006f2:	461d      	mov	r5, r3
 80006f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000700:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  int i = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t time_tick = HAL_GetTick();
 8000708:	f000 fd36 	bl	8001178 <HAL_GetTick>
 800070c:	6438      	str	r0, [r7, #64]	@ 0x40
  uint32_t max_time = 2000;
 800070e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  //uint32_t angle = 0; //speed = 0;
  direction dir = CW;
 8000714:	2301      	movs	r3, #1
 8000716:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if ((HAL_GetTick() - time_tick) > max_time)
 800071a:	f000 fd2d 	bl	8001178 <HAL_GetTick>
 800071e:	4602      	mov	r2, r0
 8000720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000726:	429a      	cmp	r2, r3
 8000728:	d2f7      	bcs.n	800071a <main+0x66>
    {
        time_tick = HAL_GetTick();
 800072a:	f000 fd25 	bl	8001178 <HAL_GetTick>
 800072e:	6438      	str	r0, [r7, #64]	@ 0x40

        int32_t angle = angle_table[i];
 8000730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	3348      	adds	r3, #72	@ 0x48
 8000736:	443b      	add	r3, r7
 8000738:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800073c:	637b      	str	r3, [r7, #52]	@ 0x34
        dir = (angle >= 0) ? CW : CCW;
 800073e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000740:	43db      	mvns	r3, r3
 8000742:	0fdb      	lsrs	r3, r3, #31
 8000744:	b2db      	uxtb	r3, r3
 8000746:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

        stepper_set_angle(&stepper, dir, 1 , abs(angle)); // Ustawienie kąta bezwzględnego
 800074a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800074c:	2b00      	cmp	r3, #0
 800074e:	bfb8      	it	lt
 8000750:	425b      	neglt	r3, r3
 8000752:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 8000756:	2201      	movs	r2, #1
 8000758:	4810      	ldr	r0, [pc, #64]	@ (800079c <main+0xe8>)
 800075a:	f000 f8af 	bl	80008bc <stepper_set_angle>

        auto distance = Sensor_get_distance();
 800075e:	f7ff fedb 	bl	8000518 <Sensor_get_distance>
 8000762:	6338      	str	r0, [r7, #48]	@ 0x30

        send_data(distance,angle);
 8000764:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000766:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000768:	f000 fc4a 	bl	8001000 <send_data>

        HAL_Delay(100);// Poczekaj przed wykonaniem następnego kroku
 800076c:	2064      	movs	r0, #100	@ 0x64
 800076e:	f000 fd0f 	bl	8001190 <HAL_Delay>
        i = (i + 1) % SET_TABLE_SIZE; // Zapętlenie indeksu w tabeli kątów
 8000772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <main+0xf0>)
 8000778:	fb83 1302 	smull	r1, r3, r3, r2
 800077c:	1059      	asrs	r1, r3, #1
 800077e:	17d3      	asrs	r3, r2, #31
 8000780:	1ac9      	subs	r1, r1, r3
 8000782:	460b      	mov	r3, r1
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	440b      	add	r3, r1
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	440b      	add	r3, r1
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	647b      	str	r3, [r7, #68]	@ 0x44
    if ((HAL_GetTick() - time_tick) > max_time)
 8000790:	e7c3      	b.n	800071a <main+0x66>
 8000792:	bf00      	nop
 8000794:	200000e4 	.word	0x200000e4
 8000798:	20000098 	.word	0x20000098
 800079c:	20000038 	.word	0x20000038
 80007a0:	08004f4c 	.word	0x08004f4c
 80007a4:	2e8ba2e9 	.word	0x2e8ba2e9

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b096      	sub	sp, #88	@ 0x58
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2244      	movs	r2, #68	@ 0x44
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 fb8f 	bl	8004eda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007ce:	f000 fffd 	bl	80017cc <HAL_PWREx_ControlVoltageScaling>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007d8:	f000 f858 	bl	800088c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e6:	2310      	movs	r3, #16
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ee:	2302      	movs	r3, #2
 80007f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007f6:	230a      	movs	r3, #10
 80007f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007fa:	2307      	movs	r3, #7
 80007fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000802:	2302      	movs	r3, #2
 8000804:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4618      	mov	r0, r3
 800080c:	f001 f834 	bl	8001878 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000816:	f000 f839 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2303      	movs	r3, #3
 8000820:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	2104      	movs	r1, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fbfc 	bl	8002030 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800083e:	f000 f825 	bl	800088c <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3758      	adds	r7, #88	@ 0x58
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <HAL_TIM_PWM_PulseFinishedCallback>:
	}
}
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)

{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stepper.timer.htim->Instance)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d10d      	bne.n	800087e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
	{
		stepper.step_counter++;
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000864:	68db      	ldr	r3, [r3, #12]
 8000866:	3301      	adds	r3, #1
 8000868:	4a07      	ldr	r2, [pc, #28]	@ (8000888 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800086a:	60d3      	str	r3, [r2, #12]

		if(stepper.step_counter >= stepper.steps_to_count)
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800086e:	68da      	ldr	r2, [r3, #12]
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	429a      	cmp	r2, r3
 8000876:	d302      	bcc.n	800087e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		{
			stepper_stop(&stepper);
 8000878:	4803      	ldr	r0, [pc, #12]	@ (8000888 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800087a:	f000 f857 	bl	800092c <stepper_stop>
		}
	}
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000038 	.word	0x20000038

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <Error_Handler+0x8>

08000898 <stepper_init>:
	_stepper->timer.channel = _channel;
	_stepper->slave_timer.htim = _slave_timer;
}
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
void stepper_init(struct stepper_s *_stepper, TIM_HandleTypeDef *_htim, uint32_t _channel)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
	_stepper->timer.htim = _htim;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	601a      	str	r2, [r3, #0]
	_stepper->timer.channel = _channel;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	605a      	str	r2, [r3, #4]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <stepper_set_angle>:

	HAL_TIM_PWM_Start(_stepper->timer.htim, _stepper->timer.channel);
}

void stepper_set_angle(struct stepper_s *_stepper, direction _dir, uint32_t _speed, uint32_t _angle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	607a      	str	r2, [r7, #4]
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	460b      	mov	r3, r1
 80008ca:	72fb      	strb	r3, [r7, #11]
	_stepper->mode = angle;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2201      	movs	r2, #1
 80008d0:	721a      	strb	r2, [r3, #8]

	stepper_set_direction(_stepper, _dir);
 80008d2:	7afb      	ldrb	r3, [r7, #11]
 80008d4:	4619      	mov	r1, r3
 80008d6:	68f8      	ldr	r0, [r7, #12]
 80008d8:	f000 f872 	bl	80009c0 <stepper_set_direction>
	stepper_set_speed(_stepper, _speed);
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f000 f88c 	bl	80009fc <stepper_set_speed>

	_stepper->step_counter = 0;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
	_stepper->steps_to_count = _angle * (STEP_PER_REVOLUTION * MICRO_STEP) / 360;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 80008f0:	fb02 f303 	mul.w	r3, r2, r3
 80008f4:	08db      	lsrs	r3, r3, #3
 80008f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000928 <stepper_set_angle+0x6c>)
 80008f8:	fba2 2303 	umull	r2, r3, r2, r3
 80008fc:	089a      	lsrs	r2, r3, #2
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	611a      	str	r2, [r3, #16]

	if(0 == _stepper->steps_to_count)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	691b      	ldr	r3, [r3, #16]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d102      	bne.n	8000910 <stepper_set_angle+0x54>
	{
		stepper_stop(_stepper);
 800090a:	68f8      	ldr	r0, [r7, #12]
 800090c:	f000 f80e 	bl	800092c <stepper_stop>
	__HAL_TIM_SET_AUTORELOAD(_stepper->slave_timer.htim, _stepper->steps_to_count - 1);
	HAL_TIM_Base_Start_IT(_stepper->slave_timer.htim);

	HAL_TIM_PWM_Start(_stepper->timer.htim, _stepper->timer.channel);
#elif STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_MANUAL
	HAL_TIM_PWM_Start_IT(_stepper->timer.htim, _stepper->timer.channel);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	4619      	mov	r1, r3
 800091a:	4610      	mov	r0, r2
 800091c:	f002 fc16 	bl	800314c <HAL_TIM_PWM_Start_IT>
#endif
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	16c16c17 	.word	0x16c16c17

0800092c <stepper_stop>:

void stepper_stop(struct stepper_s *_stepper)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	_stepper->mode = idle;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	721a      	strb	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, 0);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d105      	bne.n	800094e <stepper_stop+0x22>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	635a      	str	r2, [r3, #52]	@ 0x34
 800094c:	e02c      	b.n	80009a8 <stepper_stop+0x7c>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b04      	cmp	r3, #4
 8000954:	d105      	bne.n	8000962 <stepper_stop+0x36>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	2300      	movs	r3, #0
 800095e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000960:	e022      	b.n	80009a8 <stepper_stop+0x7c>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	2b08      	cmp	r3, #8
 8000968:	d105      	bne.n	8000976 <stepper_stop+0x4a>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	2300      	movs	r3, #0
 8000972:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000974:	e018      	b.n	80009a8 <stepper_stop+0x7c>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2b0c      	cmp	r3, #12
 800097c:	d105      	bne.n	800098a <stepper_stop+0x5e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	2300      	movs	r3, #0
 8000986:	6413      	str	r3, [r2, #64]	@ 0x40
 8000988:	e00e      	b.n	80009a8 <stepper_stop+0x7c>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b10      	cmp	r3, #16
 8000990:	d105      	bne.n	800099e <stepper_stop+0x72>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	2300      	movs	r3, #0
 800099a:	6593      	str	r3, [r2, #88]	@ 0x58
 800099c:	e004      	b.n	80009a8 <stepper_stop+0x7c>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	2300      	movs	r3, #0
 80009a6:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Stop(_stepper->timer.htim, _stepper->timer.channel);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	4619      	mov	r1, r3
 80009b2:	4610      	mov	r0, r2
 80009b4:	f002 fb34 	bl	8003020 <HAL_TIM_PWM_Stop>

#if STEPPER_ANGLE_MODE == STEPPER_ANGLE_MODE_SLAVE_TIM
	HAL_TIM_Base_Stop_IT(_stepper->slave_timer.htim);
#endif
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <stepper_set_direction>:

void stepper_set_direction(struct stepper_s *_stepper, direction _dir)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
	if(_dir == CCW)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d105      	bne.n	80009de <stepper_set_direction+0x1e>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CCW);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2120      	movs	r1, #32
 80009d6:	4808      	ldr	r0, [pc, #32]	@ (80009f8 <stepper_set_direction+0x38>)
 80009d8:	f000 fed2 	bl	8001780 <HAL_GPIO_WritePin>
	else if(_dir == CW)
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
}
 80009dc:	e007      	b.n	80009ee <stepper_set_direction+0x2e>
	else if(_dir == CW)
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d104      	bne.n	80009ee <stepper_set_direction+0x2e>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2120      	movs	r1, #32
 80009e8:	4803      	ldr	r0, [pc, #12]	@ (80009f8 <stepper_set_direction+0x38>)
 80009ea:	f000 fec9 	bl	8001780 <HAL_GPIO_WritePin>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	48000400 	.word	0x48000400

080009fc <stepper_set_speed>:

void stepper_set_speed(struct stepper_s *_stepper, uint32_t _speed)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
	uint32_t counter, freq;

	if(_speed > 100)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2b64      	cmp	r3, #100	@ 0x64
 8000a0a:	d902      	bls.n	8000a12 <stepper_set_speed+0x16>
	{
		_speed = 100;
 8000a0c:	2364      	movs	r3, #100	@ 0x64
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	e006      	b.n	8000a20 <stepper_set_speed+0x24>
	}
	else if(_speed == 0)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d103      	bne.n	8000a20 <stepper_set_speed+0x24>
	{
		stepper_stop(_stepper);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff87 	bl	800092c <stepper_stop>
		return;
 8000a1e:	e068      	b.n	8000af2 <stepper_set_speed+0xf6>
	}

	freq = (_speed * (STEPPER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ))/STEPPER_MOTOR_MAX_SPEED;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000a26:	fb02 f303 	mul.w	r3, r2, r3
 8000a2a:	4a33      	ldr	r2, [pc, #204]	@ (8000af8 <stepper_set_speed+0xfc>)
 8000a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a30:	095b      	lsrs	r3, r3, #5
 8000a32:	60fb      	str	r3, [r7, #12]
	counter = HAL_RCC_GetPCLK1Freq() / (_stepper->timer.htim->Init.Prescaler * freq);
 8000a34:	f001 fc94 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8000a38:	4601      	mov	r1, r0
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	fb02 f303 	mul.w	r3, r2, r3
 8000a46:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a4a:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(_stepper->timer.htim, 0);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_AUTORELOAD(_stepper->timer.htim, counter - 1);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	3a01      	subs	r2, #1
 8000a60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, (counter/2) - 1);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d107      	bne.n	8000a84 <stepper_set_speed+0x88>
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	085a      	lsrs	r2, r3, #1
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3a01      	subs	r2, #1
 8000a80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a82:	e036      	b.n	8000af2 <stepper_set_speed+0xf6>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d107      	bne.n	8000a9c <stepper_set_speed+0xa0>
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	085b      	lsrs	r3, r3, #1
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a9a:	e02a      	b.n	8000af2 <stepper_set_speed+0xf6>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b08      	cmp	r3, #8
 8000aa2:	d107      	bne.n	8000ab4 <stepper_set_speed+0xb8>
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	085b      	lsrs	r3, r3, #1
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	6812      	ldr	r2, [r2, #0]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000ab2:	e01e      	b.n	8000af2 <stepper_set_speed+0xf6>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b0c      	cmp	r3, #12
 8000aba:	d107      	bne.n	8000acc <stepper_set_speed+0xd0>
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	085b      	lsrs	r3, r3, #1
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	6812      	ldr	r2, [r2, #0]
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	e012      	b.n	8000af2 <stepper_set_speed+0xf6>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b10      	cmp	r3, #16
 8000ad2:	d107      	bne.n	8000ae4 <stepper_set_speed+0xe8>
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	085b      	lsrs	r3, r3, #1
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	6812      	ldr	r2, [r2, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ae2:	e006      	b.n	8000af2 <stepper_set_speed+0xf6>
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	085b      	lsrs	r3, r3, #1
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	6812      	ldr	r2, [r2, #0]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	51eb851f 	.word	0x51eb851f

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <HAL_MspInit+0x44>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b06:	4a0e      	ldr	r2, [pc, #56]	@ (8000b40 <HAL_MspInit+0x44>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <HAL_MspInit+0x44>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <HAL_MspInit+0x44>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1e:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <HAL_MspInit+0x44>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_MspInit+0x44>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <NMI_Handler+0x4>

08000b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9a:	f000 fad9 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000baa:	f002 fc23 	bl	80033f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000004c 	.word	0x2000004c

08000bb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <TIM7_IRQHandler+0x10>)
 8000bbe:	f002 fc19 	bl	80033f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000e4 	.word	0x200000e4

08000bcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c06:	463b      	mov	r3, r7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c10:	4b20      	ldr	r3, [pc, #128]	@ (8000c94 <MX_TIM1_Init+0xa4>)
 8000c12:	4a21      	ldr	r2, [pc, #132]	@ (8000c98 <MX_TIM1_Init+0xa8>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <MX_TIM1_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c94 <MX_TIM1_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c22:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <MX_TIM1_Init+0xa4>)
 8000c24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <MX_TIM1_Init+0xa4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c30:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <MX_TIM1_Init+0xa4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <MX_TIM1_Init+0xa4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c3c:	4815      	ldr	r0, [pc, #84]	@ (8000c94 <MX_TIM1_Init+0xa4>)
 8000c3e:	f002 f8d7 	bl	8002df0 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000c48:	f7ff fe20 	bl	800088c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000c50:	2310      	movs	r3, #16
 8000c52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480e      	ldr	r0, [pc, #56]	@ (8000c94 <MX_TIM1_Init+0xa4>)
 8000c5c:	f002 fde0 	bl	8003820 <HAL_TIM_SlaveConfigSynchro>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c66:	f7ff fe11 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c76:	463b      	mov	r3, r7
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <MX_TIM1_Init+0xa4>)
 8000c7c:	f003 fae2 	bl	8004244 <HAL_TIMEx_MasterConfigSynchronization>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000c86:	f7ff fe01 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	3720      	adds	r7, #32
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000004c 	.word	0x2000004c
 8000c98:	40012c00 	.word	0x40012c00

08000c9c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
 8000cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_TIM2_Init+0xb0>)
 8000cc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40-1;
 8000cc8:	4b20      	ldr	r3, [pc, #128]	@ (8000d4c <MX_TIM2_Init+0xb0>)
 8000cca:	2227      	movs	r2, #39	@ 0x27
 8000ccc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_TIM2_Init+0xb0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <MX_TIM2_Init+0xb0>)
 8000cd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <MX_TIM2_Init+0xb0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_TIM2_Init+0xb0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ce8:	4818      	ldr	r0, [pc, #96]	@ (8000d4c <MX_TIM2_Init+0xb0>)
 8000cea:	f002 f941 	bl	8002f70 <HAL_TIM_PWM_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000cf4:	f7ff fdca 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000cf8:	2360      	movs	r3, #96	@ 0x60
 8000cfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000cfc:	2380      	movs	r3, #128	@ 0x80
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <MX_TIM2_Init+0xb0>)
 8000d08:	f003 fa9c 	bl	8004244 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d12:	f7ff fdbb 	bl	800088c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d16:	2360      	movs	r3, #96	@ 0x60
 8000d18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000d1a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <MX_TIM2_Init+0xb0>)
 8000d30:	f002 fc62 	bl	80035f8 <HAL_TIM_PWM_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000d3a:	f7ff fda7 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d3e:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <MX_TIM2_Init+0xb0>)
 8000d40:	f000 f89c 	bl	8000e7c <HAL_TIM_MspPostInit>

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	@ 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000098 	.word	0x20000098

08000d50 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_TIM7_Init+0x64>)
 8000d62:	4a15      	ldr	r2, [pc, #84]	@ (8000db8 <MX_TIM7_Init+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 8000d66:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <MX_TIM7_Init+0x64>)
 8000d68:	224f      	movs	r2, #79	@ 0x4f
 8000d6a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_TIM7_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <MX_TIM7_Init+0x64>)
 8000d74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d78:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_TIM7_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d80:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <MX_TIM7_Init+0x64>)
 8000d82:	f002 f835 	bl	8002df0 <HAL_TIM_Base_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000d8c:	f7ff fd7e 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_TIM7_Init+0x64>)
 8000d9e:	f003 fa51 	bl	8004244 <HAL_TIMEx_MasterConfigSynchronization>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000da8:	f7ff fd70 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200000e4 	.word	0x200000e4
 8000db8:	40001400 	.word	0x40001400

08000dbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e34 <HAL_TIM_Base_MspInit+0x78>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d114      	bne.n	8000df8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dce:	4b1a      	ldr	r3, [pc, #104]	@ (8000e38 <HAL_TIM_Base_MspInit+0x7c>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dd2:	4a19      	ldr	r2, [pc, #100]	@ (8000e38 <HAL_TIM_Base_MspInit+0x7c>)
 8000dd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dda:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <HAL_TIM_Base_MspInit+0x7c>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2019      	movs	r0, #25
 8000dec:	f000 facf 	bl	800138e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000df0:	2019      	movs	r0, #25
 8000df2:	f000 fae8 	bl	80013c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000df6:	e018      	b.n	8000e2a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8000e3c <HAL_TIM_Base_MspInit+0x80>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d113      	bne.n	8000e2a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e02:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <HAL_TIM_Base_MspInit+0x7c>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e06:	4a0c      	ldr	r2, [pc, #48]	@ (8000e38 <HAL_TIM_Base_MspInit+0x7c>)
 8000e08:	f043 0320 	orr.w	r3, r3, #32
 8000e0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <HAL_TIM_Base_MspInit+0x7c>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e12:	f003 0320 	and.w	r3, r3, #32
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2037      	movs	r0, #55	@ 0x37
 8000e20:	f000 fab5 	bl	800138e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e24:	2037      	movs	r0, #55	@ 0x37
 8000e26:	f000 face 	bl	80013c6 <HAL_NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40012c00 	.word	0x40012c00
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40001400 	.word	0x40001400

08000e40 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e50:	d10b      	bne.n	8000e6a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e52:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <HAL_TIM_PWM_MspInit+0x38>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e56:	4a08      	ldr	r2, [pc, #32]	@ (8000e78 <HAL_TIM_PWM_MspInit+0x38>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_TIM_PWM_MspInit+0x38>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e9c:	d11c      	bne.n	8000ed8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <HAL_TIM_MspPostInit+0x64>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee0 <HAL_TIM_MspPostInit+0x64>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <HAL_TIM_MspPostInit+0x64>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin;
 8000eb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <HAL_TIM_MspPostInit+0x68>)
 8000ed4:	f000 fa92 	bl	80013fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	48000400 	.word	0x48000400

08000ee8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eec:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000eee:	4a15      	ldr	r2, [pc, #84]	@ (8000f44 <MX_USART2_UART_Init+0x5c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000ef4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f2c:	f003 fa30 	bl	8004390 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f36:	f7ff fca9 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000130 	.word	0x20000130
 8000f44:	40004400 	.word	0x40004400

08000f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ac      	sub	sp, #176	@ 0xb0
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2288      	movs	r2, #136	@ 0x88
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f003 ffb6 	bl	8004eda <memset>
  if(uartHandle->Instance==USART2)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a21      	ldr	r2, [pc, #132]	@ (8000ff8 <HAL_UART_MspInit+0xb0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d13b      	bne.n	8000ff0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fa77 	bl	8002478 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f90:	f7ff fc7c 	bl	800088c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_UART_MspInit+0xb4>)
 8000f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f98:	4a18      	ldr	r2, [pc, #96]	@ (8000ffc <HAL_UART_MspInit+0xb4>)
 8000f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fa0:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <HAL_UART_MspInit+0xb4>)
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <HAL_UART_MspInit+0xb4>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb0:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <HAL_UART_MspInit+0xb4>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb8:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <HAL_UART_MspInit+0xb4>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fc4:	230c      	movs	r3, #12
 8000fc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fec:	f000 fa06 	bl	80013fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	37b0      	adds	r7, #176	@ 0xb0
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40004400 	.word	0x40004400
 8000ffc:	40021000 	.word	0x40021000

08001000 <send_data>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void send_data(uint32_t distance, uint32_t angle){
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
	uint8_t distance8t = (uint8_t)distance;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2,&distance8t,sizeof(distance8t),40);
 8001010:	f107 010f 	add.w	r1, r7, #15
 8001014:	2328      	movs	r3, #40	@ 0x28
 8001016:	2201      	movs	r2, #1
 8001018:	4809      	ldr	r0, [pc, #36]	@ (8001040 <send_data+0x40>)
 800101a:	f003 fa07 	bl	800442c <HAL_UART_Transmit>
	HAL_Delay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f000 f8b6 	bl	8001190 <HAL_Delay>
	uint8_t angle8t = (uint8_t)angle;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart2,&angle8t,sizeof(angle8t),40);
 800102a:	f107 010e 	add.w	r1, r7, #14
 800102e:	2328      	movs	r3, #40	@ 0x28
 8001030:	2201      	movs	r2, #1
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <send_data+0x40>)
 8001034:	f003 f9fa 	bl	800442c <HAL_UART_Transmit>
	return;
 8001038:	bf00      	nop
}
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000130 	.word	0x20000130

08001044 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800107c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001048:	f7ff fdc0 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800104c:	480c      	ldr	r0, [pc, #48]	@ (8001080 <LoopForever+0x6>)
  ldr r1, =_edata
 800104e:	490d      	ldr	r1, [pc, #52]	@ (8001084 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <LoopForever+0xe>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001064:	4c0a      	ldr	r4, [pc, #40]	@ (8001090 <LoopForever+0x16>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001072:	f003 ff3b 	bl	8004eec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001076:	f7ff fb1d 	bl	80006b4 <main>

0800107a <LoopForever>:

LoopForever:
    b LoopForever
 800107a:	e7fe      	b.n	800107a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800107c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001088:	08004fd0 	.word	0x08004fd0
  ldr r2, =_sbss
 800108c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001090:	200001bc 	.word	0x200001bc

08001094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_2_IRQHandler>
	...

08001098 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <HAL_Init+0x3c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <HAL_Init+0x3c>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f000 f962 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b4:	2000      	movs	r0, #0
 80010b6:	f000 f80f 	bl	80010d8 <HAL_InitTick>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	e001      	b.n	80010ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010c6:	f7ff fd19 	bl	8000afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40022000 	.word	0x40022000

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010e4:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <HAL_InitTick+0x6c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d023      	beq.n	8001134 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010ec:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <HAL_InitTick+0x70>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <HAL_InitTick+0x6c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f96d 	bl	80013e2 <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10f      	bne.n	800112e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d809      	bhi.n	8001128 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f937 	bl	800138e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001120:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <HAL_InitTick+0x74>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e007      	b.n	8001138 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	e004      	b.n	8001138 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	e001      	b.n	8001138 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000008 	.word	0x20000008
 8001148:	20000000 	.word	0x20000000
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	200001b8 	.word	0x200001b8

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	@ (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	200001b8 	.word	0x200001b8

08001190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011aa:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <HAL_Delay+0x44>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120a:	4a04      	ldr	r2, [pc, #16]	@ (800121c <__NVIC_SetPriorityGrouping+0x44>)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	60d3      	str	r3, [r2, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db0b      	blt.n	8001266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f003 021f 	and.w	r2, r3, #31
 8001254:	4907      	ldr	r1, [pc, #28]	@ (8001274 <__NVIC_EnableIRQ+0x38>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	2001      	movs	r0, #1
 800125e:	fa00 f202 	lsl.w	r2, r0, r2
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	@ (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	@ (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	@ 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	@ 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001344:	d301      	bcc.n	800134a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001346:	2301      	movs	r3, #1
 8001348:	e00f      	b.n	800136a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134a:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <SysTick_Config+0x40>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001352:	210f      	movs	r1, #15
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f7ff ff8e 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <SysTick_Config+0x40>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <SysTick_Config+0x40>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff29 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a0:	f7ff ff3e 	bl	8001220 <__NVIC_GetPriorityGrouping>
 80013a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff ff8e 	bl	80012cc <NVIC_EncodePriority>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff5d 	bl	8001278 <__NVIC_SetPriority>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff31 	bl	800123c <__NVIC_EnableIRQ>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffa2 	bl	8001334 <SysTick_Config>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140a:	e17f      	b.n	800170c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	2101      	movs	r1, #1
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	4013      	ands	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8171 	beq.w	8001706 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d005      	beq.n	800143c <HAL_GPIO_Init+0x40>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d130      	bne.n	800149e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001472:	2201      	movs	r2, #1
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	f003 0201 	and.w	r2, r3, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d118      	bne.n	80014dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014b0:	2201      	movs	r2, #1
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	08db      	lsrs	r3, r3, #3
 80014c6:	f003 0201 	and.w	r2, r3, #1
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d017      	beq.n	8001518 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d123      	bne.n	800156c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	08da      	lsrs	r2, r3, #3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3208      	adds	r2, #8
 800152c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	08da      	lsrs	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3208      	adds	r2, #8
 8001566:	6939      	ldr	r1, [r7, #16]
 8001568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0203 	and.w	r2, r3, #3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80ac 	beq.w	8001706 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	4b5f      	ldr	r3, [pc, #380]	@ (800172c <HAL_GPIO_Init+0x330>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b2:	4a5e      	ldr	r2, [pc, #376]	@ (800172c <HAL_GPIO_Init+0x330>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015ba:	4b5c      	ldr	r3, [pc, #368]	@ (800172c <HAL_GPIO_Init+0x330>)
 80015bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001730 <HAL_GPIO_Init+0x334>)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	089b      	lsrs	r3, r3, #2
 80015cc:	3302      	adds	r3, #2
 80015ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	220f      	movs	r2, #15
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015f0:	d025      	beq.n	800163e <HAL_GPIO_Init+0x242>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001734 <HAL_GPIO_Init+0x338>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d01f      	beq.n	800163a <HAL_GPIO_Init+0x23e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001738 <HAL_GPIO_Init+0x33c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d019      	beq.n	8001636 <HAL_GPIO_Init+0x23a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4d      	ldr	r2, [pc, #308]	@ (800173c <HAL_GPIO_Init+0x340>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_GPIO_Init+0x236>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4c      	ldr	r2, [pc, #304]	@ (8001740 <HAL_GPIO_Init+0x344>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00d      	beq.n	800162e <HAL_GPIO_Init+0x232>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4b      	ldr	r2, [pc, #300]	@ (8001744 <HAL_GPIO_Init+0x348>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d007      	beq.n	800162a <HAL_GPIO_Init+0x22e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4a      	ldr	r2, [pc, #296]	@ (8001748 <HAL_GPIO_Init+0x34c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d101      	bne.n	8001626 <HAL_GPIO_Init+0x22a>
 8001622:	2306      	movs	r3, #6
 8001624:	e00c      	b.n	8001640 <HAL_GPIO_Init+0x244>
 8001626:	2307      	movs	r3, #7
 8001628:	e00a      	b.n	8001640 <HAL_GPIO_Init+0x244>
 800162a:	2305      	movs	r3, #5
 800162c:	e008      	b.n	8001640 <HAL_GPIO_Init+0x244>
 800162e:	2304      	movs	r3, #4
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x244>
 8001632:	2303      	movs	r3, #3
 8001634:	e004      	b.n	8001640 <HAL_GPIO_Init+0x244>
 8001636:	2302      	movs	r3, #2
 8001638:	e002      	b.n	8001640 <HAL_GPIO_Init+0x244>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_GPIO_Init+0x244>
 800163e:	2300      	movs	r3, #0
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	f002 0203 	and.w	r2, r2, #3
 8001646:	0092      	lsls	r2, r2, #2
 8001648:	4093      	lsls	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001650:	4937      	ldr	r1, [pc, #220]	@ (8001730 <HAL_GPIO_Init+0x334>)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800165e:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <HAL_GPIO_Init+0x350>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001682:	4a32      	ldr	r2, [pc, #200]	@ (800174c <HAL_GPIO_Init+0x350>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001688:	4b30      	ldr	r3, [pc, #192]	@ (800174c <HAL_GPIO_Init+0x350>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ac:	4a27      	ldr	r2, [pc, #156]	@ (800174c <HAL_GPIO_Init+0x350>)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016b2:	4b26      	ldr	r3, [pc, #152]	@ (800174c <HAL_GPIO_Init+0x350>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016d6:	4a1d      	ldr	r2, [pc, #116]	@ (800174c <HAL_GPIO_Init+0x350>)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <HAL_GPIO_Init+0x350>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001700:	4a12      	ldr	r2, [pc, #72]	@ (800174c <HAL_GPIO_Init+0x350>)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa22 f303 	lsr.w	r3, r2, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	f47f ae78 	bne.w	800140c <HAL_GPIO_Init+0x10>
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	371c      	adds	r7, #28
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	40010000 	.word	0x40010000
 8001734:	48000400 	.word	0x48000400
 8001738:	48000800 	.word	0x48000800
 800173c:	48000c00 	.word	0x48000c00
 8001740:	48001000 	.word	0x48001000
 8001744:	48001400 	.word	0x48001400
 8001748:	48001800 	.word	0x48001800
 800174c:	40010400 	.word	0x40010400

08001750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	e001      	b.n	8001772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
 800178c:	4613      	mov	r3, r2
 800178e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001790:	787b      	ldrb	r3, [r7, #1]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40007000 	.word	0x40007000

080017cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017da:	d130      	bne.n	800183e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017dc:	4b23      	ldr	r3, [pc, #140]	@ (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017e8:	d038      	beq.n	800185c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ea:	4b20      	ldr	r3, [pc, #128]	@ (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017f2:	4a1e      	ldr	r2, [pc, #120]	@ (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2232      	movs	r2, #50	@ 0x32
 8001800:	fb02 f303 	mul.w	r3, r2, r3
 8001804:	4a1b      	ldr	r2, [pc, #108]	@ (8001874 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0c9b      	lsrs	r3, r3, #18
 800180c:	3301      	adds	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001810:	e002      	b.n	8001818 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	3b01      	subs	r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001818:	4b14      	ldr	r3, [pc, #80]	@ (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001824:	d102      	bne.n	800182c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f2      	bne.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800182c:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001838:	d110      	bne.n	800185c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e00f      	b.n	800185e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800183e:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800184a:	d007      	beq.n	800185c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001854:	4a05      	ldr	r2, [pc, #20]	@ (800186c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001856:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800185a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40007000 	.word	0x40007000
 8001870:	20000000 	.word	0x20000000
 8001874:	431bde83 	.word	0x431bde83

08001878 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e3ca      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800188a:	4b97      	ldr	r3, [pc, #604]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001894:	4b94      	ldr	r3, [pc, #592]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80e4 	beq.w	8001a74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_RCC_OscConfig+0x4a>
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	2b0c      	cmp	r3, #12
 80018b6:	f040 808b 	bne.w	80019d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	f040 8087 	bne.w	80019d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018c2:	4b89      	ldr	r3, [pc, #548]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x62>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e3a2      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1a      	ldr	r2, [r3, #32]
 80018de:	4b82      	ldr	r3, [pc, #520]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d004      	beq.n	80018f4 <HAL_RCC_OscConfig+0x7c>
 80018ea:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018f2:	e005      	b.n	8001900 <HAL_RCC_OscConfig+0x88>
 80018f4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018fa:	091b      	lsrs	r3, r3, #4
 80018fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001900:	4293      	cmp	r3, r2
 8001902:	d223      	bcs.n	800194c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fd55 	bl	80023b8 <RCC_SetFlashLatencyFromMSIRange>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e383      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001918:	4b73      	ldr	r3, [pc, #460]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a72      	ldr	r2, [pc, #456]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 800191e:	f043 0308 	orr.w	r3, r3, #8
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b70      	ldr	r3, [pc, #448]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	496d      	ldr	r1, [pc, #436]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001936:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	4968      	ldr	r1, [pc, #416]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
 800194a:	e025      	b.n	8001998 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800194c:	4b66      	ldr	r3, [pc, #408]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a65      	ldr	r2, [pc, #404]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001952:	f043 0308 	orr.w	r3, r3, #8
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4b63      	ldr	r3, [pc, #396]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4960      	ldr	r1, [pc, #384]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800196a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	495b      	ldr	r1, [pc, #364]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d109      	bne.n	8001998 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fd15 	bl	80023b8 <RCC_SetFlashLatencyFromMSIRange>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e343      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001998:	f000 fc4a 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b52      	ldr	r3, [pc, #328]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	4950      	ldr	r1, [pc, #320]	@ (8001aec <HAL_RCC_OscConfig+0x274>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	4a4e      	ldr	r2, [pc, #312]	@ (8001af0 <HAL_RCC_OscConfig+0x278>)
 80019b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019b8:	4b4e      	ldr	r3, [pc, #312]	@ (8001af4 <HAL_RCC_OscConfig+0x27c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fb8b 	bl	80010d8 <HAL_InitTick>
 80019c2:	4603      	mov	r3, r0
 80019c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d052      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	e327      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d032      	beq.n	8001a3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019d8:	4b43      	ldr	r3, [pc, #268]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a42      	ldr	r2, [pc, #264]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fbc8 	bl	8001178 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ec:	f7ff fbc4 	bl	8001178 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e310      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019fe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a0a:	4b37      	ldr	r3, [pc, #220]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a36      	ldr	r2, [pc, #216]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4931      	ldr	r1, [pc, #196]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	492c      	ldr	r1, [pc, #176]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
 8001a3c:	e01a      	b.n	8001a74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a29      	ldr	r2, [pc, #164]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fb95 	bl	8001178 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a52:	f7ff fb91 	bl	8001178 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e2dd      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a64:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x1da>
 8001a70:	e000      	b.n	8001a74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d074      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d005      	beq.n	8001a92 <HAL_RCC_OscConfig+0x21a>
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b0c      	cmp	r3, #12
 8001a8a:	d10e      	bne.n	8001aaa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d10b      	bne.n	8001aaa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d064      	beq.n	8001b68 <HAL_RCC_OscConfig+0x2f0>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d160      	bne.n	8001b68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e2ba      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x24a>
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001aba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	e026      	b.n	8001b10 <HAL_RCC_OscConfig+0x298>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aca:	d115      	bne.n	8001af8 <HAL_RCC_OscConfig+0x280>
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	4b03      	ldr	r3, [pc, #12]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a02      	ldr	r2, [pc, #8]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	e014      	b.n	8001b10 <HAL_RCC_OscConfig+0x298>
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	08004f78 	.word	0x08004f78
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000004 	.word	0x20000004
 8001af8:	4ba0      	ldr	r3, [pc, #640]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a9f      	ldr	r2, [pc, #636]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b9d      	ldr	r3, [pc, #628]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a9c      	ldr	r2, [pc, #624]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff fb2e 	bl	8001178 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fb2a 	bl	8001178 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	@ 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e276      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b32:	4b92      	ldr	r3, [pc, #584]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x2a8>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff fb1a 	bl	8001178 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff fb16 	bl	8001178 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	@ 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e262      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b5a:	4b88      	ldr	r3, [pc, #544]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x2d0>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d060      	beq.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_OscConfig+0x310>
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d119      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d116      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b88:	4b7c      	ldr	r3, [pc, #496]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x328>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e23f      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b76      	ldr	r3, [pc, #472]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	061b      	lsls	r3, r3, #24
 8001bae:	4973      	ldr	r1, [pc, #460]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb4:	e040      	b.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d023      	beq.n	8001c06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a6e      	ldr	r2, [pc, #440]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff fad5 	bl	8001178 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff fad1 	bl	8001178 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e21d      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be4:	4b65      	ldr	r3, [pc, #404]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf0:	4b62      	ldr	r3, [pc, #392]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	061b      	lsls	r3, r3, #24
 8001bfe:	495f      	ldr	r1, [pc, #380]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
 8001c04:	e018      	b.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c06:	4b5d      	ldr	r3, [pc, #372]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a5c      	ldr	r2, [pc, #368]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff fab1 	bl	8001178 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff faad 	bl	8001178 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e1f9      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c2c:	4b53      	ldr	r3, [pc, #332]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d03c      	beq.n	8001cbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01c      	beq.n	8001c86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c52:	4a4a      	ldr	r2, [pc, #296]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5c:	f7ff fa8c 	bl	8001178 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c64:	f7ff fa88 	bl	8001178 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e1d4      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c76:	4b41      	ldr	r3, [pc, #260]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0ef      	beq.n	8001c64 <HAL_RCC_OscConfig+0x3ec>
 8001c84:	e01b      	b.n	8001cbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c86:	4b3d      	ldr	r3, [pc, #244]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c8c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c96:	f7ff fa6f 	bl	8001178 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fa6b 	bl	8001178 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e1b7      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cb0:	4b32      	ldr	r3, [pc, #200]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1ef      	bne.n	8001c9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80a6 	beq.w	8001e18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10d      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cdc:	4b27      	ldr	r3, [pc, #156]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce0:	4a26      	ldr	r2, [pc, #152]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ce8:	4b24      	ldr	r3, [pc, #144]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf8:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <HAL_RCC_OscConfig+0x508>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d118      	bne.n	8001d36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d04:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <HAL_RCC_OscConfig+0x508>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1d      	ldr	r2, [pc, #116]	@ (8001d80 <HAL_RCC_OscConfig+0x508>)
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d10:	f7ff fa32 	bl	8001178 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d18:	f7ff fa2e 	bl	8001178 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e17a      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d2a:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <HAL_RCC_OscConfig+0x508>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d108      	bne.n	8001d50 <HAL_RCC_OscConfig+0x4d8>
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d44:	4a0d      	ldr	r2, [pc, #52]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d4e:	e029      	b.n	8001da4 <HAL_RCC_OscConfig+0x52c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d115      	bne.n	8001d84 <HAL_RCC_OscConfig+0x50c>
 8001d58:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d5e:	4a07      	ldr	r2, [pc, #28]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d68:	4b04      	ldr	r3, [pc, #16]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6e:	4a03      	ldr	r2, [pc, #12]	@ (8001d7c <HAL_RCC_OscConfig+0x504>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d78:	e014      	b.n	8001da4 <HAL_RCC_OscConfig+0x52c>
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40007000 	.word	0x40007000
 8001d84:	4b9c      	ldr	r3, [pc, #624]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d8a:	4a9b      	ldr	r2, [pc, #620]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d94:	4b98      	ldr	r3, [pc, #608]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d9a:	4a97      	ldr	r2, [pc, #604]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001d9c:	f023 0304 	bic.w	r3, r3, #4
 8001da0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d016      	beq.n	8001dda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dac:	f7ff f9e4 	bl	8001178 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db4:	f7ff f9e0 	bl	8001178 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e12a      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dca:	4b8b      	ldr	r3, [pc, #556]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0ed      	beq.n	8001db4 <HAL_RCC_OscConfig+0x53c>
 8001dd8:	e015      	b.n	8001e06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dda:	f7ff f9cd 	bl	8001178 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff f9c9 	bl	8001178 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e113      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1ed      	bne.n	8001de2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e06:	7ffb      	ldrb	r3, [r7, #31]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0c:	4b7a      	ldr	r3, [pc, #488]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e10:	4a79      	ldr	r2, [pc, #484]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80fe 	beq.w	800201e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	f040 80d0 	bne.w	8001fcc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e2c:	4b72      	ldr	r3, [pc, #456]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0203 	and.w	r2, r3, #3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d130      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d127      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d11f      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e6c:	2a07      	cmp	r2, #7
 8001e6e:	bf14      	ite	ne
 8001e70:	2201      	movne	r2, #1
 8001e72:	2200      	moveq	r2, #0
 8001e74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d113      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	3b01      	subs	r3, #1
 8001e88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d109      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	085b      	lsrs	r3, r3, #1
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d06e      	beq.n	8001f80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d069      	beq.n	8001f7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ea8:	4b53      	ldr	r3, [pc, #332]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001eb4:	4b50      	ldr	r3, [pc, #320]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0ad      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001eca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ece:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ed0:	f7ff f952 	bl	8001178 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7ff f94e 	bl	8001178 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e09a      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eea:	4b43      	ldr	r3, [pc, #268]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef6:	4b40      	ldr	r3, [pc, #256]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	4b40      	ldr	r3, [pc, #256]	@ (8001ffc <HAL_RCC_OscConfig+0x784>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f06:	3a01      	subs	r2, #1
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	4311      	orrs	r1, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f10:	0212      	lsls	r2, r2, #8
 8001f12:	4311      	orrs	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f18:	0852      	lsrs	r2, r2, #1
 8001f1a:	3a01      	subs	r2, #1
 8001f1c:	0552      	lsls	r2, r2, #21
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f24:	0852      	lsrs	r2, r2, #1
 8001f26:	3a01      	subs	r2, #1
 8001f28:	0652      	lsls	r2, r2, #25
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f30:	0912      	lsrs	r2, r2, #4
 8001f32:	0452      	lsls	r2, r2, #17
 8001f34:	430a      	orrs	r2, r1
 8001f36:	4930      	ldr	r1, [pc, #192]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f48:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f54:	f7ff f910 	bl	8001178 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff f90c 	bl	8001178 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e058      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f7a:	e050      	b.n	800201e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e04f      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d148      	bne.n	800201e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f98:	4b17      	ldr	r3, [pc, #92]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4a16      	ldr	r2, [pc, #88]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fa4:	f7ff f8e8 	bl	8001178 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7ff f8e4 	bl	8001178 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e030      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x734>
 8001fca:	e028      	b.n	800201e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d023      	beq.n	800201a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a08      	ldr	r2, [pc, #32]	@ (8001ff8 <HAL_RCC_OscConfig+0x780>)
 8001fd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7ff f8cb 	bl	8001178 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe4:	e00c      	b.n	8002000 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff f8c7 	bl	8001178 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d905      	bls.n	8002000 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e013      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002000:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <HAL_RCC_OscConfig+0x7b0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1ec      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_RCC_OscConfig+0x7b0>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	4905      	ldr	r1, [pc, #20]	@ (8002028 <HAL_RCC_OscConfig+0x7b0>)
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_RCC_OscConfig+0x7b4>)
 8002014:	4013      	ands	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
 8002018:	e001      	b.n	800201e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3720      	adds	r7, #32
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	feeefffc 	.word	0xfeeefffc

08002030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0e7      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002044:	4b75      	ldr	r3, [pc, #468]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d910      	bls.n	8002074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b72      	ldr	r3, [pc, #456]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0207 	bic.w	r2, r3, #7
 800205a:	4970      	ldr	r1, [pc, #448]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b6e      	ldr	r3, [pc, #440]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0cf      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d010      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	4b66      	ldr	r3, [pc, #408]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800208c:	429a      	cmp	r2, r3
 800208e:	d908      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002090:	4b63      	ldr	r3, [pc, #396]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4960      	ldr	r1, [pc, #384]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d04c      	beq.n	8002148 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d121      	bne.n	8002106 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e0a6      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ce:	4b54      	ldr	r3, [pc, #336]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d115      	bne.n	8002106 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e09a      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e08e      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e086      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002106:	4b46      	ldr	r3, [pc, #280]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f023 0203 	bic.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4943      	ldr	r1, [pc, #268]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002118:	f7ff f82e 	bl	8001178 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	e00a      	b.n	8002136 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7ff f82a 	bl	8001178 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e06e      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	4b3a      	ldr	r3, [pc, #232]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 020c 	and.w	r2, r3, #12
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	429a      	cmp	r2, r3
 8002146:	d1eb      	bne.n	8002120 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	4b31      	ldr	r3, [pc, #196]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002160:	429a      	cmp	r2, r3
 8002162:	d208      	bcs.n	8002176 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	492b      	ldr	r1, [pc, #172]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002176:	4b29      	ldr	r3, [pc, #164]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d210      	bcs.n	80021a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002184:	4b25      	ldr	r3, [pc, #148]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 0207 	bic.w	r2, r3, #7
 800218c:	4923      	ldr	r1, [pc, #140]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002194:	4b21      	ldr	r3, [pc, #132]	@ (800221c <HAL_RCC_ClockConfig+0x1ec>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e036      	b.n	8002214 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	4918      	ldr	r1, [pc, #96]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d0:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4910      	ldr	r1, [pc, #64]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021e4:	f000 f824 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	490b      	ldr	r1, [pc, #44]	@ (8002224 <HAL_RCC_ClockConfig+0x1f4>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	4a09      	ldr	r2, [pc, #36]	@ (8002228 <HAL_RCC_ClockConfig+0x1f8>)
 8002202:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002204:	4b09      	ldr	r3, [pc, #36]	@ (800222c <HAL_RCC_ClockConfig+0x1fc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe ff65 	bl	80010d8 <HAL_InitTick>
 800220e:	4603      	mov	r3, r0
 8002210:	72fb      	strb	r3, [r7, #11]

  return status;
 8002212:	7afb      	ldrb	r3, [r7, #11]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40022000 	.word	0x40022000
 8002220:	40021000 	.word	0x40021000
 8002224:	08004f78 	.word	0x08004f78
 8002228:	20000000 	.word	0x20000000
 800222c:	20000004 	.word	0x20000004

08002230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	@ 0x24
 8002234:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223e:	4b3e      	ldr	r3, [pc, #248]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002248:	4b3b      	ldr	r3, [pc, #236]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x34>
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b0c      	cmp	r3, #12
 800225c:	d121      	bne.n	80022a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d11e      	bne.n	80022a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002264:	4b34      	ldr	r3, [pc, #208]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d107      	bne.n	8002280 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002270:	4b31      	ldr	r3, [pc, #196]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 8002272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	e005      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002280:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800228c:	4a2b      	ldr	r2, [pc, #172]	@ (800233c <HAL_RCC_GetSysClockFreq+0x10c>)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002294:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10d      	bne.n	80022b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d102      	bne.n	80022ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022a8:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x110>)
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	e004      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022b4:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x114>)
 80022b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d134      	bne.n	8002328 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022be:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d003      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0xac>
 80022d4:	e005      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x110>)
 80022d8:	617b      	str	r3, [r7, #20]
      break;
 80022da:	e005      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x114>)
 80022de:	617b      	str	r3, [r7, #20]
      break;
 80022e0:	e002      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	617b      	str	r3, [r7, #20]
      break;
 80022e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022e8:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	3301      	adds	r3, #1
 80022f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	fb03 f202 	mul.w	r2, r3, r2
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800230e:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x108>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	0e5b      	lsrs	r3, r3, #25
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	3301      	adds	r3, #1
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002328:	69bb      	ldr	r3, [r7, #24]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3724      	adds	r7, #36	@ 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	08004f90 	.word	0x08004f90
 8002340:	00f42400 	.word	0x00f42400
 8002344:	007a1200 	.word	0x007a1200

08002348 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800234c:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_RCC_GetHCLKFreq+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000000 	.word	0x20000000

08002360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002364:	f7ff fff0 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_RCC_GetPCLK1Freq+0x24>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4904      	ldr	r1, [pc, #16]	@ (8002388 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	08004f88 	.word	0x08004f88

0800238c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002390:	f7ff ffda 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	0adb      	lsrs	r3, r3, #11
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4904      	ldr	r1, [pc, #16]	@ (80023b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08004f88 	.word	0x08004f88

080023b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023d0:	f7ff f9ee 	bl	80017b0 <HAL_PWREx_GetVoltageRange>
 80023d4:	6178      	str	r0, [r7, #20]
 80023d6:	e014      	b.n	8002402 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023d8:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	4a24      	ldr	r2, [pc, #144]	@ (8002470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80023e4:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023f0:	f7ff f9de 	bl	80017b0 <HAL_PWREx_GetVoltageRange>
 80023f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002400:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002408:	d10b      	bne.n	8002422 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b80      	cmp	r3, #128	@ 0x80
 800240e:	d919      	bls.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2ba0      	cmp	r3, #160	@ 0xa0
 8002414:	d902      	bls.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002416:	2302      	movs	r3, #2
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	e013      	b.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800241c:	2301      	movs	r3, #1
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	e010      	b.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b80      	cmp	r3, #128	@ 0x80
 8002426:	d902      	bls.n	800242e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002428:	2303      	movs	r3, #3
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	e00a      	b.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b80      	cmp	r3, #128	@ 0x80
 8002432:	d102      	bne.n	800243a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002434:	2302      	movs	r3, #2
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	e004      	b.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b70      	cmp	r3, #112	@ 0x70
 800243e:	d101      	bne.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002440:	2301      	movs	r3, #1
 8002442:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 0207 	bic.w	r2, r3, #7
 800244c:	4909      	ldr	r1, [pc, #36]	@ (8002474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002454:	4b07      	ldr	r3, [pc, #28]	@ (8002474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	429a      	cmp	r2, r3
 8002460:	d001      	beq.n	8002466 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000
 8002474:	40022000 	.word	0x40022000

08002478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002480:	2300      	movs	r3, #0
 8002482:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002484:	2300      	movs	r3, #0
 8002486:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002490:	2b00      	cmp	r3, #0
 8002492:	d041      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002498:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800249c:	d02a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800249e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024a2:	d824      	bhi.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024a8:	d008      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024ae:	d81e      	bhi.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024b8:	d010      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024ba:	e018      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024bc:	4b86      	ldr	r3, [pc, #536]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a85      	ldr	r2, [pc, #532]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024c8:	e015      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 fabb 	bl	8002a4c <RCCEx_PLLSAI1_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024da:	e00c      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3320      	adds	r3, #32
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fba6 	bl	8002c34 <RCCEx_PLLSAI2_Config>
 80024e8:	4603      	mov	r3, r0
 80024ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024ec:	e003      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	74fb      	strb	r3, [r7, #19]
      break;
 80024f2:	e000      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10b      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024fc:	4b76      	ldr	r3, [pc, #472]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002502:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800250a:	4973      	ldr	r1, [pc, #460]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002512:	e001      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d041      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002528:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800252c:	d02a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800252e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002532:	d824      	bhi.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002534:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002538:	d008      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800253a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800253e:	d81e      	bhi.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002548:	d010      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800254a:	e018      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800254c:	4b62      	ldr	r3, [pc, #392]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a61      	ldr	r2, [pc, #388]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002556:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002558:	e015      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3304      	adds	r3, #4
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fa73 	bl	8002a4c <RCCEx_PLLSAI1_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800256a:	e00c      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3320      	adds	r3, #32
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fb5e 	bl	8002c34 <RCCEx_PLLSAI2_Config>
 8002578:	4603      	mov	r3, r0
 800257a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800257c:	e003      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	74fb      	strb	r3, [r7, #19]
      break;
 8002582:	e000      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10b      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800258c:	4b52      	ldr	r3, [pc, #328]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002592:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800259a:	494f      	ldr	r1, [pc, #316]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80025a2:	e001      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80a0 	beq.w	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025ba:	4b47      	ldr	r3, [pc, #284]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00d      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d0:	4b41      	ldr	r3, [pc, #260]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d4:	4a40      	ldr	r2, [pc, #256]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025da:	6593      	str	r3, [r2, #88]	@ 0x58
 80025dc:	4b3e      	ldr	r3, [pc, #248]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e8:	2301      	movs	r3, #1
 80025ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ec:	4b3b      	ldr	r3, [pc, #236]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a3a      	ldr	r2, [pc, #232]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025f8:	f7fe fdbe 	bl	8001178 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025fe:	e009      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002600:	f7fe fdba 	bl	8001178 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d902      	bls.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	74fb      	strb	r3, [r7, #19]
        break;
 8002612:	e005      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002614:	4b31      	ldr	r3, [pc, #196]	@ (80026dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ef      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d15c      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002626:	4b2c      	ldr	r3, [pc, #176]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002630:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01f      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	429a      	cmp	r2, r3
 8002642:	d019      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002644:	4b24      	ldr	r3, [pc, #144]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800264e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002650:	4b21      	ldr	r3, [pc, #132]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002656:	4a20      	ldr	r2, [pc, #128]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002660:	4b1d      	ldr	r3, [pc, #116]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002666:	4a1c      	ldr	r2, [pc, #112]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002668:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800266c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002670:	4a19      	ldr	r2, [pc, #100]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d016      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fe fd79 	bl	8001178 <HAL_GetTick>
 8002686:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002688:	e00b      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268a:	f7fe fd75 	bl	8001178 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d902      	bls.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	74fb      	strb	r3, [r7, #19]
            break;
 80026a0:	e006      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a2:	4b0d      	ldr	r3, [pc, #52]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ec      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026b6:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026c6:	4904      	ldr	r1, [pc, #16]	@ (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80026ce:	e009      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	74bb      	strb	r3, [r7, #18]
 80026d4:	e006      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e4:	7c7b      	ldrb	r3, [r7, #17]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d105      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ea:	4b9e      	ldr	r3, [pc, #632]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ee:	4a9d      	ldr	r2, [pc, #628]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002702:	4b98      	ldr	r3, [pc, #608]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002708:	f023 0203 	bic.w	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002710:	4994      	ldr	r1, [pc, #592]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002724:	4b8f      	ldr	r3, [pc, #572]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272a:	f023 020c 	bic.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002732:	498c      	ldr	r1, [pc, #560]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002746:	4b87      	ldr	r3, [pc, #540]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	4983      	ldr	r1, [pc, #524]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002768:	4b7e      	ldr	r3, [pc, #504]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	497b      	ldr	r1, [pc, #492]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800278a:	4b76      	ldr	r3, [pc, #472]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002790:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002798:	4972      	ldr	r1, [pc, #456]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027ac:	4b6d      	ldr	r3, [pc, #436]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ba:	496a      	ldr	r1, [pc, #424]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ce:	4b65      	ldr	r3, [pc, #404]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027dc:	4961      	ldr	r1, [pc, #388]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027f0:	4b5c      	ldr	r3, [pc, #368]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fe:	4959      	ldr	r1, [pc, #356]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002812:	4b54      	ldr	r3, [pc, #336]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002818:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002820:	4950      	ldr	r1, [pc, #320]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002834:	4b4b      	ldr	r3, [pc, #300]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002842:	4948      	ldr	r1, [pc, #288]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002856:	4b43      	ldr	r3, [pc, #268]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002864:	493f      	ldr	r1, [pc, #252]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d028      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002878:	4b3a      	ldr	r3, [pc, #232]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002886:	4937      	ldr	r1, [pc, #220]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002892:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002896:	d106      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002898:	4b32      	ldr	r3, [pc, #200]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a31      	ldr	r2, [pc, #196]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028a2:	60d3      	str	r3, [r2, #12]
 80028a4:	e011      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028ae:	d10c      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3304      	adds	r3, #4
 80028b4:	2101      	movs	r1, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f8c8 	bl	8002a4c <RCCEx_PLLSAI1_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d028      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028d6:	4b23      	ldr	r3, [pc, #140]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	491f      	ldr	r1, [pc, #124]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028f4:	d106      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002900:	60d3      	str	r3, [r2, #12]
 8002902:	e011      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002908:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800290c:	d10c      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	2101      	movs	r1, #1
 8002914:	4618      	mov	r0, r3
 8002916:	f000 f899 	bl	8002a4c <RCCEx_PLLSAI1_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d02b      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002942:	4908      	ldr	r1, [pc, #32]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002952:	d109      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002954:	4b03      	ldr	r3, [pc, #12]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a02      	ldr	r2, [pc, #8]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800295e:	60d3      	str	r3, [r2, #12]
 8002960:	e014      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800296c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002970:	d10c      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3304      	adds	r3, #4
 8002976:	2101      	movs	r1, #1
 8002978:	4618      	mov	r0, r3
 800297a:	f000 f867 	bl	8002a4c <RCCEx_PLLSAI1_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d02f      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002998:	4b2b      	ldr	r3, [pc, #172]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029a6:	4928      	ldr	r1, [pc, #160]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029b6:	d10d      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	2102      	movs	r1, #2
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f844 	bl	8002a4c <RCCEx_PLLSAI1_Config>
 80029c4:	4603      	mov	r3, r0
 80029c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d014      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	74bb      	strb	r3, [r7, #18]
 80029d2:	e011      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3320      	adds	r3, #32
 80029e2:	2102      	movs	r1, #2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 f925 	bl	8002c34 <RCCEx_PLLSAI2_Config>
 80029ea:	4603      	mov	r3, r0
 80029ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029f4:	7cfb      	ldrb	r3, [r7, #19]
 80029f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a04:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a12:	490d      	ldr	r1, [pc, #52]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a26:	4b08      	ldr	r3, [pc, #32]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a36:	4904      	ldr	r1, [pc, #16]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000

08002a4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a5a:	4b75      	ldr	r3, [pc, #468]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d018      	beq.n	8002a98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a66:	4b72      	ldr	r3, [pc, #456]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0203 	and.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d10d      	bne.n	8002a92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
       ||
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a7e:	4b6c      	ldr	r3, [pc, #432]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d047      	beq.n	8002b22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
 8002a96:	e044      	b.n	8002b22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d018      	beq.n	8002ad2 <RCCEx_PLLSAI1_Config+0x86>
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d825      	bhi.n	8002af0 <RCCEx_PLLSAI1_Config+0xa4>
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d002      	beq.n	8002aae <RCCEx_PLLSAI1_Config+0x62>
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d009      	beq.n	8002ac0 <RCCEx_PLLSAI1_Config+0x74>
 8002aac:	e020      	b.n	8002af0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aae:	4b60      	ldr	r3, [pc, #384]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d11d      	bne.n	8002af6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002abe:	e01a      	b.n	8002af6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ac0:	4b5b      	ldr	r3, [pc, #364]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d116      	bne.n	8002afa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad0:	e013      	b.n	8002afa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ad2:	4b57      	ldr	r3, [pc, #348]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10f      	bne.n	8002afe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ade:	4b54      	ldr	r3, [pc, #336]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aee:	e006      	b.n	8002afe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      break;
 8002af4:	e004      	b.n	8002b00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002af6:	bf00      	nop
 8002af8:	e002      	b.n	8002b00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002afa:	bf00      	nop
 8002afc:	e000      	b.n	8002b00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002afe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10d      	bne.n	8002b22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b06:	4b4a      	ldr	r3, [pc, #296]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6819      	ldr	r1, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	4944      	ldr	r1, [pc, #272]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d17d      	bne.n	8002c24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b28:	4b41      	ldr	r3, [pc, #260]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a40      	ldr	r2, [pc, #256]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b34:	f7fe fb20 	bl	8001178 <HAL_GetTick>
 8002b38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b3a:	e009      	b.n	8002b50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b3c:	f7fe fb1c 	bl	8001178 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d902      	bls.n	8002b50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b4e:	e005      	b.n	8002b5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b50:	4b37      	ldr	r3, [pc, #220]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ef      	bne.n	8002b3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d160      	bne.n	8002c24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d111      	bne.n	8002b8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b68:	4b31      	ldr	r3, [pc, #196]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6892      	ldr	r2, [r2, #8]
 8002b78:	0211      	lsls	r1, r2, #8
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	0912      	lsrs	r2, r2, #4
 8002b80:	0452      	lsls	r2, r2, #17
 8002b82:	430a      	orrs	r2, r1
 8002b84:	492a      	ldr	r1, [pc, #168]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	610b      	str	r3, [r1, #16]
 8002b8a:	e027      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d112      	bne.n	8002bb8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b92:	4b27      	ldr	r3, [pc, #156]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b9a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6892      	ldr	r2, [r2, #8]
 8002ba2:	0211      	lsls	r1, r2, #8
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6912      	ldr	r2, [r2, #16]
 8002ba8:	0852      	lsrs	r2, r2, #1
 8002baa:	3a01      	subs	r2, #1
 8002bac:	0552      	lsls	r2, r2, #21
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	491f      	ldr	r1, [pc, #124]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	610b      	str	r3, [r1, #16]
 8002bb6:	e011      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bc0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6892      	ldr	r2, [r2, #8]
 8002bc8:	0211      	lsls	r1, r2, #8
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6952      	ldr	r2, [r2, #20]
 8002bce:	0852      	lsrs	r2, r2, #1
 8002bd0:	3a01      	subs	r2, #1
 8002bd2:	0652      	lsls	r2, r2, #25
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	4916      	ldr	r1, [pc, #88]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bdc:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a13      	ldr	r2, [pc, #76]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe fac6 	bl	8001178 <HAL_GetTick>
 8002bec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bee:	e009      	b.n	8002c04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bf0:	f7fe fac2 	bl	8001178 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d902      	bls.n	8002c04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	73fb      	strb	r3, [r7, #15]
          break;
 8002c02:	e005      	b.n	8002c10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c04:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0ef      	beq.n	8002bf0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	4904      	ldr	r1, [pc, #16]	@ (8002c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000

08002c34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c42:	4b6a      	ldr	r3, [pc, #424]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d018      	beq.n	8002c80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c4e:	4b67      	ldr	r3, [pc, #412]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0203 	and.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d10d      	bne.n	8002c7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
       ||
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c66:	4b61      	ldr	r3, [pc, #388]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
       ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d047      	beq.n	8002d0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e044      	b.n	8002d0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d018      	beq.n	8002cba <RCCEx_PLLSAI2_Config+0x86>
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d825      	bhi.n	8002cd8 <RCCEx_PLLSAI2_Config+0xa4>
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d002      	beq.n	8002c96 <RCCEx_PLLSAI2_Config+0x62>
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d009      	beq.n	8002ca8 <RCCEx_PLLSAI2_Config+0x74>
 8002c94:	e020      	b.n	8002cd8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c96:	4b55      	ldr	r3, [pc, #340]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11d      	bne.n	8002cde <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca6:	e01a      	b.n	8002cde <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ca8:	4b50      	ldr	r3, [pc, #320]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d116      	bne.n	8002ce2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb8:	e013      	b.n	8002ce2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cba:	4b4c      	ldr	r3, [pc, #304]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cc6:	4b49      	ldr	r3, [pc, #292]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cd6:	e006      	b.n	8002ce6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      break;
 8002cdc:	e004      	b.n	8002ce8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e002      	b.n	8002ce8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ce6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10d      	bne.n	8002d0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cee:	4b3f      	ldr	r3, [pc, #252]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6819      	ldr	r1, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	430b      	orrs	r3, r1
 8002d04:	4939      	ldr	r1, [pc, #228]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d167      	bne.n	8002de0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d10:	4b36      	ldr	r3, [pc, #216]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a35      	ldr	r2, [pc, #212]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fa2c 	bl	8001178 <HAL_GetTick>
 8002d20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d22:	e009      	b.n	8002d38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d24:	f7fe fa28 	bl	8001178 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d902      	bls.n	8002d38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	73fb      	strb	r3, [r7, #15]
        break;
 8002d36:	e005      	b.n	8002d44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d38:	4b2c      	ldr	r3, [pc, #176]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1ef      	bne.n	8002d24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d14a      	bne.n	8002de0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d111      	bne.n	8002d74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d50:	4b26      	ldr	r3, [pc, #152]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6892      	ldr	r2, [r2, #8]
 8002d60:	0211      	lsls	r1, r2, #8
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68d2      	ldr	r2, [r2, #12]
 8002d66:	0912      	lsrs	r2, r2, #4
 8002d68:	0452      	lsls	r2, r2, #17
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	491f      	ldr	r1, [pc, #124]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	614b      	str	r3, [r1, #20]
 8002d72:	e011      	b.n	8002d98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d74:	4b1d      	ldr	r3, [pc, #116]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6892      	ldr	r2, [r2, #8]
 8002d84:	0211      	lsls	r1, r2, #8
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6912      	ldr	r2, [r2, #16]
 8002d8a:	0852      	lsrs	r2, r2, #1
 8002d8c:	3a01      	subs	r2, #1
 8002d8e:	0652      	lsls	r2, r2, #25
 8002d90:	430a      	orrs	r2, r1
 8002d92:	4916      	ldr	r1, [pc, #88]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d98:	4b14      	ldr	r3, [pc, #80]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a13      	ldr	r2, [pc, #76]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002da2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe f9e8 	bl	8001178 <HAL_GetTick>
 8002da8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002daa:	e009      	b.n	8002dc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dac:	f7fe f9e4 	bl	8001178 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d902      	bls.n	8002dc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	73fb      	strb	r3, [r7, #15]
          break;
 8002dbe:	e005      	b.n	8002dcc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ef      	beq.n	8002dac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dd2:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	4904      	ldr	r1, [pc, #16]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000

08002df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e049      	b.n	8002e96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd ffd0 	bl	8000dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f000 fd60 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d001      	beq.n	8002eb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e047      	b.n	8002f48 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a23      	ldr	r2, [pc, #140]	@ (8002f54 <HAL_TIM_Base_Start+0xb4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d01d      	beq.n	8002f06 <HAL_TIM_Base_Start+0x66>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed2:	d018      	beq.n	8002f06 <HAL_TIM_Base_Start+0x66>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f58 <HAL_TIM_Base_Start+0xb8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_TIM_Base_Start+0x66>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f5c <HAL_TIM_Base_Start+0xbc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_TIM_Base_Start+0x66>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1c      	ldr	r2, [pc, #112]	@ (8002f60 <HAL_TIM_Base_Start+0xc0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_TIM_Base_Start+0x66>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f64 <HAL_TIM_Base_Start+0xc4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_TIM_Base_Start+0x66>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a19      	ldr	r2, [pc, #100]	@ (8002f68 <HAL_TIM_Base_Start+0xc8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d115      	bne.n	8002f32 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	4b17      	ldr	r3, [pc, #92]	@ (8002f6c <HAL_TIM_Base_Start+0xcc>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b06      	cmp	r3, #6
 8002f16:	d015      	beq.n	8002f44 <HAL_TIM_Base_Start+0xa4>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f1e:	d011      	beq.n	8002f44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f30:	e008      	b.n	8002f44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e000      	b.n	8002f46 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40000c00 	.word	0x40000c00
 8002f64:	40013400 	.word	0x40013400
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	00010007 	.word	0x00010007

08002f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e049      	b.n	8003016 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd ff52 	bl	8000e40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f000 fca0 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f001 f8e0 	bl	80041f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a3e      	ldr	r2, [pc, #248]	@ (8003138 <HAL_TIM_PWM_Stop+0x118>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_TIM_PWM_Stop+0x4a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a3d      	ldr	r2, [pc, #244]	@ (800313c <HAL_TIM_PWM_Stop+0x11c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00e      	beq.n	800306a <HAL_TIM_PWM_Stop+0x4a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a3b      	ldr	r2, [pc, #236]	@ (8003140 <HAL_TIM_PWM_Stop+0x120>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d009      	beq.n	800306a <HAL_TIM_PWM_Stop+0x4a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a3a      	ldr	r2, [pc, #232]	@ (8003144 <HAL_TIM_PWM_Stop+0x124>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_TIM_PWM_Stop+0x4a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a38      	ldr	r2, [pc, #224]	@ (8003148 <HAL_TIM_PWM_Stop+0x128>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_TIM_PWM_Stop+0x4e>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_TIM_PWM_Stop+0x50>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d017      	beq.n	80030a4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10f      	bne.n	80030a4 <HAL_TIM_PWM_Stop+0x84>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6a1a      	ldr	r2, [r3, #32]
 800308a:	f240 4344 	movw	r3, #1092	@ 0x444
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d107      	bne.n	80030a4 <HAL_TIM_PWM_Stop+0x84>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6a1a      	ldr	r2, [r3, #32]
 80030aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10f      	bne.n	80030d4 <HAL_TIM_PWM_Stop+0xb4>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6a1a      	ldr	r2, [r3, #32]
 80030ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d107      	bne.n	80030d4 <HAL_TIM_PWM_Stop+0xb4>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d104      	bne.n	80030e4 <HAL_TIM_PWM_Stop+0xc4>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030e2:	e023      	b.n	800312c <HAL_TIM_PWM_Stop+0x10c>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d104      	bne.n	80030f4 <HAL_TIM_PWM_Stop+0xd4>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030f2:	e01b      	b.n	800312c <HAL_TIM_PWM_Stop+0x10c>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d104      	bne.n	8003104 <HAL_TIM_PWM_Stop+0xe4>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003102:	e013      	b.n	800312c <HAL_TIM_PWM_Stop+0x10c>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d104      	bne.n	8003114 <HAL_TIM_PWM_Stop+0xf4>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003112:	e00b      	b.n	800312c <HAL_TIM_PWM_Stop+0x10c>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b10      	cmp	r3, #16
 8003118:	d104      	bne.n	8003124 <HAL_TIM_PWM_Stop+0x104>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003122:	e003      	b.n	800312c <HAL_TIM_PWM_Stop+0x10c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40013400 	.word	0x40013400
 8003140:	40014000 	.word	0x40014000
 8003144:	40014400 	.word	0x40014400
 8003148:	40014800 	.word	0x40014800

0800314c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d109      	bne.n	8003174 <HAL_TIM_PWM_Start_IT+0x28>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e03c      	b.n	80031ee <HAL_TIM_PWM_Start_IT+0xa2>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b04      	cmp	r3, #4
 8003178:	d109      	bne.n	800318e <HAL_TIM_PWM_Start_IT+0x42>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	bf14      	ite	ne
 8003186:	2301      	movne	r3, #1
 8003188:	2300      	moveq	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	e02f      	b.n	80031ee <HAL_TIM_PWM_Start_IT+0xa2>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d109      	bne.n	80031a8 <HAL_TIM_PWM_Start_IT+0x5c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e022      	b.n	80031ee <HAL_TIM_PWM_Start_IT+0xa2>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	d109      	bne.n	80031c2 <HAL_TIM_PWM_Start_IT+0x76>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	bf14      	ite	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	2300      	moveq	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	e015      	b.n	80031ee <HAL_TIM_PWM_Start_IT+0xa2>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d109      	bne.n	80031dc <HAL_TIM_PWM_Start_IT+0x90>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	bf14      	ite	ne
 80031d4:	2301      	movne	r3, #1
 80031d6:	2300      	moveq	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	e008      	b.n	80031ee <HAL_TIM_PWM_Start_IT+0xa2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	bf14      	ite	ne
 80031e8:	2301      	movne	r3, #1
 80031ea:	2300      	moveq	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0e7      	b.n	80033c6 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d104      	bne.n	8003206 <HAL_TIM_PWM_Start_IT+0xba>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003204:	e023      	b.n	800324e <HAL_TIM_PWM_Start_IT+0x102>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b04      	cmp	r3, #4
 800320a:	d104      	bne.n	8003216 <HAL_TIM_PWM_Start_IT+0xca>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003214:	e01b      	b.n	800324e <HAL_TIM_PWM_Start_IT+0x102>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d104      	bne.n	8003226 <HAL_TIM_PWM_Start_IT+0xda>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003224:	e013      	b.n	800324e <HAL_TIM_PWM_Start_IT+0x102>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b0c      	cmp	r3, #12
 800322a:	d104      	bne.n	8003236 <HAL_TIM_PWM_Start_IT+0xea>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003234:	e00b      	b.n	800324e <HAL_TIM_PWM_Start_IT+0x102>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b10      	cmp	r3, #16
 800323a:	d104      	bne.n	8003246 <HAL_TIM_PWM_Start_IT+0xfa>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003244:	e003      	b.n	800324e <HAL_TIM_PWM_Start_IT+0x102>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b0c      	cmp	r3, #12
 8003252:	d841      	bhi.n	80032d8 <HAL_TIM_PWM_Start_IT+0x18c>
 8003254:	a201      	add	r2, pc, #4	@ (adr r2, 800325c <HAL_TIM_PWM_Start_IT+0x110>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003291 	.word	0x08003291
 8003260:	080032d9 	.word	0x080032d9
 8003264:	080032d9 	.word	0x080032d9
 8003268:	080032d9 	.word	0x080032d9
 800326c:	080032a3 	.word	0x080032a3
 8003270:	080032d9 	.word	0x080032d9
 8003274:	080032d9 	.word	0x080032d9
 8003278:	080032d9 	.word	0x080032d9
 800327c:	080032b5 	.word	0x080032b5
 8003280:	080032d9 	.word	0x080032d9
 8003284:	080032d9 	.word	0x080032d9
 8003288:	080032d9 	.word	0x080032d9
 800328c:	080032c7 	.word	0x080032c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0202 	orr.w	r2, r2, #2
 800329e:	60da      	str	r2, [r3, #12]
      break;
 80032a0:	e01d      	b.n	80032de <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0204 	orr.w	r2, r2, #4
 80032b0:	60da      	str	r2, [r3, #12]
      break;
 80032b2:	e014      	b.n	80032de <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0208 	orr.w	r2, r2, #8
 80032c2:	60da      	str	r2, [r3, #12]
      break;
 80032c4:	e00b      	b.n	80032de <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0210 	orr.w	r2, r2, #16
 80032d4:	60da      	str	r2, [r3, #12]
      break;
 80032d6:	e002      	b.n	80032de <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      break;
 80032dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d16f      	bne.n	80033c4 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2201      	movs	r2, #1
 80032ea:	6839      	ldr	r1, [r7, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 ff83 	bl	80041f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a36      	ldr	r2, [pc, #216]	@ (80033d0 <HAL_TIM_PWM_Start_IT+0x284>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d013      	beq.n	8003324 <HAL_TIM_PWM_Start_IT+0x1d8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a34      	ldr	r2, [pc, #208]	@ (80033d4 <HAL_TIM_PWM_Start_IT+0x288>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00e      	beq.n	8003324 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a33      	ldr	r2, [pc, #204]	@ (80033d8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d009      	beq.n	8003324 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a31      	ldr	r2, [pc, #196]	@ (80033dc <HAL_TIM_PWM_Start_IT+0x290>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_TIM_PWM_Start_IT+0x1d8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a30      	ldr	r2, [pc, #192]	@ (80033e0 <HAL_TIM_PWM_Start_IT+0x294>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_TIM_PWM_Start_IT+0x1dc>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <HAL_TIM_PWM_Start_IT+0x1de>
 8003328:	2300      	movs	r3, #0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a23      	ldr	r2, [pc, #140]	@ (80033d0 <HAL_TIM_PWM_Start_IT+0x284>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d01d      	beq.n	8003384 <HAL_TIM_PWM_Start_IT+0x238>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003350:	d018      	beq.n	8003384 <HAL_TIM_PWM_Start_IT+0x238>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a23      	ldr	r2, [pc, #140]	@ (80033e4 <HAL_TIM_PWM_Start_IT+0x298>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d013      	beq.n	8003384 <HAL_TIM_PWM_Start_IT+0x238>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a21      	ldr	r2, [pc, #132]	@ (80033e8 <HAL_TIM_PWM_Start_IT+0x29c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00e      	beq.n	8003384 <HAL_TIM_PWM_Start_IT+0x238>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a20      	ldr	r2, [pc, #128]	@ (80033ec <HAL_TIM_PWM_Start_IT+0x2a0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_TIM_PWM_Start_IT+0x238>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a17      	ldr	r2, [pc, #92]	@ (80033d4 <HAL_TIM_PWM_Start_IT+0x288>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_TIM_PWM_Start_IT+0x238>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a16      	ldr	r2, [pc, #88]	@ (80033d8 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d115      	bne.n	80033b0 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	4b19      	ldr	r3, [pc, #100]	@ (80033f0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800338c:	4013      	ands	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b06      	cmp	r3, #6
 8003394:	d015      	beq.n	80033c2 <HAL_TIM_PWM_Start_IT+0x276>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800339c:	d011      	beq.n	80033c2 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0201 	orr.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ae:	e008      	b.n	80033c2 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e000      	b.n	80033c4 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40012c00 	.word	0x40012c00
 80033d4:	40013400 	.word	0x40013400
 80033d8:	40014000 	.word	0x40014000
 80033dc:	40014400 	.word	0x40014400
 80033e0:	40014800 	.word	0x40014800
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40000c00 	.word	0x40000c00
 80033f0:	00010007 	.word	0x00010007

080033f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d020      	beq.n	8003458 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01b      	beq.n	8003458 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0202 	mvn.w	r2, #2
 8003428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fa44 	bl	80038cc <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fa36 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fd f9fd 	bl	800084c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	d020      	beq.n	80034a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01b      	beq.n	80034a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0204 	mvn.w	r2, #4
 8003474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2202      	movs	r2, #2
 800347a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fa1e 	bl	80038cc <HAL_TIM_IC_CaptureCallback>
 8003490:	e005      	b.n	800349e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa10 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7fd f9d7 	bl	800084c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d020      	beq.n	80034f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01b      	beq.n	80034f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0208 	mvn.w	r2, #8
 80034c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2204      	movs	r2, #4
 80034c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f9f8 	bl	80038cc <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f9ea 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7fd f9b1 	bl	800084c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d020      	beq.n	800353c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01b      	beq.n	800353c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0210 	mvn.w	r2, #16
 800350c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2208      	movs	r2, #8
 8003512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9d2 	bl	80038cc <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f9c4 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fd f98b 	bl	800084c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00c      	beq.n	8003560 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0201 	mvn.w	r2, #1
 8003558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f9a2 	bl	80038a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00c      	beq.n	8003584 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800357c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fef2 	bl	8004368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00c      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 feea 	bl	800437c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f98a 	bl	80038e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0220 	mvn.w	r2, #32
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 feb2 	bl	8004354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003612:	2302      	movs	r3, #2
 8003614:	e0ff      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b14      	cmp	r3, #20
 8003622:	f200 80f0 	bhi.w	8003806 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003626:	a201      	add	r2, pc, #4	@ (adr r2, 800362c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362c:	08003681 	.word	0x08003681
 8003630:	08003807 	.word	0x08003807
 8003634:	08003807 	.word	0x08003807
 8003638:	08003807 	.word	0x08003807
 800363c:	080036c1 	.word	0x080036c1
 8003640:	08003807 	.word	0x08003807
 8003644:	08003807 	.word	0x08003807
 8003648:	08003807 	.word	0x08003807
 800364c:	08003703 	.word	0x08003703
 8003650:	08003807 	.word	0x08003807
 8003654:	08003807 	.word	0x08003807
 8003658:	08003807 	.word	0x08003807
 800365c:	08003743 	.word	0x08003743
 8003660:	08003807 	.word	0x08003807
 8003664:	08003807 	.word	0x08003807
 8003668:	08003807 	.word	0x08003807
 800366c:	08003785 	.word	0x08003785
 8003670:	08003807 	.word	0x08003807
 8003674:	08003807 	.word	0x08003807
 8003678:	08003807 	.word	0x08003807
 800367c:	080037c5 	.word	0x080037c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f9ce 	bl	8003a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0208 	orr.w	r2, r2, #8
 800369a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0204 	bic.w	r2, r2, #4
 80036aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6999      	ldr	r1, [r3, #24]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	619a      	str	r2, [r3, #24]
      break;
 80036be:	e0a5      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fa3e 	bl	8003b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6999      	ldr	r1, [r3, #24]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	619a      	str	r2, [r3, #24]
      break;
 8003700:	e084      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 faa7 	bl	8003c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0208 	orr.w	r2, r2, #8
 800371c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0204 	bic.w	r2, r2, #4
 800372c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69d9      	ldr	r1, [r3, #28]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	61da      	str	r2, [r3, #28]
      break;
 8003740:	e064      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fb0f 	bl	8003d6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800375c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800376c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69d9      	ldr	r1, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	021a      	lsls	r2, r3, #8
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	61da      	str	r2, [r3, #28]
      break;
 8003782:	e043      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fb58 	bl	8003e40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0208 	orr.w	r2, r2, #8
 800379e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0204 	bic.w	r2, r2, #4
 80037ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037c2:	e023      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fb9c 	bl	8003f08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	021a      	lsls	r2, r3, #8
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003804:	e002      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	75fb      	strb	r3, [r7, #23]
      break;
 800380a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop

08003820 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003834:	2302      	movs	r3, #2
 8003836:	e031      	b.n	800389c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003848:	6839      	ldr	r1, [r7, #0]
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fbc2 	bl	8003fd4 <TIM_SlaveTimer_SetConfig>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e018      	b.n	800389c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003878:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003888:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a40      	ldr	r2, [pc, #256]	@ (8003a08 <TIM_Base_SetConfig+0x114>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003912:	d00f      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a3d      	ldr	r2, [pc, #244]	@ (8003a0c <TIM_Base_SetConfig+0x118>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00b      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a10 <TIM_Base_SetConfig+0x11c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a3b      	ldr	r2, [pc, #236]	@ (8003a14 <TIM_Base_SetConfig+0x120>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a3a      	ldr	r2, [pc, #232]	@ (8003a18 <TIM_Base_SetConfig+0x124>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d108      	bne.n	8003946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a2f      	ldr	r2, [pc, #188]	@ (8003a08 <TIM_Base_SetConfig+0x114>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01f      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003954:	d01b      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2c      	ldr	r2, [pc, #176]	@ (8003a0c <TIM_Base_SetConfig+0x118>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d017      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2b      	ldr	r2, [pc, #172]	@ (8003a10 <TIM_Base_SetConfig+0x11c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a2a      	ldr	r2, [pc, #168]	@ (8003a14 <TIM_Base_SetConfig+0x120>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00f      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a29      	ldr	r2, [pc, #164]	@ (8003a18 <TIM_Base_SetConfig+0x124>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00b      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a28      	ldr	r2, [pc, #160]	@ (8003a1c <TIM_Base_SetConfig+0x128>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a27      	ldr	r2, [pc, #156]	@ (8003a20 <TIM_Base_SetConfig+0x12c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a26      	ldr	r2, [pc, #152]	@ (8003a24 <TIM_Base_SetConfig+0x130>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d108      	bne.n	80039a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a10      	ldr	r2, [pc, #64]	@ (8003a08 <TIM_Base_SetConfig+0x114>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00f      	beq.n	80039ec <TIM_Base_SetConfig+0xf8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a12      	ldr	r2, [pc, #72]	@ (8003a18 <TIM_Base_SetConfig+0x124>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00b      	beq.n	80039ec <TIM_Base_SetConfig+0xf8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a11      	ldr	r2, [pc, #68]	@ (8003a1c <TIM_Base_SetConfig+0x128>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <TIM_Base_SetConfig+0xf8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a10      	ldr	r2, [pc, #64]	@ (8003a20 <TIM_Base_SetConfig+0x12c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_Base_SetConfig+0xf8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003a24 <TIM_Base_SetConfig+0x130>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d103      	bne.n	80039f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	615a      	str	r2, [r3, #20]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000800 	.word	0x40000800
 8003a14:	40000c00 	.word	0x40000c00
 8003a18:	40013400 	.word	0x40013400
 8003a1c:	40014000 	.word	0x40014000
 8003a20:	40014400 	.word	0x40014400
 8003a24:	40014800 	.word	0x40014800

08003a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f023 0201 	bic.w	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f023 0302 	bic.w	r3, r3, #2
 8003a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a2c      	ldr	r2, [pc, #176]	@ (8003b34 <TIM_OC1_SetConfig+0x10c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00f      	beq.n	8003aa8 <TIM_OC1_SetConfig+0x80>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a2b      	ldr	r2, [pc, #172]	@ (8003b38 <TIM_OC1_SetConfig+0x110>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_OC1_SetConfig+0x80>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a2a      	ldr	r2, [pc, #168]	@ (8003b3c <TIM_OC1_SetConfig+0x114>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_OC1_SetConfig+0x80>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a29      	ldr	r2, [pc, #164]	@ (8003b40 <TIM_OC1_SetConfig+0x118>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_OC1_SetConfig+0x80>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a28      	ldr	r2, [pc, #160]	@ (8003b44 <TIM_OC1_SetConfig+0x11c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d10c      	bne.n	8003ac2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f023 0308 	bic.w	r3, r3, #8
 8003aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b34 <TIM_OC1_SetConfig+0x10c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00f      	beq.n	8003aea <TIM_OC1_SetConfig+0xc2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a1a      	ldr	r2, [pc, #104]	@ (8003b38 <TIM_OC1_SetConfig+0x110>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <TIM_OC1_SetConfig+0xc2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a19      	ldr	r2, [pc, #100]	@ (8003b3c <TIM_OC1_SetConfig+0x114>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_OC1_SetConfig+0xc2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a18      	ldr	r2, [pc, #96]	@ (8003b40 <TIM_OC1_SetConfig+0x118>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_OC1_SetConfig+0xc2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a17      	ldr	r2, [pc, #92]	@ (8003b44 <TIM_OC1_SetConfig+0x11c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d111      	bne.n	8003b0e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	621a      	str	r2, [r3, #32]
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40013400 	.word	0x40013400
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40014400 	.word	0x40014400
 8003b44:	40014800 	.word	0x40014800

08003b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f023 0210 	bic.w	r2, r3, #16
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f023 0320 	bic.w	r3, r3, #32
 8003b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a28      	ldr	r2, [pc, #160]	@ (8003c48 <TIM_OC2_SetConfig+0x100>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <TIM_OC2_SetConfig+0x6c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a27      	ldr	r2, [pc, #156]	@ (8003c4c <TIM_OC2_SetConfig+0x104>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d10d      	bne.n	8003bd0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c48 <TIM_OC2_SetConfig+0x100>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00f      	beq.n	8003bf8 <TIM_OC2_SetConfig+0xb0>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a1c      	ldr	r2, [pc, #112]	@ (8003c4c <TIM_OC2_SetConfig+0x104>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <TIM_OC2_SetConfig+0xb0>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <TIM_OC2_SetConfig+0x108>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <TIM_OC2_SetConfig+0xb0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a1a      	ldr	r2, [pc, #104]	@ (8003c54 <TIM_OC2_SetConfig+0x10c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_OC2_SetConfig+0xb0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <TIM_OC2_SetConfig+0x110>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d113      	bne.n	8003c20 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	621a      	str	r2, [r3, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40013400 	.word	0x40013400
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800

08003c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a27      	ldr	r2, [pc, #156]	@ (8003d58 <TIM_OC3_SetConfig+0xfc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_OC3_SetConfig+0x6a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a26      	ldr	r2, [pc, #152]	@ (8003d5c <TIM_OC3_SetConfig+0x100>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10d      	bne.n	8003ce2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d58 <TIM_OC3_SetConfig+0xfc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00f      	beq.n	8003d0a <TIM_OC3_SetConfig+0xae>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a1b      	ldr	r2, [pc, #108]	@ (8003d5c <TIM_OC3_SetConfig+0x100>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <TIM_OC3_SetConfig+0xae>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8003d60 <TIM_OC3_SetConfig+0x104>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_OC3_SetConfig+0xae>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a19      	ldr	r2, [pc, #100]	@ (8003d64 <TIM_OC3_SetConfig+0x108>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_OC3_SetConfig+0xae>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a18      	ldr	r2, [pc, #96]	@ (8003d68 <TIM_OC3_SetConfig+0x10c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d113      	bne.n	8003d32 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	621a      	str	r2, [r3, #32]
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40013400 	.word	0x40013400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800

08003d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	031b      	lsls	r3, r3, #12
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a18      	ldr	r2, [pc, #96]	@ (8003e2c <TIM_OC4_SetConfig+0xc0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00f      	beq.n	8003df0 <TIM_OC4_SetConfig+0x84>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a17      	ldr	r2, [pc, #92]	@ (8003e30 <TIM_OC4_SetConfig+0xc4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00b      	beq.n	8003df0 <TIM_OC4_SetConfig+0x84>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a16      	ldr	r2, [pc, #88]	@ (8003e34 <TIM_OC4_SetConfig+0xc8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d007      	beq.n	8003df0 <TIM_OC4_SetConfig+0x84>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a15      	ldr	r2, [pc, #84]	@ (8003e38 <TIM_OC4_SetConfig+0xcc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d003      	beq.n	8003df0 <TIM_OC4_SetConfig+0x84>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a14      	ldr	r2, [pc, #80]	@ (8003e3c <TIM_OC4_SetConfig+0xd0>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d109      	bne.n	8003e04 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40013400 	.word	0x40013400
 8003e34:	40014000 	.word	0x40014000
 8003e38:	40014400 	.word	0x40014400
 8003e3c:	40014800 	.word	0x40014800

08003e40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003e84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	041b      	lsls	r3, r3, #16
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a17      	ldr	r2, [pc, #92]	@ (8003ef4 <TIM_OC5_SetConfig+0xb4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00f      	beq.n	8003eba <TIM_OC5_SetConfig+0x7a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a16      	ldr	r2, [pc, #88]	@ (8003ef8 <TIM_OC5_SetConfig+0xb8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00b      	beq.n	8003eba <TIM_OC5_SetConfig+0x7a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a15      	ldr	r2, [pc, #84]	@ (8003efc <TIM_OC5_SetConfig+0xbc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <TIM_OC5_SetConfig+0x7a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a14      	ldr	r2, [pc, #80]	@ (8003f00 <TIM_OC5_SetConfig+0xc0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_OC5_SetConfig+0x7a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a13      	ldr	r2, [pc, #76]	@ (8003f04 <TIM_OC5_SetConfig+0xc4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d109      	bne.n	8003ece <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	621a      	str	r2, [r3, #32]
}
 8003ee8:	bf00      	nop
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40013400 	.word	0x40013400
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800

08003f08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	051b      	lsls	r3, r3, #20
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a18      	ldr	r2, [pc, #96]	@ (8003fc0 <TIM_OC6_SetConfig+0xb8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00f      	beq.n	8003f84 <TIM_OC6_SetConfig+0x7c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a17      	ldr	r2, [pc, #92]	@ (8003fc4 <TIM_OC6_SetConfig+0xbc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <TIM_OC6_SetConfig+0x7c>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a16      	ldr	r2, [pc, #88]	@ (8003fc8 <TIM_OC6_SetConfig+0xc0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <TIM_OC6_SetConfig+0x7c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a15      	ldr	r2, [pc, #84]	@ (8003fcc <TIM_OC6_SetConfig+0xc4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_OC6_SetConfig+0x7c>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a14      	ldr	r2, [pc, #80]	@ (8003fd0 <TIM_OC6_SetConfig+0xc8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d109      	bne.n	8003f98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	029b      	lsls	r3, r3, #10
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40012c00 	.word	0x40012c00
 8003fc4:	40013400 	.word	0x40013400
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800

08003fd4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004002:	f023 0307 	bic.w	r3, r3, #7
 8004006:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b70      	cmp	r3, #112	@ 0x70
 8004020:	d01a      	beq.n	8004058 <TIM_SlaveTimer_SetConfig+0x84>
 8004022:	2b70      	cmp	r3, #112	@ 0x70
 8004024:	d860      	bhi.n	80040e8 <TIM_SlaveTimer_SetConfig+0x114>
 8004026:	2b60      	cmp	r3, #96	@ 0x60
 8004028:	d054      	beq.n	80040d4 <TIM_SlaveTimer_SetConfig+0x100>
 800402a:	2b60      	cmp	r3, #96	@ 0x60
 800402c:	d85c      	bhi.n	80040e8 <TIM_SlaveTimer_SetConfig+0x114>
 800402e:	2b50      	cmp	r3, #80	@ 0x50
 8004030:	d046      	beq.n	80040c0 <TIM_SlaveTimer_SetConfig+0xec>
 8004032:	2b50      	cmp	r3, #80	@ 0x50
 8004034:	d858      	bhi.n	80040e8 <TIM_SlaveTimer_SetConfig+0x114>
 8004036:	2b40      	cmp	r3, #64	@ 0x40
 8004038:	d019      	beq.n	800406e <TIM_SlaveTimer_SetConfig+0x9a>
 800403a:	2b40      	cmp	r3, #64	@ 0x40
 800403c:	d854      	bhi.n	80040e8 <TIM_SlaveTimer_SetConfig+0x114>
 800403e:	2b30      	cmp	r3, #48	@ 0x30
 8004040:	d055      	beq.n	80040ee <TIM_SlaveTimer_SetConfig+0x11a>
 8004042:	2b30      	cmp	r3, #48	@ 0x30
 8004044:	d850      	bhi.n	80040e8 <TIM_SlaveTimer_SetConfig+0x114>
 8004046:	2b20      	cmp	r3, #32
 8004048:	d051      	beq.n	80040ee <TIM_SlaveTimer_SetConfig+0x11a>
 800404a:	2b20      	cmp	r3, #32
 800404c:	d84c      	bhi.n	80040e8 <TIM_SlaveTimer_SetConfig+0x114>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04d      	beq.n	80040ee <TIM_SlaveTimer_SetConfig+0x11a>
 8004052:	2b10      	cmp	r3, #16
 8004054:	d04b      	beq.n	80040ee <TIM_SlaveTimer_SetConfig+0x11a>
 8004056:	e047      	b.n	80040e8 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004068:	f000 f8a6 	bl	80041b8 <TIM_ETR_SetConfig>
      break;
 800406c:	e040      	b.n	80040f0 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b05      	cmp	r3, #5
 8004074:	d101      	bne.n	800407a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e03b      	b.n	80040f2 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a1a      	ldr	r2, [r3, #32]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040a0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]
      break;
 80040be:	e017      	b.n	80040f0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040cc:	461a      	mov	r2, r3
 80040ce:	f000 f814 	bl	80040fa <TIM_TI1_ConfigInputStage>
      break;
 80040d2:	e00d      	b.n	80040f0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e0:	461a      	mov	r2, r3
 80040e2:	f000 f839 	bl	8004158 <TIM_TI2_ConfigInputStage>
      break;
 80040e6:	e003      	b.n	80040f0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	75fb      	strb	r3, [r7, #23]
      break;
 80040ec:	e000      	b.n	80040f0 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80040ee:	bf00      	nop
  }

  return status;
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b087      	sub	sp, #28
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f023 0201 	bic.w	r2, r3, #1
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004124:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f023 030a 	bic.w	r3, r3, #10
 8004136:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	621a      	str	r2, [r3, #32]
}
 800414c:	bf00      	nop
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 0210 	bic.w	r2, r3, #16
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	031b      	lsls	r3, r3, #12
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004194:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	621a      	str	r2, [r3, #32]
}
 80041ac:	bf00      	nop
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	021a      	lsls	r2, r3, #8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	431a      	orrs	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4313      	orrs	r3, r2
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	609a      	str	r2, [r3, #8]
}
 80041ec:	bf00      	nop
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	2201      	movs	r2, #1
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a1a      	ldr	r2, [r3, #32]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	43db      	mvns	r3, r3
 800421a:	401a      	ands	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1a      	ldr	r2, [r3, #32]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	431a      	orrs	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004258:	2302      	movs	r3, #2
 800425a:	e068      	b.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2e      	ldr	r2, [pc, #184]	@ (800433c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2d      	ldr	r2, [pc, #180]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d108      	bne.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004296:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1e      	ldr	r2, [pc, #120]	@ (800433c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d01d      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ce:	d018      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004344 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1a      	ldr	r2, [pc, #104]	@ (8004348 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00e      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a18      	ldr	r2, [pc, #96]	@ (800434c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d009      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a13      	ldr	r2, [pc, #76]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d004      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a14      	ldr	r2, [pc, #80]	@ (8004350 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d10c      	bne.n	800431c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	4313      	orrs	r3, r2
 8004312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40013400 	.word	0x40013400
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40014000 	.word	0x40014000

08004354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e040      	b.n	8004424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fc fdc8 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2224      	movs	r2, #36	@ 0x24
 80043bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fb6a 	bl	8004ab0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f8af 	bl	8004540 <UART_SetConfig>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e01b      	b.n	8004424 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800440a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fbe9 	bl	8004bf4 <UART_CheckIdleState>
 8004422:	4603      	mov	r3, r0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	@ 0x28
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004440:	2b20      	cmp	r3, #32
 8004442:	d177      	bne.n	8004534 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_UART_Transmit+0x24>
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e070      	b.n	8004536 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2221      	movs	r2, #33	@ 0x21
 8004460:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004462:	f7fc fe89 	bl	8001178 <HAL_GetTick>
 8004466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	88fa      	ldrh	r2, [r7, #6]
 800446c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	88fa      	ldrh	r2, [r7, #6]
 8004474:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004480:	d108      	bne.n	8004494 <HAL_UART_Transmit+0x68>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d104      	bne.n	8004494 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	e003      	b.n	800449c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800449c:	e02f      	b.n	80044fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2200      	movs	r2, #0
 80044a6:	2180      	movs	r1, #128	@ 0x80
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fc4b 	bl	8004d44 <UART_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e03b      	b.n	8004536 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	881a      	ldrh	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d0:	b292      	uxth	r2, r2
 80044d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	3302      	adds	r3, #2
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	e007      	b.n	80044ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	781a      	ldrb	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3301      	adds	r3, #1
 80044ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1c9      	bne.n	800449e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2200      	movs	r2, #0
 8004512:	2140      	movs	r1, #64	@ 0x40
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fc15 	bl	8004d44 <UART_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d004      	beq.n	800452a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e005      	b.n	8004536 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	e000      	b.n	8004536 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004534:	2302      	movs	r3, #2
  }
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004544:	b08a      	sub	sp, #40	@ 0x28
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	431a      	orrs	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	431a      	orrs	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	4313      	orrs	r3, r2
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4ba4      	ldr	r3, [pc, #656]	@ (8004800 <UART_SetConfig+0x2c0>)
 8004570:	4013      	ands	r3, r2
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004578:	430b      	orrs	r3, r1
 800457a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a99      	ldr	r2, [pc, #612]	@ (8004804 <UART_SetConfig+0x2c4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d004      	beq.n	80045ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a8:	4313      	orrs	r3, r2
 80045aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045bc:	430a      	orrs	r2, r1
 80045be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a90      	ldr	r2, [pc, #576]	@ (8004808 <UART_SetConfig+0x2c8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d126      	bne.n	8004618 <UART_SetConfig+0xd8>
 80045ca:	4b90      	ldr	r3, [pc, #576]	@ (800480c <UART_SetConfig+0x2cc>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d81b      	bhi.n	8004610 <UART_SetConfig+0xd0>
 80045d8:	a201      	add	r2, pc, #4	@ (adr r2, 80045e0 <UART_SetConfig+0xa0>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	080045f1 	.word	0x080045f1
 80045e4:	08004601 	.word	0x08004601
 80045e8:	080045f9 	.word	0x080045f9
 80045ec:	08004609 	.word	0x08004609
 80045f0:	2301      	movs	r3, #1
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f6:	e116      	b.n	8004826 <UART_SetConfig+0x2e6>
 80045f8:	2302      	movs	r3, #2
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fe:	e112      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004600:	2304      	movs	r3, #4
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004606:	e10e      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004608:	2308      	movs	r3, #8
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460e:	e10a      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004610:	2310      	movs	r3, #16
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004616:	e106      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a7c      	ldr	r2, [pc, #496]	@ (8004810 <UART_SetConfig+0x2d0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d138      	bne.n	8004694 <UART_SetConfig+0x154>
 8004622:	4b7a      	ldr	r3, [pc, #488]	@ (800480c <UART_SetConfig+0x2cc>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d82d      	bhi.n	800468c <UART_SetConfig+0x14c>
 8004630:	a201      	add	r2, pc, #4	@ (adr r2, 8004638 <UART_SetConfig+0xf8>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800466d 	.word	0x0800466d
 800463c:	0800468d 	.word	0x0800468d
 8004640:	0800468d 	.word	0x0800468d
 8004644:	0800468d 	.word	0x0800468d
 8004648:	0800467d 	.word	0x0800467d
 800464c:	0800468d 	.word	0x0800468d
 8004650:	0800468d 	.word	0x0800468d
 8004654:	0800468d 	.word	0x0800468d
 8004658:	08004675 	.word	0x08004675
 800465c:	0800468d 	.word	0x0800468d
 8004660:	0800468d 	.word	0x0800468d
 8004664:	0800468d 	.word	0x0800468d
 8004668:	08004685 	.word	0x08004685
 800466c:	2300      	movs	r3, #0
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004672:	e0d8      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004674:	2302      	movs	r3, #2
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467a:	e0d4      	b.n	8004826 <UART_SetConfig+0x2e6>
 800467c:	2304      	movs	r3, #4
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004682:	e0d0      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004684:	2308      	movs	r3, #8
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468a:	e0cc      	b.n	8004826 <UART_SetConfig+0x2e6>
 800468c:	2310      	movs	r3, #16
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004692:	e0c8      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a5e      	ldr	r2, [pc, #376]	@ (8004814 <UART_SetConfig+0x2d4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d125      	bne.n	80046ea <UART_SetConfig+0x1aa>
 800469e:	4b5b      	ldr	r3, [pc, #364]	@ (800480c <UART_SetConfig+0x2cc>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046a8:	2b30      	cmp	r3, #48	@ 0x30
 80046aa:	d016      	beq.n	80046da <UART_SetConfig+0x19a>
 80046ac:	2b30      	cmp	r3, #48	@ 0x30
 80046ae:	d818      	bhi.n	80046e2 <UART_SetConfig+0x1a2>
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d00a      	beq.n	80046ca <UART_SetConfig+0x18a>
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d814      	bhi.n	80046e2 <UART_SetConfig+0x1a2>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <UART_SetConfig+0x182>
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d008      	beq.n	80046d2 <UART_SetConfig+0x192>
 80046c0:	e00f      	b.n	80046e2 <UART_SetConfig+0x1a2>
 80046c2:	2300      	movs	r3, #0
 80046c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c8:	e0ad      	b.n	8004826 <UART_SetConfig+0x2e6>
 80046ca:	2302      	movs	r3, #2
 80046cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d0:	e0a9      	b.n	8004826 <UART_SetConfig+0x2e6>
 80046d2:	2304      	movs	r3, #4
 80046d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d8:	e0a5      	b.n	8004826 <UART_SetConfig+0x2e6>
 80046da:	2308      	movs	r3, #8
 80046dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e0:	e0a1      	b.n	8004826 <UART_SetConfig+0x2e6>
 80046e2:	2310      	movs	r3, #16
 80046e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e8:	e09d      	b.n	8004826 <UART_SetConfig+0x2e6>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004818 <UART_SetConfig+0x2d8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d125      	bne.n	8004740 <UART_SetConfig+0x200>
 80046f4:	4b45      	ldr	r3, [pc, #276]	@ (800480c <UART_SetConfig+0x2cc>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004700:	d016      	beq.n	8004730 <UART_SetConfig+0x1f0>
 8004702:	2bc0      	cmp	r3, #192	@ 0xc0
 8004704:	d818      	bhi.n	8004738 <UART_SetConfig+0x1f8>
 8004706:	2b80      	cmp	r3, #128	@ 0x80
 8004708:	d00a      	beq.n	8004720 <UART_SetConfig+0x1e0>
 800470a:	2b80      	cmp	r3, #128	@ 0x80
 800470c:	d814      	bhi.n	8004738 <UART_SetConfig+0x1f8>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <UART_SetConfig+0x1d8>
 8004712:	2b40      	cmp	r3, #64	@ 0x40
 8004714:	d008      	beq.n	8004728 <UART_SetConfig+0x1e8>
 8004716:	e00f      	b.n	8004738 <UART_SetConfig+0x1f8>
 8004718:	2300      	movs	r3, #0
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471e:	e082      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004720:	2302      	movs	r3, #2
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004726:	e07e      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004728:	2304      	movs	r3, #4
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472e:	e07a      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004730:	2308      	movs	r3, #8
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004736:	e076      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004738:	2310      	movs	r3, #16
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473e:	e072      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a35      	ldr	r2, [pc, #212]	@ (800481c <UART_SetConfig+0x2dc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d12a      	bne.n	80047a0 <UART_SetConfig+0x260>
 800474a:	4b30      	ldr	r3, [pc, #192]	@ (800480c <UART_SetConfig+0x2cc>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004750:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004754:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004758:	d01a      	beq.n	8004790 <UART_SetConfig+0x250>
 800475a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800475e:	d81b      	bhi.n	8004798 <UART_SetConfig+0x258>
 8004760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004764:	d00c      	beq.n	8004780 <UART_SetConfig+0x240>
 8004766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800476a:	d815      	bhi.n	8004798 <UART_SetConfig+0x258>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <UART_SetConfig+0x238>
 8004770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004774:	d008      	beq.n	8004788 <UART_SetConfig+0x248>
 8004776:	e00f      	b.n	8004798 <UART_SetConfig+0x258>
 8004778:	2300      	movs	r3, #0
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477e:	e052      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004780:	2302      	movs	r3, #2
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004786:	e04e      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004788:	2304      	movs	r3, #4
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478e:	e04a      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004790:	2308      	movs	r3, #8
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004796:	e046      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004798:	2310      	movs	r3, #16
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479e:	e042      	b.n	8004826 <UART_SetConfig+0x2e6>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a17      	ldr	r2, [pc, #92]	@ (8004804 <UART_SetConfig+0x2c4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d13a      	bne.n	8004820 <UART_SetConfig+0x2e0>
 80047aa:	4b18      	ldr	r3, [pc, #96]	@ (800480c <UART_SetConfig+0x2cc>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80047b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047b8:	d01a      	beq.n	80047f0 <UART_SetConfig+0x2b0>
 80047ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047be:	d81b      	bhi.n	80047f8 <UART_SetConfig+0x2b8>
 80047c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047c4:	d00c      	beq.n	80047e0 <UART_SetConfig+0x2a0>
 80047c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047ca:	d815      	bhi.n	80047f8 <UART_SetConfig+0x2b8>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <UART_SetConfig+0x298>
 80047d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d4:	d008      	beq.n	80047e8 <UART_SetConfig+0x2a8>
 80047d6:	e00f      	b.n	80047f8 <UART_SetConfig+0x2b8>
 80047d8:	2300      	movs	r3, #0
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047de:	e022      	b.n	8004826 <UART_SetConfig+0x2e6>
 80047e0:	2302      	movs	r3, #2
 80047e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047e6:	e01e      	b.n	8004826 <UART_SetConfig+0x2e6>
 80047e8:	2304      	movs	r3, #4
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ee:	e01a      	b.n	8004826 <UART_SetConfig+0x2e6>
 80047f0:	2308      	movs	r3, #8
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f6:	e016      	b.n	8004826 <UART_SetConfig+0x2e6>
 80047f8:	2310      	movs	r3, #16
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047fe:	e012      	b.n	8004826 <UART_SetConfig+0x2e6>
 8004800:	efff69f3 	.word	0xefff69f3
 8004804:	40008000 	.word	0x40008000
 8004808:	40013800 	.word	0x40013800
 800480c:	40021000 	.word	0x40021000
 8004810:	40004400 	.word	0x40004400
 8004814:	40004800 	.word	0x40004800
 8004818:	40004c00 	.word	0x40004c00
 800481c:	40005000 	.word	0x40005000
 8004820:	2310      	movs	r3, #16
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a9f      	ldr	r2, [pc, #636]	@ (8004aa8 <UART_SetConfig+0x568>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d17a      	bne.n	8004926 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004830:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004834:	2b08      	cmp	r3, #8
 8004836:	d824      	bhi.n	8004882 <UART_SetConfig+0x342>
 8004838:	a201      	add	r2, pc, #4	@ (adr r2, 8004840 <UART_SetConfig+0x300>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004865 	.word	0x08004865
 8004844:	08004883 	.word	0x08004883
 8004848:	0800486d 	.word	0x0800486d
 800484c:	08004883 	.word	0x08004883
 8004850:	08004873 	.word	0x08004873
 8004854:	08004883 	.word	0x08004883
 8004858:	08004883 	.word	0x08004883
 800485c:	08004883 	.word	0x08004883
 8004860:	0800487b 	.word	0x0800487b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004864:	f7fd fd7c 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8004868:	61f8      	str	r0, [r7, #28]
        break;
 800486a:	e010      	b.n	800488e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800486c:	4b8f      	ldr	r3, [pc, #572]	@ (8004aac <UART_SetConfig+0x56c>)
 800486e:	61fb      	str	r3, [r7, #28]
        break;
 8004870:	e00d      	b.n	800488e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004872:	f7fd fcdd 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 8004876:	61f8      	str	r0, [r7, #28]
        break;
 8004878:	e009      	b.n	800488e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800487a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800487e:	61fb      	str	r3, [r7, #28]
        break;
 8004880:	e005      	b.n	800488e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800488c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80fb 	beq.w	8004a8c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	4613      	mov	r3, r2
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	4413      	add	r3, r2
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d305      	bcc.n	80048b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d903      	bls.n	80048ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048b8:	e0e8      	b.n	8004a8c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2200      	movs	r2, #0
 80048be:	461c      	mov	r4, r3
 80048c0:	4615      	mov	r5, r2
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	022b      	lsls	r3, r5, #8
 80048cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048d0:	0222      	lsls	r2, r4, #8
 80048d2:	68f9      	ldr	r1, [r7, #12]
 80048d4:	6849      	ldr	r1, [r1, #4]
 80048d6:	0849      	lsrs	r1, r1, #1
 80048d8:	2000      	movs	r0, #0
 80048da:	4688      	mov	r8, r1
 80048dc:	4681      	mov	r9, r0
 80048de:	eb12 0a08 	adds.w	sl, r2, r8
 80048e2:	eb43 0b09 	adc.w	fp, r3, r9
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048f4:	4650      	mov	r0, sl
 80048f6:	4659      	mov	r1, fp
 80048f8:	f7fb fc66 	bl	80001c8 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4613      	mov	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800490a:	d308      	bcc.n	800491e <UART_SetConfig+0x3de>
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004912:	d204      	bcs.n	800491e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	60da      	str	r2, [r3, #12]
 800491c:	e0b6      	b.n	8004a8c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004924:	e0b2      	b.n	8004a8c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800492e:	d15e      	bne.n	80049ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004930:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004934:	2b08      	cmp	r3, #8
 8004936:	d828      	bhi.n	800498a <UART_SetConfig+0x44a>
 8004938:	a201      	add	r2, pc, #4	@ (adr r2, 8004940 <UART_SetConfig+0x400>)
 800493a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493e:	bf00      	nop
 8004940:	08004965 	.word	0x08004965
 8004944:	0800496d 	.word	0x0800496d
 8004948:	08004975 	.word	0x08004975
 800494c:	0800498b 	.word	0x0800498b
 8004950:	0800497b 	.word	0x0800497b
 8004954:	0800498b 	.word	0x0800498b
 8004958:	0800498b 	.word	0x0800498b
 800495c:	0800498b 	.word	0x0800498b
 8004960:	08004983 	.word	0x08004983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004964:	f7fd fcfc 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8004968:	61f8      	str	r0, [r7, #28]
        break;
 800496a:	e014      	b.n	8004996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800496c:	f7fd fd0e 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 8004970:	61f8      	str	r0, [r7, #28]
        break;
 8004972:	e010      	b.n	8004996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004974:	4b4d      	ldr	r3, [pc, #308]	@ (8004aac <UART_SetConfig+0x56c>)
 8004976:	61fb      	str	r3, [r7, #28]
        break;
 8004978:	e00d      	b.n	8004996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497a:	f7fd fc59 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 800497e:	61f8      	str	r0, [r7, #28]
        break;
 8004980:	e009      	b.n	8004996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004986:	61fb      	str	r3, [r7, #28]
        break;
 8004988:	e005      	b.n	8004996 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d077      	beq.n	8004a8c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	005a      	lsls	r2, r3, #1
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	441a      	add	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b0f      	cmp	r3, #15
 80049b6:	d916      	bls.n	80049e6 <UART_SetConfig+0x4a6>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049be:	d212      	bcs.n	80049e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f023 030f 	bic.w	r3, r3, #15
 80049c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	085b      	lsrs	r3, r3, #1
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	8afb      	ldrh	r3, [r7, #22]
 80049d8:	4313      	orrs	r3, r2
 80049da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	8afa      	ldrh	r2, [r7, #22]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	e052      	b.n	8004a8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049ec:	e04e      	b.n	8004a8c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d827      	bhi.n	8004a46 <UART_SetConfig+0x506>
 80049f6:	a201      	add	r2, pc, #4	@ (adr r2, 80049fc <UART_SetConfig+0x4bc>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	08004a47 	.word	0x08004a47
 8004a0c:	08004a37 	.word	0x08004a37
 8004a10:	08004a47 	.word	0x08004a47
 8004a14:	08004a47 	.word	0x08004a47
 8004a18:	08004a47 	.word	0x08004a47
 8004a1c:	08004a3f 	.word	0x08004a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a20:	f7fd fc9e 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8004a24:	61f8      	str	r0, [r7, #28]
        break;
 8004a26:	e014      	b.n	8004a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a28:	f7fd fcb0 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 8004a2c:	61f8      	str	r0, [r7, #28]
        break;
 8004a2e:	e010      	b.n	8004a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a30:	4b1e      	ldr	r3, [pc, #120]	@ (8004aac <UART_SetConfig+0x56c>)
 8004a32:	61fb      	str	r3, [r7, #28]
        break;
 8004a34:	e00d      	b.n	8004a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a36:	f7fd fbfb 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 8004a3a:	61f8      	str	r0, [r7, #28]
        break;
 8004a3c:	e009      	b.n	8004a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a42:	61fb      	str	r3, [r7, #28]
        break;
 8004a44:	e005      	b.n	8004a52 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a50:	bf00      	nop
    }

    if (pclk != 0U)
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d019      	beq.n	8004a8c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	085a      	lsrs	r2, r3, #1
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	441a      	add	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	d909      	bls.n	8004a86 <UART_SetConfig+0x546>
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a78:	d205      	bcs.n	8004a86 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60da      	str	r2, [r3, #12]
 8004a84:	e002      	b.n	8004a8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a98:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3728      	adds	r7, #40	@ 0x28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40008000 	.word	0x40008000
 8004aac:	00f42400 	.word	0x00f42400

08004ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01a      	beq.n	8004bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bae:	d10a      	bne.n	8004bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	605a      	str	r2, [r3, #4]
  }
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b098      	sub	sp, #96	@ 0x60
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c04:	f7fc fab8 	bl	8001178 <HAL_GetTick>
 8004c08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d12e      	bne.n	8004c76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c20:	2200      	movs	r2, #0
 8004c22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f88c 	bl	8004d44 <UART_WaitOnFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d021      	beq.n	8004c76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c46:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e6      	bne.n	8004c32 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e062      	b.n	8004d3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d149      	bne.n	8004d18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f856 	bl	8004d44 <UART_WaitOnFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d03c      	beq.n	8004d18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	623b      	str	r3, [r7, #32]
   return(result);
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e6      	bne.n	8004c9e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3308      	adds	r3, #8
 8004cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cf0:	61fa      	str	r2, [r7, #28]
 8004cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	69b9      	ldr	r1, [r7, #24]
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e5      	bne.n	8004cd0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e011      	b.n	8004d3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3758      	adds	r7, #88	@ 0x58
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	4613      	mov	r3, r2
 8004d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d54:	e049      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5c:	d045      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5e:	f7fc fa0b 	bl	8001178 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d302      	bcc.n	8004d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e048      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d031      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d110      	bne.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2208      	movs	r2, #8
 8004d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f838 	bl	8004e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2208      	movs	r2, #8
 8004da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e029      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dc4:	d111      	bne.n	8004dea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f81e 	bl	8004e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e00f      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4013      	ands	r3, r2
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	bf0c      	ite	eq
 8004dfa:	2301      	moveq	r3, #1
 8004dfc:	2300      	movne	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d0a6      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b095      	sub	sp, #84	@ 0x54
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e22:	e853 3f00 	ldrex	r3, [r3]
 8004e26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e6      	bne.n	8004e1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3308      	adds	r3, #8
 8004e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3308      	adds	r3, #8
 8004e6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e5      	bne.n	8004e4c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d118      	bne.n	8004eba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f023 0310 	bic.w	r3, r3, #16
 8004e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ea6:	61bb      	str	r3, [r7, #24]
 8004ea8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6979      	ldr	r1, [r7, #20]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e6      	bne.n	8004e88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ece:	bf00      	nop
 8004ed0:	3754      	adds	r7, #84	@ 0x54
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <memset>:
 8004eda:	4402      	add	r2, r0
 8004edc:	4603      	mov	r3, r0
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d100      	bne.n	8004ee4 <memset+0xa>
 8004ee2:	4770      	bx	lr
 8004ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ee8:	e7f9      	b.n	8004ede <memset+0x4>
	...

08004eec <__libc_init_array>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	4d0d      	ldr	r5, [pc, #52]	@ (8004f24 <__libc_init_array+0x38>)
 8004ef0:	4c0d      	ldr	r4, [pc, #52]	@ (8004f28 <__libc_init_array+0x3c>)
 8004ef2:	1b64      	subs	r4, r4, r5
 8004ef4:	10a4      	asrs	r4, r4, #2
 8004ef6:	2600      	movs	r6, #0
 8004ef8:	42a6      	cmp	r6, r4
 8004efa:	d109      	bne.n	8004f10 <__libc_init_array+0x24>
 8004efc:	4d0b      	ldr	r5, [pc, #44]	@ (8004f2c <__libc_init_array+0x40>)
 8004efe:	4c0c      	ldr	r4, [pc, #48]	@ (8004f30 <__libc_init_array+0x44>)
 8004f00:	f000 f818 	bl	8004f34 <_init>
 8004f04:	1b64      	subs	r4, r4, r5
 8004f06:	10a4      	asrs	r4, r4, #2
 8004f08:	2600      	movs	r6, #0
 8004f0a:	42a6      	cmp	r6, r4
 8004f0c:	d105      	bne.n	8004f1a <__libc_init_array+0x2e>
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f14:	4798      	blx	r3
 8004f16:	3601      	adds	r6, #1
 8004f18:	e7ee      	b.n	8004ef8 <__libc_init_array+0xc>
 8004f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1e:	4798      	blx	r3
 8004f20:	3601      	adds	r6, #1
 8004f22:	e7f2      	b.n	8004f0a <__libc_init_array+0x1e>
 8004f24:	08004fc8 	.word	0x08004fc8
 8004f28:	08004fc8 	.word	0x08004fc8
 8004f2c:	08004fc8 	.word	0x08004fc8
 8004f30:	08004fcc 	.word	0x08004fcc

08004f34 <_init>:
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f36:	bf00      	nop
 8004f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3a:	bc08      	pop	{r3}
 8004f3c:	469e      	mov	lr, r3
 8004f3e:	4770      	bx	lr

08004f40 <_fini>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	bf00      	nop
 8004f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f46:	bc08      	pop	{r3}
 8004f48:	469e      	mov	lr, r3
 8004f4a:	4770      	bx	lr
